{
  "address": "0x823efb1B5bcf17Bb5Aee78E2aBA070fC3e58dFC2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "_sigsVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "DelayPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DelayedTransferAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelayedTransferExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "depositId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "mintChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mintAccount",
          "type": "address"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "EpochLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "EpochVolumeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaxDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "refChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "refId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "burnAccount",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "delayedTransfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_mintChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_mintAccount",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_mintChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_mintAccount",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumeCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "executeDelayedTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "governors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastOpTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokenTransferGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setDelayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setDelayThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochVolumeCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasUsed",
          "type": "uint256"
        }
      ],
      "name": "setNativeTokenTransferGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigsVerifier",
      "outputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_request",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x97223cd0c5834cd4156ef3f6d6f2abcf72616aacabed2af358c1c0155276e9f6",
  "receipt": {
    "to": null,
    "from": "0x46eE49e5688082C6F0f18f2504b5FcC1bd5244c0",
    "contractAddress": "0x823efb1B5bcf17Bb5Aee78E2aBA070fC3e58dFC2",
    "transactionIndex": 22,
    "gasUsed": "3121633",
    "logsBloom": "0x
    "blockHash": "0x5e2a96437256d3097fe9edee29142a7b4fe844927204d72b031d7e8450dab535",
    "transactionHash": "0x97223cd0c5834cd4156ef3f6d6f2abcf72616aacabed2af358c1c0155276e9f6",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 66675387,
        "transactionHash": "0x97223cd0c5834cd4156ef3f6d6f2abcf72616aacabed2af358c1c0155276e9f6",
        "address": "0x823efb1B5bcf17Bb5Aee78E2aBA070fC3e58dFC2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0x5e2a96437256d3097fe9edee29142a7b4fe844927204d72b031d7e8450dab535"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 66675387,
        "transactionHash": "0x97223cd0c5834cd4156ef3f6d6f2abcf72616aacabed2af358c1c0155276e9f6",
        "address": "0x823efb1B5bcf17Bb5Aee78E2aBA070fC3e58dFC2",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0",
        "logIndex": 73,
        "blockHash": "0x5e2a96437256d3097fe9edee29142a7b4fe844927204d72b031d7e8450dab535"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 66675387,
        "transactionHash": "0x97223cd0c5834cd4156ef3f6d6f2abcf72616aacabed2af358c1c0155276e9f6",
        "address": "0x823efb1B5bcf17Bb5Aee78E2aBA070fC3e58dFC2",
        "topics": [
          "0xdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5"
        ],
        "data": "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0",
        "logIndex": 74,
        "blockHash": "0x5e2a96437256d3097fe9edee29142a7b4fe844927204d72b031d7e8450dab535"
      }
    ],
    "blockNumber": 66675387,
    "cumulativeGasUsed": "5588543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91830A8f5f20ef56804Ce2E7b2d727aD89Cb995f"
  ],
  "numDeployments": 1,
  "solcInputHash": "599f975210cdab3113358d43cb6a3e35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"_sigsVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DelayPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DelayedTransferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelayedTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mintChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintAccount\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"EpochLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"EpochVolumeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"refChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnAccount\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delayedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_mintChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_mintAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_mintChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_mintAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumeCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"executeDelayedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOpTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenTransferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setDelayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setDelayThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"setEpochVolumeCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasUsed\",\"type\":\"uint256\"}],\"name\":\"setNativeTokenTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigsVerifier\",\"outputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_request\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Work together with PeggedTokenBridge contracts deployed at remote chains\",\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,uint64,address,uint64)\":{\"params\":{\"_amount\":\"The amount to deposit.\",\"_mintAccount\":\"The destination account to receive the minted pegged tokens.\",\"_mintChainId\":\"The destination chain ID to mint tokens.\",\"_nonce\":\"A number input to guarantee unique depositId. Can be timestamp in practice.\",\"_token\":\"The original token address.\"}},\"depositNative(uint256,uint64,address,uint64)\":{\"params\":{\"_amount\":\"The amount to deposit.\",\"_mintAccount\":\"The destination account to receive the minted pegged tokens.\",\"_mintChainId\":\"The destination chain ID to mint tokens.\",\"_nonce\":\"A number input to guarantee unique depositId. Can be timestamp in practice.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_powers\":\"The signing powers of the signers.\",\"_request\":\"The serialized Withdraw protobuf.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the bridge's current signing power to be delivered.\"}}},\"title\":\"the vault to deposit and withdraw original tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,uint256,uint64,address,uint64)\":{\"notice\":\"Lock original tokens to trigger cross-chain mint of pegged tokens at a remote chain's PeggedTokenBridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\"},\"depositNative(uint256,uint64,address,uint64)\":{\"notice\":\"Lock native token as original token to trigger cross-chain mint of pegged tokens at a remote chain's PeggedTokenBridge.\"},\"withdraw(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegged-bridge/OriginalTokenVault.sol\":\"OriginalTokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ISigsVerifier {\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\r\\n     * @param _signers sorted list of current signers\\r\\n     * @param _powers powers of current signers\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x64957c1004af8c9a8fe54ad5fdba6e8af24a75f92bf77e7eefe71b1f39926f4c\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdee9c4e935ee53bd7c7d3fd94f02678bb7c55d83cf8de1536d0956800352ad98\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// runtime proto sol library\\r\\nlibrary Pb {\\r\\n    enum WireType {\\r\\n        Varint,\\r\\n        Fixed64,\\r\\n        LengthDelim,\\r\\n        StartGroup,\\r\\n        EndGroup,\\r\\n        Fixed32\\r\\n    }\\r\\n\\r\\n    struct Buffer {\\r\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\r\\n        bytes b; // hold serialized proto msg, readonly\\r\\n    }\\r\\n\\r\\n    // create a new in-memory Buffer object from raw msg bytes\\r\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\r\\n        buf.b = raw;\\r\\n        buf.idx = 0;\\r\\n    }\\r\\n\\r\\n    // whether there are unread bytes\\r\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\r\\n        return buf.idx < buf.b.length;\\r\\n    }\\r\\n\\r\\n    // decode current field number and wiretype\\r\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\r\\n        uint256 v = decVarint(buf);\\r\\n        tag = v / 8;\\r\\n        wiretype = WireType(v & 7);\\r\\n    }\\r\\n\\r\\n    // count tag occurrences, return an array due to no memory map support\\r\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\r\\n    // should keep buf.idx unchanged because this is only a count function\\r\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\r\\n        uint256 originalIdx = buf.idx;\\r\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\r\\n        uint256 tag;\\r\\n        WireType wire;\\r\\n        while (hasMore(buf)) {\\r\\n            (tag, wire) = decKey(buf);\\r\\n            cnts[tag] += 1;\\r\\n            skipValue(buf, wire);\\r\\n        }\\r\\n        buf.idx = originalIdx;\\r\\n    }\\r\\n\\r\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\r\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\r\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\r\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\r\\n        v = buf.idx; // use v to save one additional uint variable\\r\\n        assembly {\\r\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\r\\n        }\\r\\n        uint256 b; // store current byte content\\r\\n        v = 0; // reset to 0 for return value\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            assembly {\\r\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\r\\n            }\\r\\n            v |= (b & 0x7F) << (i * 7);\\r\\n            if (b & 0x80 == 0) {\\r\\n                buf.idx += i + 1;\\r\\n                return v;\\r\\n            }\\r\\n        }\\r\\n        revert(); // i=10, invalid varint stream\\r\\n    }\\r\\n\\r\\n    // read length delimited field and return bytes\\r\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        b = new bytes(len);\\r\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\r\\n        uint256 bStart;\\r\\n        uint256 bufBStart = buf.idx;\\r\\n        assembly {\\r\\n            bStart := add(b, 32)\\r\\n            bufBStart := add(add(bufB, 32), bufBStart)\\r\\n        }\\r\\n        for (uint256 i = 0; i < len; i += 32) {\\r\\n            assembly {\\r\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\r\\n            }\\r\\n        }\\r\\n        buf.idx = end;\\r\\n    }\\r\\n\\r\\n    // return packed ints\\r\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        // array in memory must be init w/ known length\\r\\n        // so we have to create a tmp array w/ max possible len first\\r\\n        uint256[] memory tmp = new uint256[](len);\\r\\n        uint256 i = 0; // count how many ints are there\\r\\n        while (buf.idx < end) {\\r\\n            tmp[i] = decVarint(buf);\\r\\n            i++;\\r\\n        }\\r\\n        t = new uint256[](i); // init t with correct length\\r\\n        for (uint256 j = 0; j < i; j++) {\\r\\n            t[j] = tmp[j];\\r\\n        }\\r\\n        return t;\\r\\n    }\\r\\n\\r\\n    // move idx pass current value field, to beginning of next tag or msg end\\r\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\r\\n        if (wire == WireType.Varint) {\\r\\n            decVarint(buf);\\r\\n        } else if (wire == WireType.LengthDelim) {\\r\\n            uint256 len = decVarint(buf);\\r\\n            buf.idx += len; // skip len bytes value data\\r\\n            require(buf.idx <= buf.b.length); // avoid overflow\\r\\n        } else {\\r\\n            revert();\\r\\n        } // unsupported wiretype\\r\\n    }\\r\\n\\r\\n    // type conversion help utils\\r\\n    function _bool(uint256 x) internal pure returns (bool v) {\\r\\n        return x != 0;\\r\\n    }\\r\\n\\r\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\r\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        } // load all 32bytes to v\\r\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\r\\n    }\\r\\n\\r\\n    function _address(bytes memory b) internal pure returns (address v) {\\r\\n        v = _addressPayable(b);\\r\\n    }\\r\\n\\r\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\r\\n        require(b.length == 20);\\r\\n        //load 32bytes then shift right 12 bytes\\r\\n        assembly {\\r\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\r\\n        require(b.length == 32);\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // uint[] to uint8[]\\r\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\r\\n        t = new uint8[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint8(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\r\\n        t = new uint32[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint32(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\r\\n        t = new uint64[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint64(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\r\\n        t = new bool[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = arr[i] != 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x870ea11c2e01e1af41a0e2b4d78312d7fb3396810476ea16f9b6b0292ed29e78\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPegged.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\r\\n// source: contracts/libraries/proto/pegged.proto\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"./Pb.sol\\\";\\r\\n\\r\\nlibrary PbPegged {\\r\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\r\\n\\r\\n    struct Mint {\\r\\n        address token; // tag: 1\\r\\n        address account; // tag: 2\\r\\n        uint256 amount; // tag: 3\\r\\n        address depositor; // tag: 4\\r\\n        uint64 refChainId; // tag: 5\\r\\n        bytes32 refId; // tag: 6\\r\\n    } // end struct Mint\\r\\n\\r\\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.token = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.account = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 3) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else if (tag == 4) {\\r\\n                m.depositor = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 5) {\\r\\n                m.refChainId = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.refId = Pb._bytes32(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Mint\\r\\n\\r\\n    struct Withdraw {\\r\\n        address token; // tag: 1\\r\\n        address receiver; // tag: 2\\r\\n        uint256 amount; // tag: 3\\r\\n        address burnAccount; // tag: 4\\r\\n        uint64 refChainId; // tag: 5\\r\\n        bytes32 refId; // tag: 6\\r\\n    } // end struct Withdraw\\r\\n\\r\\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.token = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.receiver = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 3) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else if (tag == 4) {\\r\\n                m.burnAccount = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 5) {\\r\\n                m.refChainId = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.refId = Pb._bytes32(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Withdraw\\r\\n}\\r\\n\",\"keccak256\":\"0x33902b5f3f1cbacf9b76cef5f773d608b3641344677848cef7a50ddf34be54f5\",\"license\":\"GPL-3.0-only\"},\"contracts/pegged-bridge/OriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\nimport \\\"../libraries/PbPegged.sol\\\";\\r\\nimport \\\"../safeguard/Pauser.sol\\\";\\r\\nimport \\\"../safeguard/VolumeControl.sol\\\";\\r\\nimport \\\"../safeguard/DelayedTransfer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title the vault to deposit and withdraw original tokens\\r\\n * @dev Work together with PeggedTokenBridge contracts deployed at remote chains\\r\\n */\\r\\ncontract OriginalTokenVault is ReentrancyGuard, Pauser, VolumeControl, DelayedTransfer {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    ISigsVerifier public immutable sigsVerifier;\\r\\n\\r\\n    mapping(bytes32 => bool) public records;\\r\\n\\r\\n    mapping(address => uint256) public minDeposit;\\r\\n    mapping(address => uint256) public maxDeposit;\\r\\n\\r\\n    address public nativeWrap;\\r\\n    uint256 public nativeTokenTransferGas = 50000;\\r\\n\\r\\n    event Deposited(\\r\\n        bytes32 depositId,\\r\\n        address depositor,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint64 mintChainId,\\r\\n        address mintAccount\\r\\n    );\\r\\n    event Withdrawn(\\r\\n        bytes32 withdrawId,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        // ref_chain_id defines the reference chain ID, taking values of:\\r\\n        // 1. The common case of burn-withdraw: the chain ID on which the corresponding burn happened;\\r\\n        // 2. Pegbridge fee claim: zero / not applicable;\\r\\n        // 3. Refund for wrong deposit: this chain ID on which the deposit happened\\r\\n        uint64 refChainId,\\r\\n        // ref_id defines a unique reference ID, taking values of:\\r\\n        // 1. The common case of burn-withdraw: the burn ID on the remote chain;\\r\\n        // 2. Pegbridge fee claim: a per-account nonce;\\r\\n        // 3. Refund for wrong deposit: the deposit ID on this chain\\r\\n        bytes32 refId,\\r\\n        address burnAccount\\r\\n    );\\r\\n    event MinDepositUpdated(address token, uint256 amount);\\r\\n    event MaxDepositUpdated(address token, uint256 amount);\\r\\n\\r\\n    constructor(ISigsVerifier _sigsVerifier) {\\r\\n        sigsVerifier = _sigsVerifier;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock original tokens to trigger cross-chain mint of pegged tokens at a remote chain's PeggedTokenBridge.\\r\\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\\r\\n     * @param _token The original token address.\\r\\n     * @param _amount The amount to deposit.\\r\\n     * @param _mintChainId The destination chain ID to mint tokens.\\r\\n     * @param _mintAccount The destination account to receive the minted pegged tokens.\\r\\n     * @param _nonce A number input to guarantee unique depositId. Can be timestamp in practice.\\r\\n     */\\r\\n    function deposit(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint64 _mintChainId,\\r\\n        address _mintAccount,\\r\\n        uint64 _nonce\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        bytes32 depId = _deposit(_token, _amount, _mintChainId, _mintAccount, _nonce);\\r\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit Deposited(depId, msg.sender, _token, _amount, _mintChainId, _mintAccount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock native token as original token to trigger cross-chain mint of pegged tokens at a remote chain's\\r\\n     * PeggedTokenBridge.\\r\\n     * @param _amount The amount to deposit.\\r\\n     * @param _mintChainId The destination chain ID to mint tokens.\\r\\n     * @param _mintAccount The destination account to receive the minted pegged tokens.\\r\\n     * @param _nonce A number input to guarantee unique depositId. Can be timestamp in practice.\\r\\n     */\\r\\n    function depositNative(\\r\\n        uint256 _amount,\\r\\n        uint64 _mintChainId,\\r\\n        address _mintAccount,\\r\\n        uint64 _nonce\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        require(msg.value == _amount, \\\"Amount mismatch\\\");\\r\\n        require(nativeWrap != address(0), \\\"Native wrap not set\\\");\\r\\n        bytes32 depId = _deposit(nativeWrap, _amount, _mintChainId, _mintAccount, _nonce);\\r\\n        IWETH(nativeWrap).deposit{value: _amount}();\\r\\n        emit Deposited(depId, msg.sender, nativeWrap, _amount, _mintChainId, _mintAccount);\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint64 _mintChainId,\\r\\n        address _mintAccount,\\r\\n        uint64 _nonce\\r\\n    ) private returns (bytes32) {\\r\\n        require(_amount > minDeposit[_token], \\\"amount too small\\\");\\r\\n        require(maxDeposit[_token] == 0 || _amount <= maxDeposit[_token], \\\"amount too large\\\");\\r\\n        bytes32 depId = keccak256(\\r\\n            // len = 20 + 20 + 32 + 8 + 20 + 8 + 8 = 116\\r\\n            abi.encodePacked(msg.sender, _token, _amount, _mintChainId, _mintAccount, _nonce, uint64(block.chainid))\\r\\n        );\\r\\n        require(records[depId] == false, \\\"record exists\\\");\\r\\n        records[depId] = true;\\r\\n        return depId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\r\\n     * @param _request The serialized Withdraw protobuf.\\r\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\r\\n     * +2/3 of the bridge's current signing power to be delivered.\\r\\n     * @param _signers The sorted list of signers.\\r\\n     * @param _powers The signing powers of the signers.\\r\\n     */\\r\\n    function withdraw(\\r\\n        bytes calldata _request,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external whenNotPaused {\\r\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Withdraw\\\"));\\r\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _request), _sigs, _signers, _powers);\\r\\n        PbPegged.Withdraw memory request = PbPegged.decWithdraw(_request);\\r\\n        bytes32 wdId = keccak256(\\r\\n            // len = 20 + 20 + 32 + 20 + 8 + 32 = 132\\r\\n            abi.encodePacked(\\r\\n                request.receiver,\\r\\n                request.token,\\r\\n                request.amount,\\r\\n                request.burnAccount,\\r\\n                request.refChainId,\\r\\n                request.refId\\r\\n            )\\r\\n        );\\r\\n        require(records[wdId] == false, \\\"record exists\\\");\\r\\n        records[wdId] = true;\\r\\n        _updateVolume(request.token, request.amount);\\r\\n        uint256 delayThreshold = delayThresholds[request.token];\\r\\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\\r\\n            _addDelayedTransfer(wdId, request.receiver, request.token, request.amount);\\r\\n        } else {\\r\\n            _sendToken(request.receiver, request.token, request.amount);\\r\\n        }\\r\\n        emit Withdrawn(\\r\\n            wdId,\\r\\n            request.receiver,\\r\\n            request.token,\\r\\n            request.amount,\\r\\n            request.refChainId,\\r\\n            request.refId,\\r\\n            request.burnAccount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\\r\\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\\r\\n        _sendToken(transfer.receiver, transfer.token, transfer.amount);\\r\\n    }\\r\\n\\r\\n    function setMinDeposit(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\r\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            minDeposit[_tokens[i]] = _amounts[i];\\r\\n            emit MinDepositUpdated(_tokens[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMaxDeposit(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\r\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            maxDeposit[_tokens[i]] = _amounts[i];\\r\\n            emit MaxDepositUpdated(_tokens[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setWrap(address _weth) external onlyOwner {\\r\\n        nativeWrap = _weth;\\r\\n    }\\r\\n\\r\\n    function _sendToken(\\r\\n        address _receiver,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) private {\\r\\n        if (_token == nativeWrap) {\\r\\n            // withdraw then transfer native to receiver\\r\\n            IWETH(nativeWrap).withdraw(_amount);\\r\\n            (bool sent, ) = _receiver.call{value: _amount, gas: nativeTokenTransferGas}(\\\"\\\");\\r\\n            require(sent, \\\"failed to send native token\\\");\\r\\n        } else {\\r\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setNativeTokenTransferGas(uint256 _gasUsed) external onlyGovernor {\\r\\n        nativeTokenTransferGas = _gasUsed;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x0c0f8ccc59a303b0d71399be9f060677d34598ea8a31d880b4bd8b23cb7dcad6\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/DelayedTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Governor.sol\\\";\\r\\n\\r\\nabstract contract DelayedTransfer is Governor {\\r\\n    struct delayedTransfer {\\r\\n        address receiver;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\\r\\n    mapping(address => uint256) public delayThresholds;\\r\\n    uint256 public delayPeriod; // in seconds\\r\\n\\r\\n    event DelayedTransferAdded(bytes32 id);\\r\\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\\r\\n\\r\\n    event DelayPeriodUpdated(uint256 period);\\r\\n    event DelayThresholdUpdated(address token, uint256 threshold);\\r\\n\\r\\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\\r\\n        require(_tokens.length == _thresholds.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            delayThresholds[_tokens[i]] = _thresholds[i];\\r\\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\\r\\n        delayPeriod = _period;\\r\\n        emit DelayPeriodUpdated(_period);\\r\\n    }\\r\\n\\r\\n    function _addDelayedTransfer(\\r\\n        bytes32 id,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(delayedTransfers[id].timestamp == 0, \\\"delayed transfer already exists\\\");\\r\\n        delayedTransfers[id] = delayedTransfer({\\r\\n            receiver: receiver,\\r\\n            token: token,\\r\\n            amount: amount,\\r\\n            timestamp: block.timestamp\\r\\n        });\\r\\n        emit DelayedTransferAdded(id);\\r\\n    }\\r\\n\\r\\n    // caller needs to do the actual token transfer\\r\\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\\r\\n        delayedTransfer memory transfer = delayedTransfers[id];\\r\\n        require(transfer.timestamp > 0, \\\"delayed transfer not exist\\\");\\r\\n        require(block.timestamp > transfer.timestamp + delayPeriod, \\\"delayed transfer still locked\\\");\\r\\n        delete delayedTransfers[id];\\r\\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\\r\\n        return transfer;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7cc494de26a3e74f4a735890d74827f161a928d47b2f495cc93f960733b9b8a5\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Governor is Ownable {\\r\\n    mapping(address => bool) public governors;\\r\\n\\r\\n    event GovernorAdded(address account);\\r\\n    event GovernorRemoved(address account);\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(msg.sender), \\\"Caller is not governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _addGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    function isGovernor(address _account) public view returns (bool) {\\r\\n        return governors[_account];\\r\\n    }\\r\\n\\r\\n    function addGovernor(address _account) public onlyOwner {\\r\\n        _addGovernor(_account);\\r\\n    }\\r\\n\\r\\n    function removeGovernor(address _account) public onlyOwner {\\r\\n        _removeGovernor(_account);\\r\\n    }\\r\\n\\r\\n    function renounceGovernor() public {\\r\\n        _removeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addGovernor(address _account) private {\\r\\n        require(!isGovernor(_account), \\\"Account is already governor\\\");\\r\\n        governors[_account] = true;\\r\\n        emit GovernorAdded(_account);\\r\\n    }\\r\\n\\r\\n    function _removeGovernor(address _account) private {\\r\\n        require(isGovernor(_account), \\\"Account is not governor\\\");\\r\\n        governors[_account] = false;\\r\\n        emit GovernorRemoved(_account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45cdf5fcf1d09b1ce6fae2c9dbb4838a6daedbd3d6d81c2e798bb0af3be4985c\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n *\\r\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\r\\n * renounceOwnership. So we can support Proxy based upgradable contract\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\r\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\r\\n     * because constructor sets _owner in contract state.\\r\\n     */\\r\\n    function initOwner() internal {\\r\\n        require(_owner == address(0), \\\"owner already set\\\");\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa85eba884c4b3be9bada2125c59907854d553c63f6610a82eb595bd207f42c3\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Pauser is Ownable, Pausable {\\r\\n    mapping(address => bool) public pausers;\\r\\n\\r\\n    event PauserAdded(address account);\\r\\n    event PauserRemoved(address account);\\r\\n\\r\\n    constructor() {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() public onlyPauser {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyPauser {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return pausers[account];\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyOwner {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function removePauser(address account) public onlyOwner {\\r\\n        _removePauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) private {\\r\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\r\\n        pausers[account] = true;\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) private {\\r\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\r\\n        pausers[account] = false;\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e5dd7a6577d4d1e2cca7f4917472c6b12470672dba0a3592eb8ef0c2d0ab044\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/VolumeControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Governor.sol\\\";\\r\\n\\r\\nabstract contract VolumeControl is Governor {\\r\\n    uint256 public epochLength; // seconds\\r\\n    mapping(address => uint256) public epochVolumes; // key is token\\r\\n    mapping(address => uint256) public epochVolumeCaps; // key is token\\r\\n    mapping(address => uint256) public lastOpTimestamps; // key is token\\r\\n\\r\\n    event EpochLengthUpdated(uint256 length);\\r\\n    event EpochVolumeUpdated(address token, uint256 cap);\\r\\n\\r\\n    function setEpochLength(uint256 _length) external onlyGovernor {\\r\\n        epochLength = _length;\\r\\n        emit EpochLengthUpdated(_length);\\r\\n    }\\r\\n\\r\\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\\r\\n        require(_tokens.length == _caps.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            epochVolumeCaps[_tokens[i]] = _caps[i];\\r\\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateVolume(address _token, uint256 _amount) internal {\\r\\n        if (epochLength == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 cap = epochVolumeCaps[_token];\\r\\n        if (cap == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 volume = epochVolumes[_token];\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\\r\\n        if (lastOpTimestamps[_token] < epochStartTime) {\\r\\n            volume = _amount;\\r\\n        } else {\\r\\n            volume += _amount;\\r\\n        }\\r\\n        require(volume <= cap, \\\"volume exceeds cap\\\");\\r\\n        epochVolumes[_token] = volume;\\r\\n        lastOpTimestamps[_token] = timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x67a714ffb89c547fbd17acbaedfb763a1c719f575bcbf1d713c645ef97942d5c\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405261c350600f553480156200001757600080fd5b50604051620037f7380380620037f78339810160408190526200003a916200025b565b60016000556200004a336200007f565b6001805460ff60a01b191690556200006233620000d1565b6200006d336200019b565b6001600160a01b03166080526200028d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526002602052604090205460ff1615620001405760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f891015b60405180910390a150565b6001600160a01b03811660009081526003602052604090205460ff1615620002065760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f720000000000604482015260640162000137565b6001600160a01b038116600081815260036020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5910162000190565b6000602082840312156200026e57600080fd5b81516001600160a01b03811681146200028657600080fd5b9392505050565b608051613547620002b06000396000818161079e01526117d301526135476000f3fe6080604052600436106102be5760003560e01c80636ef8d66d1161016e578063b517b550116100cb578063e3eece261161007f578063eecdac8811610064578063eecdac881461085e578063f2fde38b1461087e578063f83213831461089e57600080fd5b8063e3eece26146107f5578063e43581b81461082557600080fd5b8063ccf2683b116100b0578063ccf2683b1461078c578063cefe0df5146107c0578063e026049c146107e057600080fd5b8063b517b55014610749578063b5f2bc471461075f57600080fd5b80639e25fc5c11610122578063a21a928011610107578063a21a928014610699578063adc0d57f146106b9578063b1c94d941461073357600080fd5b80639e25fc5c146106595780639ff9001a1461067957600080fd5b806382dc1ec41161015357806382dc1ec4146106065780638456cb59146106265780638da5cb5b1461063b57600080fd5b80636ef8d66d146105c157806380f51c12146105d657600080fd5b8063457bfa2f1161021c57806357d775f8116101d05780635ec2fa26116101b55780635ec2fa261461055457806360216b00146105745780636b2c0f55146105a157600080fd5b806357d775f81461051f5780635c975abb1461053557600080fd5b806347b16c6c1161020157806347b16c6c146104b257806352532faa146104d257806354eea796146104ff57600080fd5b8063457bfa2f1461044157806346fbf68e1461047957600080fd5b80633c29f839116102735780633d572107116102585780633d572107146103df5780633f4ba83a146103ff578063402d267d1461041457600080fd5b80633c29f839146103845780633c4a25d0146103bf57600080fd5b806317bdbae5116102a457806317bdbae5146103245780632346362414610344578063303b64421461036457600080fd5b8062a95fd7146102ca57806301e64725146102df57600080fd5b366102c557005b600080fd5b6102dd6102d8366004612f69565b6108cb565b005b3480156102eb57600080fd5b5061030f6102fa366004612fb6565b600b6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561033057600080fd5b506102dd61033f36600461301b565b610b23565b34801561035057600080fd5b506102dd61035f366004613087565b610cc1565b34801561037057600080fd5b506102dd61037f36600461301b565b610dfe565b34801561039057600080fd5b506103b161039f3660046130e5565b600c6020526000908152604090205481565b60405190815260200161031b565b3480156103cb57600080fd5b506102dd6103da3660046130e5565b610f95565b3480156103eb57600080fd5b506102dd6103fa366004612fb6565b61100a565b34801561040b57600080fd5b506102dd61109e565b34801561042057600080fd5b506103b161042f3660046130e5565b600d6020526000908152604090205481565b34801561044d57600080fd5b50600e54610461906001600160a01b031681565b6040516001600160a01b03909116815260200161031b565b34801561048557600080fd5b5061030f6104943660046130e5565b6001600160a01b031660009081526002602052604090205460ff1690565b3480156104be57600080fd5b506102dd6104cd36600461301b565b611107565b3480156104de57600080fd5b506103b16104ed3660046130e5565b60096020526000908152604090205481565b34801561050b57600080fd5b506102dd61051a366004612fb6565b61129e565b34801561052b57600080fd5b506103b160045481565b34801561054157600080fd5b50600154600160a01b900460ff1661030f565b34801561056057600080fd5b506102dd61056f36600461301b565b61132b565b34801561058057600080fd5b506103b161058f3660046130e5565b60056020526000908152604090205481565b3480156105ad57600080fd5b506102dd6105bc3660046130e5565b6114c2565b3480156105cd57600080fd5b506102dd611534565b3480156105e257600080fd5b5061030f6105f13660046130e5565b60026020526000908152604090205460ff1681565b34801561061257600080fd5b506102dd6106213660046130e5565b61153d565b34801561063257600080fd5b506102dd6115af565b34801561064757600080fd5b506001546001600160a01b0316610461565b34801561066557600080fd5b506102dd610674366004612fb6565b611616565b34801561068557600080fd5b506102dd6106943660046130e5565b61168b565b3480156106a557600080fd5b506102dd6106b4366004613100565b611716565b3480156106c557600080fd5b506107086106d4366004612fb6565b60086020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b03958616815294909316602085015291830152606082015260800161031b565b34801561073f57600080fd5b506103b1600a5481565b34801561075557600080fd5b506103b1600f5481565b34801561076b57600080fd5b506103b161077a3660046130e5565b60066020526000908152604090205481565b34801561079857600080fd5b506104617f000000000000000000000000000000000000000000000000000000000000000081565b3480156107cc57600080fd5b506102dd6107db366004612fb6565b611ad2565b3480156107ec57600080fd5b506102dd611b2f565b34801561080157600080fd5b5061030f6108103660046130e5565b60036020526000908152604090205460ff1681565b34801561083157600080fd5b5061030f6108403660046130e5565b6001600160a01b031660009081526003602052604090205460ff1690565b34801561086a57600080fd5b506102dd6108793660046130e5565b611b38565b34801561088a57600080fd5b506102dd6108993660046130e5565b611baa565b3480156108aa57600080fd5b506103b16108b93660046130e5565b60076020526000908152604090205481565b6002600054036109225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055600154600160a01b900460ff16156109745760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b8334146109c35760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206d69736d6174636800000000000000000000000000000000006044820152606401610919565b600e546001600160a01b0316610a1b5760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610919565b600e54600090610a37906001600160a01b031686868686611c98565b9050600e60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a8957600080fd5b505af1158015610a9d573d6000803e3d6000fd5b5050600e54604080518681523360208201526001600160a01b0392831691810191909152606081018a905267ffffffffffffffff8916608082015290871660a08201527f15d2eeefbe4963b5b2178f239ddcc730dda55f1c23c22efb79ded0eb854ac789935060c0019150610b0f9050565b60405180910390a150506001600055505050565b3360009081526003602052604090205460ff16610b7b5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b828114610bbc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba57828282818110610bd957610bd96131ef565b9050602002013560096000878785818110610bf657610bf66131ef565b9050602002016020810190610c0b91906130e5565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610c5857610c586131ef565b9050602002016020810190610c6d91906130e5565b848484818110610c7f57610c7f6131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610cb28161321b565b915050610bbf565b5050505050565b600260005403610d135760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610919565b6002600055600154600160a01b900460ff1615610d655760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b6000610d748686868686611c98565b9050610d8b6001600160a01b038716333088611e8e565b604080518281523360208201526001600160a01b03888116828401526060820188905267ffffffffffffffff87166080830152851660a082015290517f15d2eeefbe4963b5b2178f239ddcc730dda55f1c23c22efb79ded0eb854ac7899181900360c00190a15050600160005550505050565b3360009081526003602052604090205460ff16610e565760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b828114610e975760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba57828282818110610eb457610eb46131ef565b90506020020135600d6000878785818110610ed157610ed16131ef565b9050602002016020810190610ee691906130e5565b6001600160a01b031681526020810191909152604001600020557f0e5d348f9737ccc8b4cf0eea0ccf3670af071af8bea5d64664f10e700c08de72858583818110610f3357610f336131ef565b9050602002016020810190610f4891906130e5565b848484818110610f5a57610f5a6131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610f8d8161321b565b915050610e9a565b33610fa86001546001600160a01b031690565b6001600160a01b031614610ffe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781611f2c565b50565b3360009081526003602052604090205460ff166110625760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b600a8190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526002602052604090205460ff166110fd5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610919565b611105611fe9565b565b3360009081526003602052604090205460ff1661115f5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b8281146111a05760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba578282828181106111bd576111bd6131ef565b90506020020135600660008787858181106111da576111da6131ef565b90506020020160208101906111ef91906130e5565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061123c5761123c6131ef565b905060200201602081019061125191906130e5565b848484818110611263576112636131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806112968161321b565b9150506111a3565b3360009081526003602052604090205460ff166112f65760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b60048190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001611093565b3360009081526003602052604090205460ff166113835760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b8281146113c45760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba578282828181106113e1576113e16131ef565b90506020020135600c60008787858181106113fe576113fe6131ef565b905060200201602081019061141391906130e5565b6001600160a01b031681526020810191909152604001600020557f0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba6858583818110611460576114606131ef565b905060200201602081019061147591906130e5565b848484818110611487576114876131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806114ba8161321b565b9150506113c7565b336114d56001546001600160a01b031690565b6001600160a01b03161461152b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b6110078161208f565b6111053361208f565b336115506001546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781612148565b3360009081526002602052604090205460ff1661160e5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610919565b611105612205565b600154600160a01b900460ff16156116635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b600061166e8261228d565b9050611687816000015182602001518360400151612452565b5050565b3361169e6001546001600160a01b031690565b6001600160a01b0316146116f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff16156117635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b600046306040516020016117b992919091825260601b6bffffffffffffffffffffffff191660208201527f57697468647261770000000000000000000000000000000000000000000000006034820152603c0190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161181593929190613234565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b815260040161184c9796959493929190613359565b60006040518083038186803b15801561186457600080fd5b505afa158015611878573d6000803e3d6000fd5b5050505060006118bd8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061258492505050565b6020818101518251604080850151606080870151608088015160a0890151855197841b6bffffffffffffffffffffffff19908116898b015296841b871660348901526048880194909452911b909316606885015260c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff1916607c8401526084808401929092528051808403909201825260a490920182528051908301206000818152600b9093529120549192509060ff16156119a85760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610919565b6000818152600b602052604090819020805460ff191660011790558251908301516119d391906126e0565b81516001600160a01b031660009081526009602052604090205480158015906119ff5750808360400151115b15611a2157611a1c828460200151856000015186604001516127fe565b611a38565b611a38836020015184600001518560400151612452565b602080840151845160408087015160808089015160a0808b01516060808d015187518d81526001600160a01b039a8b169b81019b909b52978916968a01969096529488019390935267ffffffffffffffff16908601528401521660c08201527f296a629c5265cb4e5319803d016902eb70a9079b89655fe2b7737821ed88beeb9060e00160405180910390a1505050505050505050505050565b3360009081526003602052604090205460ff16611b2a5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b600f55565b61110533612911565b33611b4b6001546001600160a01b031690565b6001600160a01b031614611ba15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781612911565b33611bbd6001546001600160a01b031690565b6001600160a01b031614611c135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b6001600160a01b038116611c8f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610919565b611007816129ca565b6001600160a01b0385166000908152600c60205260408120548511611cff5760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606401610919565b6001600160a01b0386166000908152600d60205260409020541580611d3c57506001600160a01b0386166000908152600d60205260409020548511155b611d885760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610919565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288811b821660348401526048830188905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c088811b821660688601529187901b909216607084015284811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152600b90935291205490915060ff1615611e6a5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610919565b6000818152600b60205260409020805460ff19166001179055905095945050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611f269085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a1c565b50505050565b6001600160a01b03811660009081526003602052604090205460ff1615611f955760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610919565b6001600160a01b038116600081815260036020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101611093565b600154600160a01b900460ff166120425760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610919565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526002602052604090205460ff166120f75760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610919565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101611093565b6001600160a01b03811660009081526002602052604090205460ff16156121b15760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610919565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101611093565b600154600160a01b900460ff16156122525760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120723390565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260086020908152604091829020825160808101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003909101546060820181905261234c5760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610919565b600a54816060015161235e9190613435565b42116123ac5760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610919565b600083815260086020908152604080832080546001600160a01b03199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d44269361244493889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b600e546001600160a01b039081169083160361256b57600e54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156124ae57600080fd5b505af11580156124c2573d6000803e3d6000fd5b5050600f54604051600093506001600160a01b0387169250849084818181858888f193505050503d8060008114612515576040519150601f19603f3d011682016040523d82523d6000602084013e61251a565b606091505b5050905080611f265760405162461bcd60e51b815260206004820152601b60248201527f6661696c656420746f2073656e64206e617469766520746f6b656e00000000006044820152606401610919565b61257f6001600160a01b0383168483612b01565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156126d8576125e283612b31565b909250905081600103612610576126006125fb84612b6b565b612c28565b6001600160a01b031684526125cb565b81600203612637576126246125fb84612b6b565b6001600160a01b031660208501526125cb565b8160030361265a5761265061264b84612b6b565b612c39565b60408501526125cb565b816004036126815761266e6125fb84612b6b565b6001600160a01b031660608501526125cb565b816005036126a65761269283612c70565b67ffffffffffffffff1660808501526125cb565b816006036126c9576126bf6126ba84612b6b565b612ceb565b60a08501526125cb565b6126d38382612d03565b6125cb565b505050919050565b6004546000036126ee575050565b6001600160a01b0382166000908152600660205260408120549081900361271457505050565b6001600160a01b0383166000908152600560205260408120546004549091429161273e8184613448565b612748919061346a565b6001600160a01b03871660009081526007602052604090205490915081111561277357849250612780565b61277d8584613435565b92505b838311156127d05760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610919565b506001600160a01b039094166000908152600560209081526040808320939093556007905220929092555050565b6000848152600860205260409020600301541561285d5760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610919565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600890935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906129039086815260200190565b60405180910390a150505050565b6001600160a01b03811660009081526003602052604090205460ff166129795760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610919565b6001600160a01b038116600081815260036020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101611093565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612a71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d739092919063ffffffff16565b80519091501561257f5780806020019051810190612a8f9190613481565b61257f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610919565b6040516001600160a01b03831660248201526044810182905261257f90849063a9059cbb60e01b90606401611ec2565b6000806000612b3f84612c70565b9050612b4c600882613448565b9250806007166005811115612b6357612b636134a3565b915050915091565b60606000612b7883612c70565b90506000818460000151612b8c9190613435565b9050836020015151811115612ba057600080fd5b8167ffffffffffffffff811115612bb957612bb96134b9565b6040519080825280601f01601f191660200182016040528015612be3576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015612c1d578181015183820152612c16602082613435565b9050612bfb565b505050935250919050565b6000612c3382612d8c565b92915050565b6000602082511115612c4a57600080fd5b6020820151905081516020612c5f91906134cf565b612c6a90600861346a565b1c919050565b602080820151825181019091015160009182805b600a8110156102c55783811a9150612c9d81600761346a565b82607f16901b8517945081608016600003612cd957612cbd816001613435565b86518790612ccc908390613435565b9052509395945050505050565b80612ce38161321b565b915050612c84565b60008151602014612cfb57600080fd5b506020015190565b6000816005811115612d1757612d176134a3565b03612d255761257f82612c70565b6002816005811115612d3957612d396134a3565b036102c5576000612d4983612c70565b90508083600001818151612d5d9190613435565b9052506020830151518351111561257f57600080fd5b6060612d828484600085612db4565b90505b9392505050565b60008151601414612d9c57600080fd5b50602001516c01000000000000000000000000900490565b606082471015612e2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610919565b6001600160a01b0385163b612e835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610919565b600080866001600160a01b03168587604051612e9f91906134e2565b60006040518083038185875af1925050503d8060008114612edc576040519150601f19603f3d011682016040523d82523d6000602084013e612ee1565b606091505b5091509150612ef1828286612efc565b979650505050505050565b60608315612f0b575081612d85565b825115612f1b5782518084602001fd5b8160405162461bcd60e51b815260040161091991906134fe565b803567ffffffffffffffff81168114612f4d57600080fd5b919050565b80356001600160a01b0381168114612f4d57600080fd5b60008060008060808587031215612f7f57600080fd5b84359350612f8f60208601612f35565b9250612f9d60408601612f52565b9150612fab60608601612f35565b905092959194509250565b600060208284031215612fc857600080fd5b5035919050565b60008083601f840112612fe157600080fd5b50813567ffffffffffffffff811115612ff957600080fd5b6020830191508360208260051b850101111561301457600080fd5b9250929050565b6000806000806040858703121561303157600080fd5b843567ffffffffffffffff8082111561304957600080fd5b61305588838901612fcf565b9096509450602087013591508082111561306e57600080fd5b5061307b87828801612fcf565b95989497509550505050565b600080600080600060a0868803121561309f57600080fd5b6130a886612f52565b9450602086013593506130bd60408701612f35565b92506130cb60608701612f52565b91506130d960808701612f35565b90509295509295909350565b6000602082840312156130f757600080fd5b612d8582612f52565b6000806000806000806000806080898b03121561311c57600080fd5b883567ffffffffffffffff8082111561313457600080fd5b818b0191508b601f83011261314857600080fd5b81358181111561315757600080fd5b8c602082850101111561316957600080fd5b60209283019a509850908a0135908082111561318457600080fd5b6131908c838d01612fcf565b909850965060408b01359150808211156131a957600080fd5b6131b58c838d01612fcf565b909650945060608b01359150808211156131ce57600080fd5b506131db8b828c01612fcf565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161322d5761322d613205565b5060010190565b838152818360208301376000910160200190815292915050565b60005b83811015613269578181015183820152602001613251565b50506000910152565b6000815180845261328a81602086016020860161324e565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b85811015613303576001600160a01b036132f083612f52565b16875295820195908201906001016132d7565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561334057600080fd5b8260051b80836020870137939093016020019392505050565b60808152600061336c608083018a613272565b602083820381850152818983528183019050818a60051b8401018b60005b8c8110156133fa57858303601f190184528135368f9003601e190181126133b057600080fd5b8e01858101903567ffffffffffffffff8111156133cc57600080fd5b8036038213156133db57600080fd5b6133e685828461329e565b95870195945050509084019060010161338a565b5050858103604087015261340f818a8c6132c7565b9350505050828103606084015261342781858761330e565b9a9950505050505050505050565b80820180821115612c3357612c33613205565b60008261346557634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417612c3357612c33613205565b60006020828403121561349357600080fd5b81518015158114612d8557600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81810381811115612c3357612c33613205565b600082516134f481846020870161324e565b9190910192915050565b602081526000612d85602083018461327256fea2646970667358221220e9c2cd7d3704ad1155759ac4ec0c431cd1aec71a4798a8843cc6d2df67c975ee64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102be5760003560e01c80636ef8d66d1161016e578063b517b550116100cb578063e3eece261161007f578063eecdac8811610064578063eecdac881461085e578063f2fde38b1461087e578063f83213831461089e57600080fd5b8063e3eece26146107f5578063e43581b81461082557600080fd5b8063ccf2683b116100b0578063ccf2683b1461078c578063cefe0df5146107c0578063e026049c146107e057600080fd5b8063b517b55014610749578063b5f2bc471461075f57600080fd5b80639e25fc5c11610122578063a21a928011610107578063a21a928014610699578063adc0d57f146106b9578063b1c94d941461073357600080fd5b80639e25fc5c146106595780639ff9001a1461067957600080fd5b806382dc1ec41161015357806382dc1ec4146106065780638456cb59146106265780638da5cb5b1461063b57600080fd5b80636ef8d66d146105c157806380f51c12146105d657600080fd5b8063457bfa2f1161021c57806357d775f8116101d05780635ec2fa26116101b55780635ec2fa261461055457806360216b00146105745780636b2c0f55146105a157600080fd5b806357d775f81461051f5780635c975abb1461053557600080fd5b806347b16c6c1161020157806347b16c6c146104b257806352532faa146104d257806354eea796146104ff57600080fd5b8063457bfa2f1461044157806346fbf68e1461047957600080fd5b80633c29f839116102735780633d572107116102585780633d572107146103df5780633f4ba83a146103ff578063402d267d1461041457600080fd5b80633c29f839146103845780633c4a25d0146103bf57600080fd5b806317bdbae5116102a457806317bdbae5146103245780632346362414610344578063303b64421461036457600080fd5b8062a95fd7146102ca57806301e64725146102df57600080fd5b366102c557005b600080fd5b6102dd6102d8366004612f69565b6108cb565b005b3480156102eb57600080fd5b5061030f6102fa366004612fb6565b600b6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561033057600080fd5b506102dd61033f36600461301b565b610b23565b34801561035057600080fd5b506102dd61035f366004613087565b610cc1565b34801561037057600080fd5b506102dd61037f36600461301b565b610dfe565b34801561039057600080fd5b506103b161039f3660046130e5565b600c6020526000908152604090205481565b60405190815260200161031b565b3480156103cb57600080fd5b506102dd6103da3660046130e5565b610f95565b3480156103eb57600080fd5b506102dd6103fa366004612fb6565b61100a565b34801561040b57600080fd5b506102dd61109e565b34801561042057600080fd5b506103b161042f3660046130e5565b600d6020526000908152604090205481565b34801561044d57600080fd5b50600e54610461906001600160a01b031681565b6040516001600160a01b03909116815260200161031b565b34801561048557600080fd5b5061030f6104943660046130e5565b6001600160a01b031660009081526002602052604090205460ff1690565b3480156104be57600080fd5b506102dd6104cd36600461301b565b611107565b3480156104de57600080fd5b506103b16104ed3660046130e5565b60096020526000908152604090205481565b34801561050b57600080fd5b506102dd61051a366004612fb6565b61129e565b34801561052b57600080fd5b506103b160045481565b34801561054157600080fd5b50600154600160a01b900460ff1661030f565b34801561056057600080fd5b506102dd61056f36600461301b565b61132b565b34801561058057600080fd5b506103b161058f3660046130e5565b60056020526000908152604090205481565b3480156105ad57600080fd5b506102dd6105bc3660046130e5565b6114c2565b3480156105cd57600080fd5b506102dd611534565b3480156105e257600080fd5b5061030f6105f13660046130e5565b60026020526000908152604090205460ff1681565b34801561061257600080fd5b506102dd6106213660046130e5565b61153d565b34801561063257600080fd5b506102dd6115af565b34801561064757600080fd5b506001546001600160a01b0316610461565b34801561066557600080fd5b506102dd610674366004612fb6565b611616565b34801561068557600080fd5b506102dd6106943660046130e5565b61168b565b3480156106a557600080fd5b506102dd6106b4366004613100565b611716565b3480156106c557600080fd5b506107086106d4366004612fb6565b60086020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b03958616815294909316602085015291830152606082015260800161031b565b34801561073f57600080fd5b506103b1600a5481565b34801561075557600080fd5b506103b1600f5481565b34801561076b57600080fd5b506103b161077a3660046130e5565b60066020526000908152604090205481565b34801561079857600080fd5b506104617f000000000000000000000000000000000000000000000000000000000000000081565b3480156107cc57600080fd5b506102dd6107db366004612fb6565b611ad2565b3480156107ec57600080fd5b506102dd611b2f565b34801561080157600080fd5b5061030f6108103660046130e5565b60036020526000908152604090205460ff1681565b34801561083157600080fd5b5061030f6108403660046130e5565b6001600160a01b031660009081526003602052604090205460ff1690565b34801561086a57600080fd5b506102dd6108793660046130e5565b611b38565b34801561088a57600080fd5b506102dd6108993660046130e5565b611baa565b3480156108aa57600080fd5b506103b16108b93660046130e5565b60076020526000908152604090205481565b6002600054036109225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055600154600160a01b900460ff16156109745760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b8334146109c35760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206d69736d6174636800000000000000000000000000000000006044820152606401610919565b600e546001600160a01b0316610a1b5760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610919565b600e54600090610a37906001600160a01b031686868686611c98565b9050600e60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a8957600080fd5b505af1158015610a9d573d6000803e3d6000fd5b5050600e54604080518681523360208201526001600160a01b0392831691810191909152606081018a905267ffffffffffffffff8916608082015290871660a08201527f15d2eeefbe4963b5b2178f239ddcc730dda55f1c23c22efb79ded0eb854ac789935060c0019150610b0f9050565b60405180910390a150506001600055505050565b3360009081526003602052604090205460ff16610b7b5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b828114610bbc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba57828282818110610bd957610bd96131ef565b9050602002013560096000878785818110610bf657610bf66131ef565b9050602002016020810190610c0b91906130e5565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610c5857610c586131ef565b9050602002016020810190610c6d91906130e5565b848484818110610c7f57610c7f6131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610cb28161321b565b915050610bbf565b5050505050565b600260005403610d135760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610919565b6002600055600154600160a01b900460ff1615610d655760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b6000610d748686868686611c98565b9050610d8b6001600160a01b038716333088611e8e565b604080518281523360208201526001600160a01b03888116828401526060820188905267ffffffffffffffff87166080830152851660a082015290517f15d2eeefbe4963b5b2178f239ddcc730dda55f1c23c22efb79ded0eb854ac7899181900360c00190a15050600160005550505050565b3360009081526003602052604090205460ff16610e565760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b828114610e975760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba57828282818110610eb457610eb46131ef565b90506020020135600d6000878785818110610ed157610ed16131ef565b9050602002016020810190610ee691906130e5565b6001600160a01b031681526020810191909152604001600020557f0e5d348f9737ccc8b4cf0eea0ccf3670af071af8bea5d64664f10e700c08de72858583818110610f3357610f336131ef565b9050602002016020810190610f4891906130e5565b848484818110610f5a57610f5a6131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610f8d8161321b565b915050610e9a565b33610fa86001546001600160a01b031690565b6001600160a01b031614610ffe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781611f2c565b50565b3360009081526003602052604090205460ff166110625760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b600a8190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526002602052604090205460ff166110fd5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610919565b611105611fe9565b565b3360009081526003602052604090205460ff1661115f5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b8281146111a05760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba578282828181106111bd576111bd6131ef565b90506020020135600660008787858181106111da576111da6131ef565b90506020020160208101906111ef91906130e5565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061123c5761123c6131ef565b905060200201602081019061125191906130e5565b848484818110611263576112636131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806112968161321b565b9150506111a3565b3360009081526003602052604090205460ff166112f65760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b60048190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001611093565b3360009081526003602052604090205460ff166113835760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b8281146113c45760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610919565b60005b83811015610cba578282828181106113e1576113e16131ef565b90506020020135600c60008787858181106113fe576113fe6131ef565b905060200201602081019061141391906130e5565b6001600160a01b031681526020810191909152604001600020557f0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba6858583818110611460576114606131ef565b905060200201602081019061147591906130e5565b848484818110611487576114876131ef565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806114ba8161321b565b9150506113c7565b336114d56001546001600160a01b031690565b6001600160a01b03161461152b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b6110078161208f565b6111053361208f565b336115506001546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781612148565b3360009081526002602052604090205460ff1661160e5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610919565b611105612205565b600154600160a01b900460ff16156116635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b600061166e8261228d565b9050611687816000015182602001518360400151612452565b5050565b3361169e6001546001600160a01b031690565b6001600160a01b0316146116f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff16156117635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b600046306040516020016117b992919091825260601b6bffffffffffffffffffffffff191660208201527f57697468647261770000000000000000000000000000000000000000000000006034820152603c0190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161181593929190613234565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b815260040161184c9796959493929190613359565b60006040518083038186803b15801561186457600080fd5b505afa158015611878573d6000803e3d6000fd5b5050505060006118bd8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061258492505050565b6020818101518251604080850151606080870151608088015160a0890151855197841b6bffffffffffffffffffffffff19908116898b015296841b871660348901526048880194909452911b909316606885015260c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff1916607c8401526084808401929092528051808403909201825260a490920182528051908301206000818152600b9093529120549192509060ff16156119a85760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610919565b6000818152600b602052604090819020805460ff191660011790558251908301516119d391906126e0565b81516001600160a01b031660009081526009602052604090205480158015906119ff5750808360400151115b15611a2157611a1c828460200151856000015186604001516127fe565b611a38565b611a38836020015184600001518560400151612452565b602080840151845160408087015160808089015160a0808b01516060808d015187518d81526001600160a01b039a8b169b81019b909b52978916968a01969096529488019390935267ffffffffffffffff16908601528401521660c08201527f296a629c5265cb4e5319803d016902eb70a9079b89655fe2b7737821ed88beeb9060e00160405180910390a1505050505050505050505050565b3360009081526003602052604090205460ff16611b2a5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610919565b600f55565b61110533612911565b33611b4b6001546001600160a01b031690565b6001600160a01b031614611ba15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b61100781612911565b33611bbd6001546001600160a01b031690565b6001600160a01b031614611c135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610919565b6001600160a01b038116611c8f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610919565b611007816129ca565b6001600160a01b0385166000908152600c60205260408120548511611cff5760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606401610919565b6001600160a01b0386166000908152600d60205260409020541580611d3c57506001600160a01b0386166000908152600d60205260409020548511155b611d885760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610919565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288811b821660348401526048830188905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c088811b821660688601529187901b909216607084015284811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152600b90935291205490915060ff1615611e6a5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610919565b6000818152600b60205260409020805460ff19166001179055905095945050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611f269085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a1c565b50505050565b6001600160a01b03811660009081526003602052604090205460ff1615611f955760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610919565b6001600160a01b038116600081815260036020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101611093565b600154600160a01b900460ff166120425760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610919565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526002602052604090205460ff166120f75760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610919565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101611093565b6001600160a01b03811660009081526002602052604090205460ff16156121b15760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610919565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101611093565b600154600160a01b900460ff16156122525760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610919565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120723390565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260086020908152604091829020825160808101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003909101546060820181905261234c5760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610919565b600a54816060015161235e9190613435565b42116123ac5760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610919565b600083815260086020908152604080832080546001600160a01b03199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d44269361244493889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b600e546001600160a01b039081169083160361256b57600e54604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156124ae57600080fd5b505af11580156124c2573d6000803e3d6000fd5b5050600f54604051600093506001600160a01b0387169250849084818181858888f193505050503d8060008114612515576040519150601f19603f3d011682016040523d82523d6000602084013e61251a565b606091505b5050905080611f265760405162461bcd60e51b815260206004820152601b60248201527f6661696c656420746f2073656e64206e617469766520746f6b656e00000000006044820152606401610919565b61257f6001600160a01b0383168483612b01565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156126d8576125e283612b31565b909250905081600103612610576126006125fb84612b6b565b612c28565b6001600160a01b031684526125cb565b81600203612637576126246125fb84612b6b565b6001600160a01b031660208501526125cb565b8160030361265a5761265061264b84612b6b565b612c39565b60408501526125cb565b816004036126815761266e6125fb84612b6b565b6001600160a01b031660608501526125cb565b816005036126a65761269283612c70565b67ffffffffffffffff1660808501526125cb565b816006036126c9576126bf6126ba84612b6b565b612ceb565b60a08501526125cb565b6126d38382612d03565b6125cb565b505050919050565b6004546000036126ee575050565b6001600160a01b0382166000908152600660205260408120549081900361271457505050565b6001600160a01b0383166000908152600560205260408120546004549091429161273e8184613448565b612748919061346a565b6001600160a01b03871660009081526007602052604090205490915081111561277357849250612780565b61277d8584613435565b92505b838311156127d05760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610919565b506001600160a01b039094166000908152600560209081526040808320939093556007905220929092555050565b6000848152600860205260409020600301541561285d5760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610919565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600890935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906129039086815260200190565b60405180910390a150505050565b6001600160a01b03811660009081526003602052604090205460ff166129795760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610919565b6001600160a01b038116600081815260036020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101611093565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612a71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d739092919063ffffffff16565b80519091501561257f5780806020019051810190612a8f9190613481565b61257f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610919565b6040516001600160a01b03831660248201526044810182905261257f90849063a9059cbb60e01b90606401611ec2565b6000806000612b3f84612c70565b9050612b4c600882613448565b9250806007166005811115612b6357612b636134a3565b915050915091565b60606000612b7883612c70565b90506000818460000151612b8c9190613435565b9050836020015151811115612ba057600080fd5b8167ffffffffffffffff811115612bb957612bb96134b9565b6040519080825280601f01601f191660200182016040528015612be3576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015612c1d578181015183820152612c16602082613435565b9050612bfb565b505050935250919050565b6000612c3382612d8c565b92915050565b6000602082511115612c4a57600080fd5b6020820151905081516020612c5f91906134cf565b612c6a90600861346a565b1c919050565b602080820151825181019091015160009182805b600a8110156102c55783811a9150612c9d81600761346a565b82607f16901b8517945081608016600003612cd957612cbd816001613435565b86518790612ccc908390613435565b9052509395945050505050565b80612ce38161321b565b915050612c84565b60008151602014612cfb57600080fd5b506020015190565b6000816005811115612d1757612d176134a3565b03612d255761257f82612c70565b6002816005811115612d3957612d396134a3565b036102c5576000612d4983612c70565b90508083600001818151612d5d9190613435565b9052506020830151518351111561257f57600080fd5b6060612d828484600085612db4565b90505b9392505050565b60008151601414612d9c57600080fd5b50602001516c01000000000000000000000000900490565b606082471015612e2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610919565b6001600160a01b0385163b612e835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610919565b600080866001600160a01b03168587604051612e9f91906134e2565b60006040518083038185875af1925050503d8060008114612edc576040519150601f19603f3d011682016040523d82523d6000602084013e612ee1565b606091505b5091509150612ef1828286612efc565b979650505050505050565b60608315612f0b575081612d85565b825115612f1b5782518084602001fd5b8160405162461bcd60e51b815260040161091991906134fe565b803567ffffffffffffffff81168114612f4d57600080fd5b919050565b80356001600160a01b0381168114612f4d57600080fd5b60008060008060808587031215612f7f57600080fd5b84359350612f8f60208601612f35565b9250612f9d60408601612f52565b9150612fab60608601612f35565b905092959194509250565b600060208284031215612fc857600080fd5b5035919050565b60008083601f840112612fe157600080fd5b50813567ffffffffffffffff811115612ff957600080fd5b6020830191508360208260051b850101111561301457600080fd5b9250929050565b6000806000806040858703121561303157600080fd5b843567ffffffffffffffff8082111561304957600080fd5b61305588838901612fcf565b9096509450602087013591508082111561306e57600080fd5b5061307b87828801612fcf565b95989497509550505050565b600080600080600060a0868803121561309f57600080fd5b6130a886612f52565b9450602086013593506130bd60408701612f35565b92506130cb60608701612f52565b91506130d960808701612f35565b90509295509295909350565b6000602082840312156130f757600080fd5b612d8582612f52565b6000806000806000806000806080898b03121561311c57600080fd5b883567ffffffffffffffff8082111561313457600080fd5b818b0191508b601f83011261314857600080fd5b81358181111561315757600080fd5b8c602082850101111561316957600080fd5b60209283019a509850908a0135908082111561318457600080fd5b6131908c838d01612fcf565b909850965060408b01359150808211156131a957600080fd5b6131b58c838d01612fcf565b909650945060608b01359150808211156131ce57600080fd5b506131db8b828c01612fcf565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161322d5761322d613205565b5060010190565b838152818360208301376000910160200190815292915050565b60005b83811015613269578181015183820152602001613251565b50506000910152565b6000815180845261328a81602086016020860161324e565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b85811015613303576001600160a01b036132f083612f52565b16875295820195908201906001016132d7565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561334057600080fd5b8260051b80836020870137939093016020019392505050565b60808152600061336c608083018a613272565b602083820381850152818983528183019050818a60051b8401018b60005b8c8110156133fa57858303601f190184528135368f9003601e190181126133b057600080fd5b8e01858101903567ffffffffffffffff8111156133cc57600080fd5b8036038213156133db57600080fd5b6133e685828461329e565b95870195945050509084019060010161338a565b5050858103604087015261340f818a8c6132c7565b9350505050828103606084015261342781858761330e565b9a9950505050505050505050565b80820180821115612c3357612c33613205565b60008261346557634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417612c3357612c33613205565b60006020828403121561349357600080fd5b81518015158114612d8557600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81810381811115612c3357612c33613205565b600082516134f481846020870161324e565b9190910192915050565b602081526000612d85602083018461327256fea2646970667358221220e9c2cd7d3704ad1155759ac4ec0c431cd1aec71a4798a8843cc6d2df67c975ee64736f6c63430008110033",
  "devdoc": {
    "details": "Work together with PeggedTokenBridge contracts deployed at remote chains",
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,uint64,address,uint64)": {
        "params": {
          "_amount": "The amount to deposit.",
          "_mintAccount": "The destination account to receive the minted pegged tokens.",
          "_mintChainId": "The destination chain ID to mint tokens.",
          "_nonce": "A number input to guarantee unique depositId. Can be timestamp in practice.",
          "_token": "The original token address."
        }
      },
      "depositNative(uint256,uint64,address,uint64)": {
        "params": {
          "_amount": "The amount to deposit.",
          "_mintAccount": "The destination account to receive the minted pegged tokens.",
          "_mintChainId": "The destination chain ID to mint tokens.",
          "_nonce": "A number input to guarantee unique depositId. Can be timestamp in practice."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_powers": "The signing powers of the signers.",
          "_request": "The serialized Withdraw protobuf.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the bridge's current signing power to be delivered."
        }
      }
    },
    "title": "the vault to deposit and withdraw original tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,uint256,uint64,address,uint64)": {
        "notice": "Lock original tokens to trigger cross-chain mint of pegged tokens at a remote chain's PeggedTokenBridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens."
      },
      "depositNative(uint256,uint64,address,uint64)": {
        "notice": "Lock native token as original token to trigger cross-chain mint of pegged tokens at a remote chain's PeggedTokenBridge."
      },
      "withdraw(bytes,bytes[],address[],uint256[])": {
        "notice": "Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1346,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 35256,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1261,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 35370,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "pausers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35129,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "governors",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35517,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "epochLength",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 35521,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "epochVolumes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35525,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "epochVolumeCaps",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35529,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "lastOpTimestamps",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34930,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "delayedTransfers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(delayedTransfer)34925_storage)"
      },
      {
        "astId": 34934,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "delayThresholds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34936,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "delayPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 27552,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "records",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 27556,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "minDeposit",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27560,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "maxDeposit",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27562,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 27565,
        "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
        "label": "nativeTokenTransferGas",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(delayedTransfer)34925_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DelayedTransfer.delayedTransfer)",
        "numberOfBytes": "32",
        "value": "t_struct(delayedTransfer)34925_storage"
      },
      "t_struct(delayedTransfer)34925_storage": {
        "encoding": "inplace",
        "label": "struct DelayedTransfer.delayedTransfer",
        "members": [
          {
            "astId": 34918,
            "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 34920,
            "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 34922,
            "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34924,
            "contract": "contracts/pegged-bridge/OriginalTokenVault.sol:OriginalTokenVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}