{
  "address": "0xce57C4e58D11733dc121B2b449a35445f90FC9E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "_sigsVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "burnId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAccount",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "DelayPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DelayedTransferAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelayedTransferExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "EpochLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "EpochVolumeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaxBurnUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinBurnUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "refChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "refId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawAccount",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "delayedTransfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumeCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "executeDelayedTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "governors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastOpTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_request",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setDelayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setDelayThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochVolumeCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigsVerifier",
      "outputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07dde32749d74e230726719e4e8331bc69c0557f8370ab85a87758bfe9f2cdb3",
  "receipt": {
    "to": null,
    "from": "0x46eE49e5688082C6F0f18f2504b5FcC1bd5244c0",
    "contractAddress": "0xce57C4e58D11733dc121B2b449a35445f90FC9E2",
    "transactionIndex": 38,
    "gasUsed": "2483879",
    "logsBloom": "0x
    "blockHash": "0x8ba8751fab27ec81a5c9539822c75454c9b63da6465dc0879f55da10b8906247",
    "transactionHash": "0x07dde32749d74e230726719e4e8331bc69c0557f8370ab85a87758bfe9f2cdb3",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 66675494,
        "transactionHash": "0x07dde32749d74e230726719e4e8331bc69c0557f8370ab85a87758bfe9f2cdb3",
        "address": "0xce57C4e58D11733dc121B2b449a35445f90FC9E2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x8ba8751fab27ec81a5c9539822c75454c9b63da6465dc0879f55da10b8906247"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 66675494,
        "transactionHash": "0x07dde32749d74e230726719e4e8331bc69c0557f8370ab85a87758bfe9f2cdb3",
        "address": "0xce57C4e58D11733dc121B2b449a35445f90FC9E2",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0",
        "logIndex": 106,
        "blockHash": "0x8ba8751fab27ec81a5c9539822c75454c9b63da6465dc0879f55da10b8906247"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 66675494,
        "transactionHash": "0x07dde32749d74e230726719e4e8331bc69c0557f8370ab85a87758bfe9f2cdb3",
        "address": "0xce57C4e58D11733dc121B2b449a35445f90FC9E2",
        "topics": [
          "0xdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5"
        ],
        "data": "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0",
        "logIndex": 107,
        "blockHash": "0x8ba8751fab27ec81a5c9539822c75454c9b63da6465dc0879f55da10b8906247"
      }
    ],
    "blockNumber": 66675494,
    "cumulativeGasUsed": "6535085",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91830A8f5f20ef56804Ce2E7b2d727aD89Cb995f"
  ],
  "numDeployments": 1,
  "solcInputHash": "599f975210cdab3113358d43cb6a3e35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"_sigsVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"burnId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAccount\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DelayPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DelayedTransferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelayedTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"EpochLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"EpochVolumeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBurnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinBurnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"refChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delayedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumeCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"executeDelayedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOpTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_request\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setDelayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setDelayThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"setEpochVolumeCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMaxBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigsVerifier\",\"outputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Work together with OriginalTokenVault deployed at remote chains.\",\"kind\":\"dev\",\"methods\":{\"burn(address,uint256,address,uint64)\":{\"params\":{\"_amount\":\"The amount to burn.\",\"_nonce\":\"A number to guarantee unique depositId. Can be timestamp in practice.\",\"_token\":\"The pegged token address.\",\"_withdrawAccount\":\"The account to receive the original tokens withdrawn on the remote chain.\"}},\"mint(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_powers\":\"The signing powers of the signers.\",\"_request\":\"The serialized Mint protobuf.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The bridge contract to mint and burn pegged tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256,address,uint64)\":{\"notice\":\"Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's OriginalTokenVault. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\"},\"mint(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegged-bridge/PeggedTokenBridge.sol\":\"PeggedTokenBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IPeggedToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IPeggedToken {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb27e9c92ec14f8a8f904fbc362bd2965c9763cec7752f3f1f70e7bade359eb0a\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ISigsVerifier {\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\r\\n     * @param _signers sorted list of current signers\\r\\n     * @param _powers powers of current signers\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x64957c1004af8c9a8fe54ad5fdba6e8af24a75f92bf77e7eefe71b1f39926f4c\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// runtime proto sol library\\r\\nlibrary Pb {\\r\\n    enum WireType {\\r\\n        Varint,\\r\\n        Fixed64,\\r\\n        LengthDelim,\\r\\n        StartGroup,\\r\\n        EndGroup,\\r\\n        Fixed32\\r\\n    }\\r\\n\\r\\n    struct Buffer {\\r\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\r\\n        bytes b; // hold serialized proto msg, readonly\\r\\n    }\\r\\n\\r\\n    // create a new in-memory Buffer object from raw msg bytes\\r\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\r\\n        buf.b = raw;\\r\\n        buf.idx = 0;\\r\\n    }\\r\\n\\r\\n    // whether there are unread bytes\\r\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\r\\n        return buf.idx < buf.b.length;\\r\\n    }\\r\\n\\r\\n    // decode current field number and wiretype\\r\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\r\\n        uint256 v = decVarint(buf);\\r\\n        tag = v / 8;\\r\\n        wiretype = WireType(v & 7);\\r\\n    }\\r\\n\\r\\n    // count tag occurrences, return an array due to no memory map support\\r\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\r\\n    // should keep buf.idx unchanged because this is only a count function\\r\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\r\\n        uint256 originalIdx = buf.idx;\\r\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\r\\n        uint256 tag;\\r\\n        WireType wire;\\r\\n        while (hasMore(buf)) {\\r\\n            (tag, wire) = decKey(buf);\\r\\n            cnts[tag] += 1;\\r\\n            skipValue(buf, wire);\\r\\n        }\\r\\n        buf.idx = originalIdx;\\r\\n    }\\r\\n\\r\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\r\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\r\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\r\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\r\\n        v = buf.idx; // use v to save one additional uint variable\\r\\n        assembly {\\r\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\r\\n        }\\r\\n        uint256 b; // store current byte content\\r\\n        v = 0; // reset to 0 for return value\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            assembly {\\r\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\r\\n            }\\r\\n            v |= (b & 0x7F) << (i * 7);\\r\\n            if (b & 0x80 == 0) {\\r\\n                buf.idx += i + 1;\\r\\n                return v;\\r\\n            }\\r\\n        }\\r\\n        revert(); // i=10, invalid varint stream\\r\\n    }\\r\\n\\r\\n    // read length delimited field and return bytes\\r\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        b = new bytes(len);\\r\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\r\\n        uint256 bStart;\\r\\n        uint256 bufBStart = buf.idx;\\r\\n        assembly {\\r\\n            bStart := add(b, 32)\\r\\n            bufBStart := add(add(bufB, 32), bufBStart)\\r\\n        }\\r\\n        for (uint256 i = 0; i < len; i += 32) {\\r\\n            assembly {\\r\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\r\\n            }\\r\\n        }\\r\\n        buf.idx = end;\\r\\n    }\\r\\n\\r\\n    // return packed ints\\r\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        // array in memory must be init w/ known length\\r\\n        // so we have to create a tmp array w/ max possible len first\\r\\n        uint256[] memory tmp = new uint256[](len);\\r\\n        uint256 i = 0; // count how many ints are there\\r\\n        while (buf.idx < end) {\\r\\n            tmp[i] = decVarint(buf);\\r\\n            i++;\\r\\n        }\\r\\n        t = new uint256[](i); // init t with correct length\\r\\n        for (uint256 j = 0; j < i; j++) {\\r\\n            t[j] = tmp[j];\\r\\n        }\\r\\n        return t;\\r\\n    }\\r\\n\\r\\n    // move idx pass current value field, to beginning of next tag or msg end\\r\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\r\\n        if (wire == WireType.Varint) {\\r\\n            decVarint(buf);\\r\\n        } else if (wire == WireType.LengthDelim) {\\r\\n            uint256 len = decVarint(buf);\\r\\n            buf.idx += len; // skip len bytes value data\\r\\n            require(buf.idx <= buf.b.length); // avoid overflow\\r\\n        } else {\\r\\n            revert();\\r\\n        } // unsupported wiretype\\r\\n    }\\r\\n\\r\\n    // type conversion help utils\\r\\n    function _bool(uint256 x) internal pure returns (bool v) {\\r\\n        return x != 0;\\r\\n    }\\r\\n\\r\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\r\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        } // load all 32bytes to v\\r\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\r\\n    }\\r\\n\\r\\n    function _address(bytes memory b) internal pure returns (address v) {\\r\\n        v = _addressPayable(b);\\r\\n    }\\r\\n\\r\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\r\\n        require(b.length == 20);\\r\\n        //load 32bytes then shift right 12 bytes\\r\\n        assembly {\\r\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\r\\n        require(b.length == 32);\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // uint[] to uint8[]\\r\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\r\\n        t = new uint8[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint8(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\r\\n        t = new uint32[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint32(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\r\\n        t = new uint64[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint64(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\r\\n        t = new bool[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = arr[i] != 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x870ea11c2e01e1af41a0e2b4d78312d7fb3396810476ea16f9b6b0292ed29e78\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPegged.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\r\\n// source: contracts/libraries/proto/pegged.proto\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"./Pb.sol\\\";\\r\\n\\r\\nlibrary PbPegged {\\r\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\r\\n\\r\\n    struct Mint {\\r\\n        address token; // tag: 1\\r\\n        address account; // tag: 2\\r\\n        uint256 amount; // tag: 3\\r\\n        address depositor; // tag: 4\\r\\n        uint64 refChainId; // tag: 5\\r\\n        bytes32 refId; // tag: 6\\r\\n    } // end struct Mint\\r\\n\\r\\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.token = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.account = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 3) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else if (tag == 4) {\\r\\n                m.depositor = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 5) {\\r\\n                m.refChainId = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.refId = Pb._bytes32(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Mint\\r\\n\\r\\n    struct Withdraw {\\r\\n        address token; // tag: 1\\r\\n        address receiver; // tag: 2\\r\\n        uint256 amount; // tag: 3\\r\\n        address burnAccount; // tag: 4\\r\\n        uint64 refChainId; // tag: 5\\r\\n        bytes32 refId; // tag: 6\\r\\n    } // end struct Withdraw\\r\\n\\r\\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.token = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.receiver = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 3) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else if (tag == 4) {\\r\\n                m.burnAccount = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 5) {\\r\\n                m.refChainId = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.refId = Pb._bytes32(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Withdraw\\r\\n}\\r\\n\",\"keccak256\":\"0x33902b5f3f1cbacf9b76cef5f773d608b3641344677848cef7a50ddf34be54f5\",\"license\":\"GPL-3.0-only\"},\"contracts/pegged-bridge/PeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\r\\nimport \\\"../interfaces/IPeggedToken.sol\\\";\\r\\nimport \\\"../libraries/PbPegged.sol\\\";\\r\\nimport \\\"../safeguard/Pauser.sol\\\";\\r\\nimport \\\"../safeguard/VolumeControl.sol\\\";\\r\\nimport \\\"../safeguard/DelayedTransfer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title The bridge contract to mint and burn pegged tokens\\r\\n * @dev Work together with OriginalTokenVault deployed at remote chains.\\r\\n */\\r\\ncontract PeggedTokenBridge is Pauser, VolumeControl, DelayedTransfer {\\r\\n    ISigsVerifier public immutable sigsVerifier;\\r\\n\\r\\n    mapping(bytes32 => bool) public records;\\r\\n\\r\\n    mapping(address => uint256) public minBurn;\\r\\n    mapping(address => uint256) public maxBurn;\\r\\n\\r\\n    event Mint(\\r\\n        bytes32 mintId,\\r\\n        address token,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        // ref_chain_id defines the reference chain ID, taking values of:\\r\\n        // 1. The common case: the chain ID on which the remote corresponding deposit or burn happened;\\r\\n        // 2. Refund for wrong burn: this chain ID on which the burn happened\\r\\n        uint64 refChainId,\\r\\n        // ref_id defines a unique reference ID, taking values of:\\r\\n        // 1. The common case of deposit/burn-mint: the deposit or burn ID on the remote chain;\\r\\n        // 2. Refund for wrong burn: the burn ID on this chain\\r\\n        bytes32 refId,\\r\\n        address depositor\\r\\n    );\\r\\n    event Burn(bytes32 burnId, address token, address account, uint256 amount, address withdrawAccount);\\r\\n    event MinBurnUpdated(address token, uint256 amount);\\r\\n    event MaxBurnUpdated(address token, uint256 amount);\\r\\n\\r\\n    constructor(ISigsVerifier _sigsVerifier) {\\r\\n        sigsVerifier = _sigsVerifier;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\r\\n     * @param _request The serialized Mint protobuf.\\r\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\r\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\r\\n     * @param _signers The sorted list of signers.\\r\\n     * @param _powers The signing powers of the signers.\\r\\n     */\\r\\n    function mint(\\r\\n        bytes calldata _request,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external whenNotPaused {\\r\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Mint\\\"));\\r\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _request), _sigs, _signers, _powers);\\r\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\r\\n        bytes32 mintId = keccak256(\\r\\n            // len = 20 + 20 + 32 + 20 + 8 + 32 = 132\\r\\n            abi.encodePacked(\\r\\n                request.account,\\r\\n                request.token,\\r\\n                request.amount,\\r\\n                request.depositor,\\r\\n                request.refChainId,\\r\\n                request.refId\\r\\n            )\\r\\n        );\\r\\n        require(records[mintId] == false, \\\"record exists\\\");\\r\\n        records[mintId] = true;\\r\\n        _updateVolume(request.token, request.amount);\\r\\n        uint256 delayThreshold = delayThresholds[request.token];\\r\\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\\r\\n            _addDelayedTransfer(mintId, request.account, request.token, request.amount);\\r\\n        } else {\\r\\n            IPeggedToken(request.token).mint(request.account, request.amount);\\r\\n        }\\r\\n        emit Mint(\\r\\n            mintId,\\r\\n            request.token,\\r\\n            request.account,\\r\\n            request.amount,\\r\\n            request.refChainId,\\r\\n            request.refId,\\r\\n            request.depositor\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\r\\n     * OriginalTokenVault.\\r\\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\\r\\n     * @param _token The pegged token address.\\r\\n     * @param _amount The amount to burn.\\r\\n     * @param _withdrawAccount The account to receive the original tokens withdrawn on the remote chain.\\r\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\r\\n     */\\r\\n    function burn(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        address _withdrawAccount,\\r\\n        uint64 _nonce\\r\\n    ) external whenNotPaused {\\r\\n        require(_amount > minBurn[_token], \\\"amount too small\\\");\\r\\n        require(maxBurn[_token] == 0 || _amount <= maxBurn[_token], \\\"amount too large\\\");\\r\\n        bytes32 burnId = keccak256(\\r\\n            // len = 20 + 20 + 32 + 20 + 8 + 8 = 108\\r\\n            abi.encodePacked(msg.sender, _token, _amount, _withdrawAccount, _nonce, uint64(block.chainid))\\r\\n        );\\r\\n        require(records[burnId] == false, \\\"record exists\\\");\\r\\n        records[burnId] = true;\\r\\n        IPeggedToken(_token).burn(msg.sender, _amount);\\r\\n        emit Burn(burnId, _token, msg.sender, _amount, _withdrawAccount);\\r\\n    }\\r\\n\\r\\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\\r\\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\\r\\n        IPeggedToken(transfer.token).mint(transfer.receiver, transfer.amount);\\r\\n    }\\r\\n\\r\\n    function setMinBurn(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\r\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            minBurn[_tokens[i]] = _amounts[i];\\r\\n            emit MinBurnUpdated(_tokens[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMaxBurn(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\r\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            maxBurn[_tokens[i]] = _amounts[i];\\r\\n            emit MaxBurnUpdated(_tokens[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13a0bed1917a7001fc2b6c5d8a234e10aca657cb465cc0a3973f266c471f7fa0\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/DelayedTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Governor.sol\\\";\\r\\n\\r\\nabstract contract DelayedTransfer is Governor {\\r\\n    struct delayedTransfer {\\r\\n        address receiver;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\\r\\n    mapping(address => uint256) public delayThresholds;\\r\\n    uint256 public delayPeriod; // in seconds\\r\\n\\r\\n    event DelayedTransferAdded(bytes32 id);\\r\\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\\r\\n\\r\\n    event DelayPeriodUpdated(uint256 period);\\r\\n    event DelayThresholdUpdated(address token, uint256 threshold);\\r\\n\\r\\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\\r\\n        require(_tokens.length == _thresholds.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            delayThresholds[_tokens[i]] = _thresholds[i];\\r\\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\\r\\n        delayPeriod = _period;\\r\\n        emit DelayPeriodUpdated(_period);\\r\\n    }\\r\\n\\r\\n    function _addDelayedTransfer(\\r\\n        bytes32 id,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(delayedTransfers[id].timestamp == 0, \\\"delayed transfer already exists\\\");\\r\\n        delayedTransfers[id] = delayedTransfer({\\r\\n            receiver: receiver,\\r\\n            token: token,\\r\\n            amount: amount,\\r\\n            timestamp: block.timestamp\\r\\n        });\\r\\n        emit DelayedTransferAdded(id);\\r\\n    }\\r\\n\\r\\n    // caller needs to do the actual token transfer\\r\\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\\r\\n        delayedTransfer memory transfer = delayedTransfers[id];\\r\\n        require(transfer.timestamp > 0, \\\"delayed transfer not exist\\\");\\r\\n        require(block.timestamp > transfer.timestamp + delayPeriod, \\\"delayed transfer still locked\\\");\\r\\n        delete delayedTransfers[id];\\r\\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\\r\\n        return transfer;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7cc494de26a3e74f4a735890d74827f161a928d47b2f495cc93f960733b9b8a5\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Governor is Ownable {\\r\\n    mapping(address => bool) public governors;\\r\\n\\r\\n    event GovernorAdded(address account);\\r\\n    event GovernorRemoved(address account);\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(msg.sender), \\\"Caller is not governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _addGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    function isGovernor(address _account) public view returns (bool) {\\r\\n        return governors[_account];\\r\\n    }\\r\\n\\r\\n    function addGovernor(address _account) public onlyOwner {\\r\\n        _addGovernor(_account);\\r\\n    }\\r\\n\\r\\n    function removeGovernor(address _account) public onlyOwner {\\r\\n        _removeGovernor(_account);\\r\\n    }\\r\\n\\r\\n    function renounceGovernor() public {\\r\\n        _removeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addGovernor(address _account) private {\\r\\n        require(!isGovernor(_account), \\\"Account is already governor\\\");\\r\\n        governors[_account] = true;\\r\\n        emit GovernorAdded(_account);\\r\\n    }\\r\\n\\r\\n    function _removeGovernor(address _account) private {\\r\\n        require(isGovernor(_account), \\\"Account is not governor\\\");\\r\\n        governors[_account] = false;\\r\\n        emit GovernorRemoved(_account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45cdf5fcf1d09b1ce6fae2c9dbb4838a6daedbd3d6d81c2e798bb0af3be4985c\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n *\\r\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\r\\n * renounceOwnership. So we can support Proxy based upgradable contract\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\r\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\r\\n     * because constructor sets _owner in contract state.\\r\\n     */\\r\\n    function initOwner() internal {\\r\\n        require(_owner == address(0), \\\"owner already set\\\");\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa85eba884c4b3be9bada2125c59907854d553c63f6610a82eb595bd207f42c3\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Pauser is Ownable, Pausable {\\r\\n    mapping(address => bool) public pausers;\\r\\n\\r\\n    event PauserAdded(address account);\\r\\n    event PauserRemoved(address account);\\r\\n\\r\\n    constructor() {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() public onlyPauser {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyPauser {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return pausers[account];\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyOwner {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function removePauser(address account) public onlyOwner {\\r\\n        _removePauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) private {\\r\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\r\\n        pausers[account] = true;\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) private {\\r\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\r\\n        pausers[account] = false;\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e5dd7a6577d4d1e2cca7f4917472c6b12470672dba0a3592eb8ef0c2d0ab044\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/VolumeControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Governor.sol\\\";\\r\\n\\r\\nabstract contract VolumeControl is Governor {\\r\\n    uint256 public epochLength; // seconds\\r\\n    mapping(address => uint256) public epochVolumes; // key is token\\r\\n    mapping(address => uint256) public epochVolumeCaps; // key is token\\r\\n    mapping(address => uint256) public lastOpTimestamps; // key is token\\r\\n\\r\\n    event EpochLengthUpdated(uint256 length);\\r\\n    event EpochVolumeUpdated(address token, uint256 cap);\\r\\n\\r\\n    function setEpochLength(uint256 _length) external onlyGovernor {\\r\\n        epochLength = _length;\\r\\n        emit EpochLengthUpdated(_length);\\r\\n    }\\r\\n\\r\\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\\r\\n        require(_tokens.length == _caps.length, \\\"length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            epochVolumeCaps[_tokens[i]] = _caps[i];\\r\\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateVolume(address _token, uint256 _amount) internal {\\r\\n        if (epochLength == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 cap = epochVolumeCaps[_token];\\r\\n        if (cap == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 volume = epochVolumes[_token];\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\\r\\n        if (lastOpTimestamps[_token] < epochStartTime) {\\r\\n            volume = _amount;\\r\\n        } else {\\r\\n            volume += _amount;\\r\\n        }\\r\\n        require(volume <= cap, \\\"volume exceeds cap\\\");\\r\\n        epochVolumes[_token] = volume;\\r\\n        lastOpTimestamps[_token] = timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x67a714ffb89c547fbd17acbaedfb763a1c719f575bcbf1d713c645ef97942d5c\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002d2938038062002d2983398101604081905262000034916200024f565b6200003f3362000074565b6000805460ff60a01b191690556200005733620000c4565b62000062336200018f565b6001600160a01b031660805262000281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff1615620001335760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f891015b60405180910390a150565b6001600160a01b03811660009081526002602052604090205460ff1615620001fa5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f72000000000060448201526064016200012a565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5910162000184565b6000602082840312156200026257600080fd5b81516001600160a01b03811681146200027a57600080fd5b9392505050565b608051612a85620002a4600039600081816104fb01526113da0152612a856000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806382dc1ec411610145578063de790c7e116100bd578063eecdac881161008c578063f832138311610071578063f8321383146105ad578063f8734302146105cd578063f9a8ea08146105e057600080fd5b8063eecdac8814610587578063f2fde38b1461059a57600080fd5b8063de790c7e1461051d578063e026049c14610530578063e3eece2614610538578063e43581b81461055b57600080fd5b8063adc0d57f11610114578063b5f2bc47116100f9578063b5f2bc47146104c3578063bf4816f0146104e3578063ccf2683b146104f657600080fd5b8063adc0d57f1461044d578063b1c94d94146104ba57600080fd5b806382dc1ec4146103fa5780638456cb591461040d5780638da5cb5b146104155780639e25fc5c1461043a57600080fd5b806352532faa116101d857806360216b00116101a75780636ef8d66d1161018c5780636ef8d66d146103af5780637f856013146103b757806380f51c12146103d757600080fd5b806360216b001461037c5780636b2c0f551461039c57600080fd5b806352532faa1461032e57806354eea7961461034e57806357d775f8146103615780635c975abb1461036a57600080fd5b80633f4ba83a116102145780633f4ba83a146102b957806346fbf68e146102c157806347b16c6c146102ed578063497bf3b21461030057600080fd5b806301e647251461024657806317bdbae51461027e5780633c4a25d0146102935780633d572107146102a6575b600080fd5b610269610254366004612529565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61029161028c36600461258e565b6105f3565b005b6102916102a1366004612616565b610796565b6102916102b4366004612529565b61080b565b61029161089f565b6102696102cf366004612616565b6001600160a01b031660009081526001602052604090205460ff1690565b6102916102fb36600461258e565b610908565b61032061030e366004612616565b600c6020526000908152604090205481565b604051908152602001610275565b61032061033c366004612616565b60086020526000908152604090205481565b61029161035c366004612529565b610a9f565b61032060035481565b600054600160a01b900460ff16610269565b61032061038a366004612616565b60046020526000908152604090205481565b6102916103aa366004612616565b610b2c565b610291610b9e565b6103206103c5366004612616565b600b6020526000908152604090205481565b6102696103e5366004612616565b60016020526000908152604090205460ff1681565b610291610408366004612616565b610ba7565b610291610c19565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610275565b610291610448366004612529565b610c80565b61048f61045b366004612529565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b039586168152949093166020850152918301526060820152608001610275565b61032060095481565b6103206104d1366004612616565b60056020526000908152604090205481565b6102916104f136600461258e565b610d4d565b6104227f000000000000000000000000000000000000000000000000000000000000000081565b61029161052b366004612638565b610ee4565b6102916111cd565b610269610546366004612616565b60026020526000908152604090205460ff1681565b610269610569366004612616565b6001600160a01b031660009081526002602052604090205460ff1690565b610291610595366004612616565b6111d6565b6102916105a8366004612616565b611248565b6103206105bb366004612616565b60066020526000908152604090205481565b6102916105db366004612694565b611336565b6102916105ee36600461258e565b61173f565b3360009081526002602052604090205460ff166106505760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b8281146106915760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106106ae576106ae612783565b90506020020135600860008787858181106106cb576106cb612783565b90506020020160208101906106e09190612616565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce85858381811061072d5761072d612783565b90506020020160208101906107429190612616565b84848481811061075457610754612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610787816127af565b915050610694565b5050505050565b336107a96000546001600160a01b031690565b6001600160a01b0316146107ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b610808816118d6565b50565b3360009081526002602052604090205460ff166108635760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b60098190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526001602052604090205460ff166108fe5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610647565b610906611993565b565b3360009081526002602052604090205460ff166109605760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b8281146109a15760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106109be576109be612783565b90506020020135600560008787858181106109db576109db612783565b90506020020160208101906109f09190612616565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e89858583818110610a3d57610a3d612783565b9050602002016020810190610a529190612616565b848484818110610a6457610a64612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610a97816127af565b9150506109a4565b3360009081526002602052604090205460ff16610af75760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b60038190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001610894565b33610b3f6000546001600160a01b031690565b6001600160a01b031614610b955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611a39565b61090633611a39565b33610bba6000546001600160a01b031690565b6001600160a01b031614610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611af2565b3360009081526001602052604090205460ff16610c785760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610647565b610906611bb0565b600054600160a01b900460ff1615610ccd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6000610cd882611c38565b6020810151815160408084015190516340c10f1960e01b81526001600160a01b039283166004820152602481019190915292935016906340c10f1990604401600060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050505050565b3360009081526002602052604090205460ff16610da55760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b828114610de65760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f57828282818110610e0357610e03612783565b90506020020135600b6000878785818110610e2057610e20612783565b9050602002016020810190610e359190612616565b6001600160a01b031681526020810191909152604001600020557f3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d06683858583818110610e8257610e82612783565b9050602002016020810190610e979190612616565b848484818110610ea957610ea9612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610edc816127af565b915050610de9565b600054600160a01b900460ff1615610f315760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6001600160a01b0384166000908152600b60205260409020548311610f985760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606401610647565b6001600160a01b0384166000908152600c60205260409020541580610fd557506001600160a01b0384166000908152600c60205260409020548311155b6110215760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610647565b6040516bffffffffffffffffffffffff1933606090811b8216602084015286811b821660348401526048830186905284901b16606882015277ffffffffffffffffffffffffffffffffffffffffffffffff1960c083811b8216607c84015246901b166084820152600090608c0160408051601f1981840301815291815281516020928301206000818152600a90935291205490915060ff16156110f65760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610647565b6000818152600a602052604090819020805460ff1916600117905551632770a7eb60e21b8152336004820152602481018590526001600160a01b03861690639dc29fac90604401600060405180830381600087803b15801561115757600080fd5b505af115801561116b573d6000803e3d6000fd5b5050604080518481526001600160a01b0389811660208301523382840152606082018990528716608082015290517f75f1bf55bb1de41b63a775dc7d4500f01114ee62b688a6b11d34f4692c1f3d4393509081900360a0019150a15050505050565b61090633611e0a565b336111e96000546001600160a01b031690565b6001600160a01b03161461123f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611e0a565b3361125b6000546001600160a01b031690565b6001600160a01b0316146112b15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b6001600160a01b03811661132d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610647565b61080881611ec3565b600054600160a01b900460ff16156113835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b600046306040516020016113c092919091825260601b6bffffffffffffffffffffffff1916602082015263135a5b9d60e21b603482015260380190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161141c939291906127c8565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b8152600401611453979695949392919061292f565b60006040518083038186803b15801561146b57600080fd5b505afa15801561147f573d6000803e3d6000fd5b5050505060006114c48a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f2092505050565b6020818101518251604080850151606080870151608088015160a0890151855197841b6bffffffffffffffffffffffff19908116898b015296841b871660348901526048880194909452911b909316606885015260c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff1916607c8401526084808401929092528051808403909201825260a490920182528051908301206000818152600a9093529120549192509060ff16156115af5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610647565b6000818152600a602052604090819020805460ff191660011790558251908301516115da919061207c565b81516001600160a01b031660009081526008602052604090205480158015906116065750808360400151115b15611628576116238284602001518560000151866040015161219a565b611698565b8251602084015160408086015190516340c10f1960e01b81526001600160a01b03928316600482015260248101919091529116906340c10f1990604401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b505050505b7f5bc84ecccfced5bb04bfc7f3efcdbe7f5cd21949ef146811b4d1967fe41f777a8284600001518560200151866040015187608001518860a00151896060015160405161172997969594939291909687526001600160a01b0395861660208801529385166040870152606086019290925267ffffffffffffffff16608085015260a08401521660c082015260e00190565b60405180910390a1505050505050505050505050565b3360009081526002602052604090205460ff166117975760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b8281146117d85760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106117f5576117f5612783565b90506020020135600c600087878581811061181257611812612783565b90506020020160208101906118279190612616565b6001600160a01b031681526020810191909152604001600020557fa3181379f6db47d9037efc6b6e8e3efe8c55ddb090b4f0512c152f97c4e47da585858381811061187457611874612783565b90506020020160208101906118899190612616565b84848481811061189b5761189b612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806118ce816127af565b9150506117db565b6001600160a01b03811660009081526002602052604090205460ff161561193f5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610647565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101610894565b600054600160a01b900460ff166119ec5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610647565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526001602052604090205460ff16611aa15760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610647565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610894565b6001600160a01b03811660009081526001602052604090205460ff1615611b5b5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610647565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610894565b600054600160a01b900460ff1615611bfd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a1c3390565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260076020908152604091829020825160808101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260039091015460608201819052611cf75760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610647565b6009548160600151611d0991906129c4565b4211611d575760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610647565b6000838152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d442693611dfc93889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b6001600160a01b03811660009081526002602052604090205460ff16611e725760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610647565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101610894565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b6020830151518351101561207457611f7e836122ba565b909250905081600103611fac57611f9c611f97846122f4565b6123b1565b6001600160a01b03168452611f67565b81600203611fd357611fc0611f97846122f4565b6001600160a01b03166020850152611f67565b81600303611ff657611fec611fe7846122f4565b6123c2565b6040850152611f67565b8160040361201d5761200a611f97846122f4565b6001600160a01b03166060850152611f67565b816005036120425761202e836123f9565b67ffffffffffffffff166080850152611f67565b816006036120655761205b612056846122f4565b612474565b60a0850152611f67565b61206f838261248c565b611f67565b505050919050565b60035460000361208a575050565b6001600160a01b038216600090815260056020526040812054908190036120b057505050565b6001600160a01b038316600090815260046020526040812054600354909142916120da81846129d7565b6120e491906129f9565b6001600160a01b03871660009081526006602052604090205490915081111561210f5784925061211c565b61211985846129c4565b92505b8383111561216c5760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610647565b506001600160a01b039094166000908152600460209081526040808320939093556006905220929092555050565b600084815260076020526040902060030154156121f95760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610647565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b81526007909352918690209451855490851673ffffffffffffffffffffffffffffffffffffffff1991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906122ac9086815260200190565b60405180910390a150505050565b60008060006122c8846123f9565b90506122d56008826129d7565b92508060071660058111156122ec576122ec612a10565b915050915091565b60606000612301836123f9565b9050600081846000015161231591906129c4565b905083602001515181111561232957600080fd5b8167ffffffffffffffff81111561234257612342612a26565b6040519080825280601f01601f19166020018201604052801561236c576020820181803683370190505b50602080860151865192955091818601919083010160005b858110156123a657818101518382015261239f6020826129c4565b9050612384565b505050935250919050565b60006123bc82612501565b92915050565b60006020825111156123d357600080fd5b60208201519050815160206123e89190612a3c565b6123f39060086129f9565b1c919050565b602080820151825181019091015160009182805b600a8110156102415783811a91506124268160076129f9565b82607f16901b8517945081608016600003612462576124468160016129c4565b865187906124559083906129c4565b9052509395945050505050565b8061246c816127af565b91505061240d565b6000815160201461248457600080fd5b506020015190565b60008160058111156124a0576124a0612a10565b036124b3576124ae826123f9565b505050565b60028160058111156124c7576124c7612a10565b036102415760006124d7836123f9565b905080836000018181516124eb91906129c4565b905250602083015151835111156124ae57600080fd5b6000815160141461251157600080fd5b50602001516c01000000000000000000000000900490565b60006020828403121561253b57600080fd5b5035919050565b60008083601f84011261255457600080fd5b50813567ffffffffffffffff81111561256c57600080fd5b6020830191508360208260051b850101111561258757600080fd5b9250929050565b600080600080604085870312156125a457600080fd5b843567ffffffffffffffff808211156125bc57600080fd5b6125c888838901612542565b909650945060208701359150808211156125e157600080fd5b506125ee87828801612542565b95989497509550505050565b80356001600160a01b038116811461261157600080fd5b919050565b60006020828403121561262857600080fd5b612631826125fa565b9392505050565b6000806000806080858703121561264e57600080fd5b612657856125fa565b93506020850135925061266c604086016125fa565b9150606085013567ffffffffffffffff8116811461268957600080fd5b939692955090935050565b6000806000806000806000806080898b0312156126b057600080fd5b883567ffffffffffffffff808211156126c857600080fd5b818b0191508b601f8301126126dc57600080fd5b8135818111156126eb57600080fd5b8c60208285010111156126fd57600080fd5b60209283019a509850908a0135908082111561271857600080fd5b6127248c838d01612542565b909850965060408b013591508082111561273d57600080fd5b6127498c838d01612542565b909650945060608b013591508082111561276257600080fd5b5061276f8b828c01612542565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127c1576127c1612799565b5060010190565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156128905782840389528135601e1988360301811261284657600080fd5b8701858101903567ffffffffffffffff81111561286257600080fd5b80360382131561287157600080fd5b61287c8682846127e2565b9a87019a9550505090840190600101612825565b5091979650505050505050565b8183526000602080850194508260005b858110156128d9576001600160a01b036128c6836125fa565b16875295820195908201906001016128ad565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561291657600080fd5b8260051b80836020870137939093016020019392505050565b608081526000885180608084015260005b8181101561295d576020818c0181015160a0868401015201612940565b50600060a08285010152601f19601f8201168301905060a083820301602084015261298c60a08201898b61280b565b905082810360408401526129a181878961289d565b905082810360608401526129b68185876128e4565b9a9950505050505050505050565b808201808211156123bc576123bc612799565b6000826129f457634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176123bc576123bc612799565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b818103818111156123bc576123bc61279956fea2646970667358221220d15f75bc825bb9d13b919c882f016498ec489973ba83cc2a42712efeb5a82ffc64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c806382dc1ec411610145578063de790c7e116100bd578063eecdac881161008c578063f832138311610071578063f8321383146105ad578063f8734302146105cd578063f9a8ea08146105e057600080fd5b8063eecdac8814610587578063f2fde38b1461059a57600080fd5b8063de790c7e1461051d578063e026049c14610530578063e3eece2614610538578063e43581b81461055b57600080fd5b8063adc0d57f11610114578063b5f2bc47116100f9578063b5f2bc47146104c3578063bf4816f0146104e3578063ccf2683b146104f657600080fd5b8063adc0d57f1461044d578063b1c94d94146104ba57600080fd5b806382dc1ec4146103fa5780638456cb591461040d5780638da5cb5b146104155780639e25fc5c1461043a57600080fd5b806352532faa116101d857806360216b00116101a75780636ef8d66d1161018c5780636ef8d66d146103af5780637f856013146103b757806380f51c12146103d757600080fd5b806360216b001461037c5780636b2c0f551461039c57600080fd5b806352532faa1461032e57806354eea7961461034e57806357d775f8146103615780635c975abb1461036a57600080fd5b80633f4ba83a116102145780633f4ba83a146102b957806346fbf68e146102c157806347b16c6c146102ed578063497bf3b21461030057600080fd5b806301e647251461024657806317bdbae51461027e5780633c4a25d0146102935780633d572107146102a6575b600080fd5b610269610254366004612529565b600a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61029161028c36600461258e565b6105f3565b005b6102916102a1366004612616565b610796565b6102916102b4366004612529565b61080b565b61029161089f565b6102696102cf366004612616565b6001600160a01b031660009081526001602052604090205460ff1690565b6102916102fb36600461258e565b610908565b61032061030e366004612616565b600c6020526000908152604090205481565b604051908152602001610275565b61032061033c366004612616565b60086020526000908152604090205481565b61029161035c366004612529565b610a9f565b61032060035481565b600054600160a01b900460ff16610269565b61032061038a366004612616565b60046020526000908152604090205481565b6102916103aa366004612616565b610b2c565b610291610b9e565b6103206103c5366004612616565b600b6020526000908152604090205481565b6102696103e5366004612616565b60016020526000908152604090205460ff1681565b610291610408366004612616565b610ba7565b610291610c19565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610275565b610291610448366004612529565b610c80565b61048f61045b366004612529565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b039586168152949093166020850152918301526060820152608001610275565b61032060095481565b6103206104d1366004612616565b60056020526000908152604090205481565b6102916104f136600461258e565b610d4d565b6104227f000000000000000000000000000000000000000000000000000000000000000081565b61029161052b366004612638565b610ee4565b6102916111cd565b610269610546366004612616565b60026020526000908152604090205460ff1681565b610269610569366004612616565b6001600160a01b031660009081526002602052604090205460ff1690565b610291610595366004612616565b6111d6565b6102916105a8366004612616565b611248565b6103206105bb366004612616565b60066020526000908152604090205481565b6102916105db366004612694565b611336565b6102916105ee36600461258e565b61173f565b3360009081526002602052604090205460ff166106505760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b8281146106915760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106106ae576106ae612783565b90506020020135600860008787858181106106cb576106cb612783565b90506020020160208101906106e09190612616565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce85858381811061072d5761072d612783565b90506020020160208101906107429190612616565b84848481811061075457610754612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610787816127af565b915050610694565b5050505050565b336107a96000546001600160a01b031690565b6001600160a01b0316146107ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b610808816118d6565b50565b3360009081526002602052604090205460ff166108635760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b60098190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526001602052604090205460ff166108fe5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610647565b610906611993565b565b3360009081526002602052604090205460ff166109605760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b8281146109a15760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106109be576109be612783565b90506020020135600560008787858181106109db576109db612783565b90506020020160208101906109f09190612616565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e89858583818110610a3d57610a3d612783565b9050602002016020810190610a529190612616565b848484818110610a6457610a64612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610a97816127af565b9150506109a4565b3360009081526002602052604090205460ff16610af75760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b60038190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001610894565b33610b3f6000546001600160a01b031690565b6001600160a01b031614610b955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611a39565b61090633611a39565b33610bba6000546001600160a01b031690565b6001600160a01b031614610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611af2565b3360009081526001602052604090205460ff16610c785760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610647565b610906611bb0565b600054600160a01b900460ff1615610ccd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6000610cd882611c38565b6020810151815160408084015190516340c10f1960e01b81526001600160a01b039283166004820152602481019190915292935016906340c10f1990604401600060405180830381600087803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050505050565b3360009081526002602052604090205460ff16610da55760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b828114610de65760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f57828282818110610e0357610e03612783565b90506020020135600b6000878785818110610e2057610e20612783565b9050602002016020810190610e359190612616565b6001600160a01b031681526020810191909152604001600020557f3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d06683858583818110610e8257610e82612783565b9050602002016020810190610e979190612616565b848484818110610ea957610ea9612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610edc816127af565b915050610de9565b600054600160a01b900460ff1615610f315760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6001600160a01b0384166000908152600b60205260409020548311610f985760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606401610647565b6001600160a01b0384166000908152600c60205260409020541580610fd557506001600160a01b0384166000908152600c60205260409020548311155b6110215760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610647565b6040516bffffffffffffffffffffffff1933606090811b8216602084015286811b821660348401526048830186905284901b16606882015277ffffffffffffffffffffffffffffffffffffffffffffffff1960c083811b8216607c84015246901b166084820152600090608c0160408051601f1981840301815291815281516020928301206000818152600a90935291205490915060ff16156110f65760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610647565b6000818152600a602052604090819020805460ff1916600117905551632770a7eb60e21b8152336004820152602481018590526001600160a01b03861690639dc29fac90604401600060405180830381600087803b15801561115757600080fd5b505af115801561116b573d6000803e3d6000fd5b5050604080518481526001600160a01b0389811660208301523382840152606082018990528716608082015290517f75f1bf55bb1de41b63a775dc7d4500f01114ee62b688a6b11d34f4692c1f3d4393509081900360a0019150a15050505050565b61090633611e0a565b336111e96000546001600160a01b031690565b6001600160a01b03161461123f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b61080881611e0a565b3361125b6000546001600160a01b031690565b6001600160a01b0316146112b15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610647565b6001600160a01b03811661132d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610647565b61080881611ec3565b600054600160a01b900460ff16156113835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b600046306040516020016113c092919091825260601b6bffffffffffffffffffffffff1916602082015263135a5b9d60e21b603482015260380190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161141c939291906127c8565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b8152600401611453979695949392919061292f565b60006040518083038186803b15801561146b57600080fd5b505afa15801561147f573d6000803e3d6000fd5b5050505060006114c48a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f2092505050565b6020818101518251604080850151606080870151608088015160a0890151855197841b6bffffffffffffffffffffffff19908116898b015296841b871660348901526048880194909452911b909316606885015260c09290921b77ffffffffffffffffffffffffffffffffffffffffffffffff1916607c8401526084808401929092528051808403909201825260a490920182528051908301206000818152600a9093529120549192509060ff16156115af5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b6044820152606401610647565b6000818152600a602052604090819020805460ff191660011790558251908301516115da919061207c565b81516001600160a01b031660009081526008602052604090205480158015906116065750808360400151115b15611628576116238284602001518560000151866040015161219a565b611698565b8251602084015160408086015190516340c10f1960e01b81526001600160a01b03928316600482015260248101919091529116906340c10f1990604401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b505050505b7f5bc84ecccfced5bb04bfc7f3efcdbe7f5cd21949ef146811b4d1967fe41f777a8284600001518560200151866040015187608001518860a00151896060015160405161172997969594939291909687526001600160a01b0395861660208801529385166040870152606086019290925267ffffffffffffffff16608085015260a08401521660c082015260e00190565b60405180910390a1505050505050505050505050565b3360009081526002602052604090205460ff166117975760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610647565b8281146117d85760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610647565b60005b8381101561078f578282828181106117f5576117f5612783565b90506020020135600c600087878581811061181257611812612783565b90506020020160208101906118279190612616565b6001600160a01b031681526020810191909152604001600020557fa3181379f6db47d9037efc6b6e8e3efe8c55ddb090b4f0512c152f97c4e47da585858381811061187457611874612783565b90506020020160208101906118899190612616565b84848481811061189b5761189b612783565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806118ce816127af565b9150506117db565b6001600160a01b03811660009081526002602052604090205460ff161561193f5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610647565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101610894565b600054600160a01b900460ff166119ec5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610647565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526001602052604090205460ff16611aa15760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610647565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610894565b6001600160a01b03811660009081526001602052604090205460ff1615611b5b5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610647565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610894565b600054600160a01b900460ff1615611bfd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610647565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a1c3390565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260076020908152604091829020825160808101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260039091015460608201819052611cf75760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610647565b6009548160600151611d0991906129c4565b4211611d575760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610647565b6000838152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d442693611dfc93889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b6001600160a01b03811660009081526002602052604090205460ff16611e725760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610647565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101610894565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b6020830151518351101561207457611f7e836122ba565b909250905081600103611fac57611f9c611f97846122f4565b6123b1565b6001600160a01b03168452611f67565b81600203611fd357611fc0611f97846122f4565b6001600160a01b03166020850152611f67565b81600303611ff657611fec611fe7846122f4565b6123c2565b6040850152611f67565b8160040361201d5761200a611f97846122f4565b6001600160a01b03166060850152611f67565b816005036120425761202e836123f9565b67ffffffffffffffff166080850152611f67565b816006036120655761205b612056846122f4565b612474565b60a0850152611f67565b61206f838261248c565b611f67565b505050919050565b60035460000361208a575050565b6001600160a01b038216600090815260056020526040812054908190036120b057505050565b6001600160a01b038316600090815260046020526040812054600354909142916120da81846129d7565b6120e491906129f9565b6001600160a01b03871660009081526006602052604090205490915081111561210f5784925061211c565b61211985846129c4565b92505b8383111561216c5760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610647565b506001600160a01b039094166000908152600460209081526040808320939093556006905220929092555050565b600084815260076020526040902060030154156121f95760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610647565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b81526007909352918690209451855490851673ffffffffffffffffffffffffffffffffffffffff1991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906122ac9086815260200190565b60405180910390a150505050565b60008060006122c8846123f9565b90506122d56008826129d7565b92508060071660058111156122ec576122ec612a10565b915050915091565b60606000612301836123f9565b9050600081846000015161231591906129c4565b905083602001515181111561232957600080fd5b8167ffffffffffffffff81111561234257612342612a26565b6040519080825280601f01601f19166020018201604052801561236c576020820181803683370190505b50602080860151865192955091818601919083010160005b858110156123a657818101518382015261239f6020826129c4565b9050612384565b505050935250919050565b60006123bc82612501565b92915050565b60006020825111156123d357600080fd5b60208201519050815160206123e89190612a3c565b6123f39060086129f9565b1c919050565b602080820151825181019091015160009182805b600a8110156102415783811a91506124268160076129f9565b82607f16901b8517945081608016600003612462576124468160016129c4565b865187906124559083906129c4565b9052509395945050505050565b8061246c816127af565b91505061240d565b6000815160201461248457600080fd5b506020015190565b60008160058111156124a0576124a0612a10565b036124b3576124ae826123f9565b505050565b60028160058111156124c7576124c7612a10565b036102415760006124d7836123f9565b905080836000018181516124eb91906129c4565b905250602083015151835111156124ae57600080fd5b6000815160141461251157600080fd5b50602001516c01000000000000000000000000900490565b60006020828403121561253b57600080fd5b5035919050565b60008083601f84011261255457600080fd5b50813567ffffffffffffffff81111561256c57600080fd5b6020830191508360208260051b850101111561258757600080fd5b9250929050565b600080600080604085870312156125a457600080fd5b843567ffffffffffffffff808211156125bc57600080fd5b6125c888838901612542565b909650945060208701359150808211156125e157600080fd5b506125ee87828801612542565b95989497509550505050565b80356001600160a01b038116811461261157600080fd5b919050565b60006020828403121561262857600080fd5b612631826125fa565b9392505050565b6000806000806080858703121561264e57600080fd5b612657856125fa565b93506020850135925061266c604086016125fa565b9150606085013567ffffffffffffffff8116811461268957600080fd5b939692955090935050565b6000806000806000806000806080898b0312156126b057600080fd5b883567ffffffffffffffff808211156126c857600080fd5b818b0191508b601f8301126126dc57600080fd5b8135818111156126eb57600080fd5b8c60208285010111156126fd57600080fd5b60209283019a509850908a0135908082111561271857600080fd5b6127248c838d01612542565b909850965060408b013591508082111561273d57600080fd5b6127498c838d01612542565b909650945060608b013591508082111561276257600080fd5b5061276f8b828c01612542565b999c989b5096995094979396929594505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127c1576127c1612799565b5060010190565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156128905782840389528135601e1988360301811261284657600080fd5b8701858101903567ffffffffffffffff81111561286257600080fd5b80360382131561287157600080fd5b61287c8682846127e2565b9a87019a9550505090840190600101612825565b5091979650505050505050565b8183526000602080850194508260005b858110156128d9576001600160a01b036128c6836125fa565b16875295820195908201906001016128ad565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561291657600080fd5b8260051b80836020870137939093016020019392505050565b608081526000885180608084015260005b8181101561295d576020818c0181015160a0868401015201612940565b50600060a08285010152601f19601f8201168301905060a083820301602084015261298c60a08201898b61280b565b905082810360408401526129a181878961289d565b905082810360608401526129b68185876128e4565b9a9950505050505050505050565b808201808211156123bc576123bc612799565b6000826129f457634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176123bc576123bc612799565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b818103818111156123bc576123bc61279956fea2646970667358221220d15f75bc825bb9d13b919c882f016498ec489973ba83cc2a42712efeb5a82ffc64736f6c63430008110033",
  "devdoc": {
    "details": "Work together with OriginalTokenVault deployed at remote chains.",
    "kind": "dev",
    "methods": {
      "burn(address,uint256,address,uint64)": {
        "params": {
          "_amount": "The amount to burn.",
          "_nonce": "A number to guarantee unique depositId. Can be timestamp in practice.",
          "_token": "The pegged token address.",
          "_withdrawAccount": "The account to receive the original tokens withdrawn on the remote chain."
        }
      },
      "mint(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_powers": "The signing powers of the signers.",
          "_request": "The serialized Mint protobuf.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "The bridge contract to mint and burn pegged tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256,address,uint64)": {
        "notice": "Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's OriginalTokenVault. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens."
      },
      "mint(bytes,bytes[],address[],uint256[])": {
        "notice": "Mint tokens triggered by deposit at a remote chain's OriginalTokenVault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35256,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1261,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 35370,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35129,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "governors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35517,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "epochLength",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 35521,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "epochVolumes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35525,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "epochVolumeCaps",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35529,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "lastOpTimestamps",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34930,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "delayedTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(delayedTransfer)34925_storage)"
      },
      {
        "astId": 34934,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "delayThresholds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34936,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "delayPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 29469,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "records",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 29473,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "minBurn",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29477,
        "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "maxBurn",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(delayedTransfer)34925_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DelayedTransfer.delayedTransfer)",
        "numberOfBytes": "32",
        "value": "t_struct(delayedTransfer)34925_storage"
      },
      "t_struct(delayedTransfer)34925_storage": {
        "encoding": "inplace",
        "label": "struct DelayedTransfer.delayedTransfer",
        "members": [
          {
            "astId": 34918,
            "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 34920,
            "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 34922,
            "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34924,
            "contract": "contracts/pegged-bridge/PeggedTokenBridge.sol:PeggedTokenBridge",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}