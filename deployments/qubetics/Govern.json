{
  "address": "0x31Bf83c82ab57252236aa06D474B178CA1133159",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Staking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xqsTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.ParamName",
          "name": "name",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ConfirmParamProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.ParamName",
          "name": "name",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CreateParamProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Govern.VoteOption",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "VoteParam",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collectForfeiture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "confirmParamProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "_name",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "createParamProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeiture",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getParamProposalVote",
      "outputs": [
        {
          "internalType": "enum Govern.VoteOption",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextParamProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paramProposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteDeadline",
          "type": "uint256"
        },
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "name",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "internalType": "enum Govern.ProposalStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum Govern.VoteOption",
          "name": "_vote",
          "type": "uint8"
        }
      ],
      "name": "voteParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xqsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fb0095b0ca653d1755893d9151a8f582a9b0fdca0b8fda8fc02fae35b1006cc",
  "receipt": {
    "to": null,
    "from": "0x46eE49e5688082C6F0f18f2504b5FcC1bd5244c0",
    "contractAddress": "0x31Bf83c82ab57252236aa06D474B178CA1133159",
    "transactionIndex": 0,
    "gasUsed": "1184358",
    "logsBloom": "0x
    "blockHash": "0xc80ca17aeac3854df60486f946b9e9a6faad22d66816ca403cbc32b32826ab81",
    "transactionHash": "0x6fb0095b0ca653d1755893d9151a8f582a9b0fdca0b8fda8fc02fae35b1006cc",
    "logs": [],
    "blockNumber": 1953738,
    "cumulativeGasUsed": "1184358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1705a771B1dBaeC22beF7efE8e196642619A3faf",
    "0x6EafACBeCD3B605506e0D4Bd9B5d0C7A9328669b",
    "0x979F5fBA55d720D900fff3D529ff4ea6EcB5fb96"
  ],
  "numDeployments": 1,
  "solcInputHash": "599f975210cdab3113358d43cb6a3e35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Staking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xqsTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"name\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ConfirmParamProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"name\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CreateParamProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Govern.VoteOption\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"VoteParam\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectForfeiture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"confirmParamProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"_name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createParamProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeiture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getParamProposalVote\",\"outputs\":[{\"internalType\":\"enum Govern.VoteOption\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextParamProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paramProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteDeadline\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"enum Govern.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Govern.VoteOption\",\"name\":\"_vote\",\"type\":\"uint8\"}],\"name\":\"voteParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xqsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirmParamProposal(uint256)\":{\"params\":{\"_proposalId\":\"the id of the parameter proposal\"}},\"createParamProposal(uint8,uint256)\":{\"params\":{\"_name\":\"the key of this parameter\",\"_value\":\"the new proposed value of this parameter\"}},\"getParamProposalVote(uint256,address)\":{\"params\":{\"_proposalId\":\"the proposal id\",\"_voter\":\"the voter address\"},\"returns\":{\"_0\":\"the vote type of the given voter on the given parameter proposal\"}},\"voteParam(uint256,uint8)\":{\"params\":{\"_proposalId\":\"the id of the parameter proposal\",\"_vote\":\"the type of vote\"}}},\"title\":\"Governance module for Staking contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"confirmParamProposal(uint256)\":{\"notice\":\"Confirm a parameter proposal\"},\"createParamProposal(uint8,uint256)\":{\"notice\":\"Create a parameter proposal\"},\"getParamProposalVote(uint256,address)\":{\"notice\":\"Get the vote type of a voter on a parameter proposal\"},\"voteParam(uint256,uint8)\":{\"notice\":\"Vote for a parameter proposal with a specific type of vote\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Govern.sol\":\"Govern\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ISigsVerifier {\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\r\\n     * @param _signers sorted list of current signers\\r\\n     * @param _powers powers of current signers\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x64957c1004af8c9a8fe54ad5fdba6e8af24a75f92bf77e7eefe71b1f39926f4c\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// runtime proto sol library\\r\\nlibrary Pb {\\r\\n    enum WireType {\\r\\n        Varint,\\r\\n        Fixed64,\\r\\n        LengthDelim,\\r\\n        StartGroup,\\r\\n        EndGroup,\\r\\n        Fixed32\\r\\n    }\\r\\n\\r\\n    struct Buffer {\\r\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\r\\n        bytes b; // hold serialized proto msg, readonly\\r\\n    }\\r\\n\\r\\n    // create a new in-memory Buffer object from raw msg bytes\\r\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\r\\n        buf.b = raw;\\r\\n        buf.idx = 0;\\r\\n    }\\r\\n\\r\\n    // whether there are unread bytes\\r\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\r\\n        return buf.idx < buf.b.length;\\r\\n    }\\r\\n\\r\\n    // decode current field number and wiretype\\r\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\r\\n        uint256 v = decVarint(buf);\\r\\n        tag = v / 8;\\r\\n        wiretype = WireType(v & 7);\\r\\n    }\\r\\n\\r\\n    // count tag occurrences, return an array due to no memory map support\\r\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\r\\n    // should keep buf.idx unchanged because this is only a count function\\r\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\r\\n        uint256 originalIdx = buf.idx;\\r\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\r\\n        uint256 tag;\\r\\n        WireType wire;\\r\\n        while (hasMore(buf)) {\\r\\n            (tag, wire) = decKey(buf);\\r\\n            cnts[tag] += 1;\\r\\n            skipValue(buf, wire);\\r\\n        }\\r\\n        buf.idx = originalIdx;\\r\\n    }\\r\\n\\r\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\r\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\r\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\r\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\r\\n        v = buf.idx; // use v to save one additional uint variable\\r\\n        assembly {\\r\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\r\\n        }\\r\\n        uint256 b; // store current byte content\\r\\n        v = 0; // reset to 0 for return value\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            assembly {\\r\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\r\\n            }\\r\\n            v |= (b & 0x7F) << (i * 7);\\r\\n            if (b & 0x80 == 0) {\\r\\n                buf.idx += i + 1;\\r\\n                return v;\\r\\n            }\\r\\n        }\\r\\n        revert(); // i=10, invalid varint stream\\r\\n    }\\r\\n\\r\\n    // read length delimited field and return bytes\\r\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        b = new bytes(len);\\r\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\r\\n        uint256 bStart;\\r\\n        uint256 bufBStart = buf.idx;\\r\\n        assembly {\\r\\n            bStart := add(b, 32)\\r\\n            bufBStart := add(add(bufB, 32), bufBStart)\\r\\n        }\\r\\n        for (uint256 i = 0; i < len; i += 32) {\\r\\n            assembly {\\r\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\r\\n            }\\r\\n        }\\r\\n        buf.idx = end;\\r\\n    }\\r\\n\\r\\n    // return packed ints\\r\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        // array in memory must be init w/ known length\\r\\n        // so we have to create a tmp array w/ max possible len first\\r\\n        uint256[] memory tmp = new uint256[](len);\\r\\n        uint256 i = 0; // count how many ints are there\\r\\n        while (buf.idx < end) {\\r\\n            tmp[i] = decVarint(buf);\\r\\n            i++;\\r\\n        }\\r\\n        t = new uint256[](i); // init t with correct length\\r\\n        for (uint256 j = 0; j < i; j++) {\\r\\n            t[j] = tmp[j];\\r\\n        }\\r\\n        return t;\\r\\n    }\\r\\n\\r\\n    // move idx pass current value field, to beginning of next tag or msg end\\r\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\r\\n        if (wire == WireType.Varint) {\\r\\n            decVarint(buf);\\r\\n        } else if (wire == WireType.LengthDelim) {\\r\\n            uint256 len = decVarint(buf);\\r\\n            buf.idx += len; // skip len bytes value data\\r\\n            require(buf.idx <= buf.b.length); // avoid overflow\\r\\n        } else {\\r\\n            revert();\\r\\n        } // unsupported wiretype\\r\\n    }\\r\\n\\r\\n    // type conversion help utils\\r\\n    function _bool(uint256 x) internal pure returns (bool v) {\\r\\n        return x != 0;\\r\\n    }\\r\\n\\r\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\r\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        } // load all 32bytes to v\\r\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\r\\n    }\\r\\n\\r\\n    function _address(bytes memory b) internal pure returns (address v) {\\r\\n        v = _addressPayable(b);\\r\\n    }\\r\\n\\r\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\r\\n        require(b.length == 20);\\r\\n        //load 32bytes then shift right 12 bytes\\r\\n        assembly {\\r\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\r\\n        require(b.length == 32);\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // uint[] to uint8[]\\r\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\r\\n        t = new uint8[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint8(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\r\\n        t = new uint32[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint32(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\r\\n        t = new uint64[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint64(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\r\\n        t = new bool[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = arr[i] != 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x870ea11c2e01e1af41a0e2b4d78312d7fb3396810476ea16f9b6b0292ed29e78\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\r\\n// source: contracts/libraries/proto/staking.proto\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"./Pb.sol\\\";\\r\\n\\r\\nlibrary PbStaking {\\r\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\r\\n\\r\\n    struct StakingReward {\\r\\n        address recipient; // tag: 1\\r\\n        uint256 cumulativeRewardAmount; // tag: 2\\r\\n    } // end struct StakingReward\\r\\n\\r\\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.recipient = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder StakingReward\\r\\n\\r\\n    struct Slash {\\r\\n        address validator; // tag: 1\\r\\n        uint64 nonce; // tag: 2\\r\\n        uint64 slashFactor; // tag: 3\\r\\n        uint64 expireTime; // tag: 4\\r\\n        uint64 jailPeriod; // tag: 5\\r\\n        AcctAmtPair[] collectors; // tag: 6\\r\\n    } // end struct Slash\\r\\n\\r\\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256[] memory cnts = buf.cntTags(6);\\r\\n        m.collectors = new AcctAmtPair[](cnts[6]);\\r\\n        cnts[6] = 0; // reset counter for later use\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.validator = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.nonce = uint64(buf.decVarint());\\r\\n            } else if (tag == 3) {\\r\\n                m.slashFactor = uint64(buf.decVarint());\\r\\n            } else if (tag == 4) {\\r\\n                m.expireTime = uint64(buf.decVarint());\\r\\n            } else if (tag == 5) {\\r\\n                m.jailPeriod = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\\r\\n                cnts[6]++;\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Slash\\r\\n\\r\\n    struct AcctAmtPair {\\r\\n        address account; // tag: 1\\r\\n        uint256 amount; // tag: 2\\r\\n    } // end struct AcctAmtPair\\r\\n\\r\\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.account = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder AcctAmtPair\\r\\n}\\r\\n\",\"keccak256\":\"0xd7a1f57d9706ba27e0014d0f6afe682310809418161512aa8c443c0b1d719980\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n *\\r\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\r\\n * renounceOwnership. So we can support Proxy based upgradable contract\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\r\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\r\\n     * because constructor sets _owner in contract state.\\r\\n     */\\r\\n    function initOwner() internal {\\r\\n        require(_owner == address(0), \\\"owner already set\\\");\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa85eba884c4b3be9bada2125c59907854d553c63f6610a82eb595bd207f42c3\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Pauser is Ownable, Pausable {\\r\\n    mapping(address => bool) public pausers;\\r\\n\\r\\n    event PauserAdded(address account);\\r\\n    event PauserRemoved(address account);\\r\\n\\r\\n    constructor() {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() public onlyPauser {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyPauser {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return pausers[account];\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyOwner {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function removePauser(address account) public onlyOwner {\\r\\n        _removePauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) private {\\r\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\r\\n        pausers[account] = true;\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) private {\\r\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\r\\n        pausers[account] = false;\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e5dd7a6577d4d1e2cca7f4917472c6b12470672dba0a3592eb8ef0c2d0ab044\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Whitelist is Ownable {\\r\\n    mapping(address => bool) public whitelist;\\r\\n    bool public whitelistEnabled;\\r\\n\\r\\n    event WhitelistedAdded(address account);\\r\\n    event WhitelistedRemoved(address account);\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        if (whitelistEnabled) {\\r\\n            require(isWhitelisted(msg.sender), \\\"Caller is not whitelisted\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set whitelistEnabled\\r\\n     */\\r\\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\\r\\n        whitelistEnabled = _whitelistEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add an account to whitelist\\r\\n     */\\r\\n    function addWhitelisted(address account) external onlyOwner {\\r\\n        require(!isWhitelisted(account), \\\"Already whitelisted\\\");\\r\\n        whitelist[account] = true;\\r\\n        emit WhitelistedAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove an account from whitelist\\r\\n     */\\r\\n    function removeWhitelisted(address account) external onlyOwner {\\r\\n        require(isWhitelisted(account), \\\"Not whitelisted\\\");\\r\\n        whitelist[account] = false;\\r\\n        emit WhitelistedRemoved(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return is account whitelisted\\r\\n     */\\r\\n    function isWhitelisted(address account) public view returns (bool) {\\r\\n        return whitelist[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdabba31e5c190b3cde996aef04565ed361046515d1767033a936dd10a0cb07ff\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    uint256 constant XQST_DECIMAL = 1e18;\\r\\n    uint256 constant MAX_INT = 2**256 - 1;\\r\\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\\r\\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\\r\\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\\r\\n\\r\\n    enum ValidatorStatus {\\r\\n        Null,\\r\\n        Unbonded,\\r\\n        Unbonding,\\r\\n        Bonded\\r\\n    }\\r\\n\\r\\n    enum ParamName {\\r\\n        ProposalDeposit,\\r\\n        VotingPeriod,\\r\\n        UnbondingPeriod,\\r\\n        MaxBondedValidators,\\r\\n        MinValidatorTokens,\\r\\n        MinSelfDelegation,\\r\\n        AdvanceNoticePeriod,\\r\\n        ValidatorBondInterval,\\r\\n        MaxSlashFactor\\r\\n    }\\r\\n\\r\\n    struct Undelegation {\\r\\n        uint256 shares;\\r\\n        uint256 creationBlock;\\r\\n    }\\r\\n\\r\\n    struct Undelegations {\\r\\n        mapping(uint256 => Undelegation) queue;\\r\\n        uint32 head;\\r\\n        uint32 tail;\\r\\n    }\\r\\n\\r\\n    struct Delegator {\\r\\n        uint256 shares;\\r\\n        Undelegations undelegations;\\r\\n    }\\r\\n\\r\\n    struct Validator {\\r\\n        ValidatorStatus status;\\r\\n        address signer;\\r\\n        uint256 tokens; // sum of all tokens delegated to this validator\\r\\n        uint256 shares; // sum of all delegation shares\\r\\n        uint256 undelegationTokens; // tokens being undelegated\\r\\n        uint256 undelegationShares; // shares of tokens being undelegated\\r\\n        mapping(address => Delegator) delegators;\\r\\n        uint256 minSelfDelegation;\\r\\n        uint64 bondBlock; // cannot become bonded before this block\\r\\n        uint64 unbondBlock; // cannot become unbonded before this block\\r\\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct ValidatorTokens {\\r\\n        address valAddr;\\r\\n        uint256 tokens;\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct ValidatorInfo {\\r\\n        address valAddr;\\r\\n        ValidatorStatus status;\\r\\n        address signer;\\r\\n        uint256 tokens;\\r\\n        uint256 shares;\\r\\n        uint256 minSelfDelegation;\\r\\n        uint64 commissionRate;\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct DelegatorInfo {\\r\\n        address valAddr;\\r\\n        uint256 tokens;\\r\\n        uint256 shares;\\r\\n        Undelegation[] undelegations;\\r\\n        uint256 undelegationTokens;\\r\\n        uint256 withdrawableUndelegationTokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2a8bba135109d3ba0860985b08b94813318f1513e3de11c416da74df9577deb\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/Govern.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {DataTypes as dt} from \\\"./DataTypes.sol\\\";\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Governance module for Staking contract\\r\\n */\\r\\ncontract Govern {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    Staking public immutable staking;\\r\\n    IERC20 public immutable xqsToken;\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Uninitiated,\\r\\n        Voting,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    enum VoteOption {\\r\\n        Null,\\r\\n        Yes,\\r\\n        Abstain,\\r\\n        No\\r\\n    }\\r\\n\\r\\n    struct ParamProposal {\\r\\n        address proposer;\\r\\n        uint256 deposit;\\r\\n        uint256 voteDeadline;\\r\\n        dt.ParamName name;\\r\\n        uint256 newValue;\\r\\n        ProposalStatus status;\\r\\n        mapping(address => VoteOption) votes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => ParamProposal) public paramProposals;\\r\\n    uint256 public nextParamProposalId;\\r\\n\\r\\n    uint256 public forfeiture;\\r\\n    address public immutable collector;\\r\\n\\r\\n    event CreateParamProposal(\\r\\n        uint256 proposalId,\\r\\n        address proposer,\\r\\n        uint256 deposit,\\r\\n        uint256 voteDeadline,\\r\\n        dt.ParamName name,\\r\\n        uint256 newValue\\r\\n    );\\r\\n    event VoteParam(uint256 proposalId, address voter, VoteOption vote);\\r\\n    event ConfirmParamProposal(uint256 proposalId, bool passed, dt.ParamName name, uint256 newValue);\\r\\n\\r\\n    constructor(\\r\\n        Staking _staking,\\r\\n        address _xqsTokenAddress,\\r\\n        address _collector\\r\\n    ) {\\r\\n        staking = _staking;\\r\\n        xqsToken = IERC20(_xqsTokenAddress);\\r\\n        collector = _collector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the vote type of a voter on a parameter proposal\\r\\n     * @param _proposalId the proposal id\\r\\n     * @param _voter the voter address\\r\\n     * @return the vote type of the given voter on the given parameter proposal\\r\\n     */\\r\\n    function getParamProposalVote(uint256 _proposalId, address _voter) public view returns (VoteOption) {\\r\\n        return paramProposals[_proposalId].votes[_voter];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a parameter proposal\\r\\n     * @param _name the key of this parameter\\r\\n     * @param _value the new proposed value of this parameter\\r\\n     */\\r\\n    function createParamProposal(dt.ParamName _name, uint256 _value) external {\\r\\n        ParamProposal storage p = paramProposals[nextParamProposalId];\\r\\n        nextParamProposalId = nextParamProposalId + 1;\\r\\n        address msgSender = msg.sender;\\r\\n        uint256 deposit = staking.getParamValue(dt.ParamName.ProposalDeposit);\\r\\n\\r\\n        p.proposer = msgSender;\\r\\n        p.deposit = deposit;\\r\\n        p.voteDeadline = block.number + staking.getParamValue(dt.ParamName.VotingPeriod);\\r\\n        p.name = _name;\\r\\n        p.newValue = _value;\\r\\n        p.status = ProposalStatus.Voting;\\r\\n\\r\\n        xqsToken.safeTransferFrom(msgSender, address(this), deposit);\\r\\n\\r\\n        emit CreateParamProposal(nextParamProposalId - 1, msgSender, deposit, p.voteDeadline, _name, _value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Vote for a parameter proposal with a specific type of vote\\r\\n     * @param _proposalId the id of the parameter proposal\\r\\n     * @param _vote the type of vote\\r\\n     */\\r\\n    function voteParam(uint256 _proposalId, VoteOption _vote) external {\\r\\n        address valAddr = msg.sender;\\r\\n        require(staking.getValidatorStatus(valAddr) == dt.ValidatorStatus.Bonded, \\\"Voter is not a bonded validator\\\");\\r\\n        ParamProposal storage p = paramProposals[_proposalId];\\r\\n        require(p.status == ProposalStatus.Voting, \\\"Invalid proposal status\\\");\\r\\n        require(block.number < p.voteDeadline, \\\"Vote deadline passed\\\");\\r\\n        require(p.votes[valAddr] == VoteOption.Null, \\\"Voter has voted\\\");\\r\\n        require(_vote != VoteOption.Null, \\\"Invalid vote\\\");\\r\\n\\r\\n        p.votes[valAddr] = _vote;\\r\\n\\r\\n        emit VoteParam(_proposalId, valAddr, _vote);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Confirm a parameter proposal\\r\\n     * @param _proposalId the id of the parameter proposal\\r\\n     */\\r\\n    function confirmParamProposal(uint256 _proposalId) external {\\r\\n        uint256 yesVotes;\\r\\n        uint256 bondedTokens;\\r\\n        dt.ValidatorTokens[] memory validators = staking.getBondedValidatorsTokens();\\r\\n        for (uint32 i = 0; i < validators.length; i++) {\\r\\n            if (getParamProposalVote(_proposalId, validators[i].valAddr) == VoteOption.Yes) {\\r\\n                yesVotes += validators[i].tokens;\\r\\n            }\\r\\n            bondedTokens += validators[i].tokens;\\r\\n        }\\r\\n        bool passed = (yesVotes >= (bondedTokens * 2) / 3 + 1);\\r\\n\\r\\n        ParamProposal storage p = paramProposals[_proposalId];\\r\\n        require(p.status == ProposalStatus.Voting, \\\"Invalid proposal status\\\");\\r\\n        require(block.number >= p.voteDeadline, \\\"Vote deadline not reached\\\");\\r\\n\\r\\n        p.status = ProposalStatus.Closed;\\r\\n        if (passed) {\\r\\n            staking.setParamValue(p.name, p.newValue);\\r\\n            xqsToken.safeTransfer(p.proposer, p.deposit);\\r\\n        } else {\\r\\n            forfeiture += p.deposit;\\r\\n        }\\r\\n\\r\\n        emit ConfirmParamProposal(_proposalId, passed, p.name, p.newValue);\\r\\n    }\\r\\n\\r\\n    function collectForfeiture() external {\\r\\n        require(forfeiture > 0, \\\"Nothing to collect\\\");\\r\\n        xqsToken.safeTransfer(collector, forfeiture);\\r\\n        forfeiture = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9614628a343fe4ba2653b5b7d2f05b351d0920502d87c8bbdc98d5dfd2610086\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {DataTypes as dt} from \\\"./DataTypes.sol\\\";\\r\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\r\\nimport \\\"../libraries/PbStaking.sol\\\";\\r\\nimport \\\"../safeguard/Pauser.sol\\\";\\r\\nimport \\\"../safeguard/Whitelist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title A Staking contract shared by all external sidechains and apps\\r\\n */\\r\\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    IERC20 public immutable XQUBESWAP_TOKEN;\\r\\n\\r\\n    uint256 public bondedTokens;\\r\\n    uint256 public nextBondBlock;\\r\\n    address[] public valAddrs;\\r\\n    address[] public bondedValAddrs;\\r\\n    mapping(address => dt.Validator) public validators; // key is valAddr\\r\\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\\r\\n    mapping(uint256 => bool) public slashNonces;\\r\\n\\r\\n    mapping(dt.ParamName => uint256) public params;\\r\\n    address public govContract;\\r\\n    address public rewardContract;\\r\\n    uint256 public forfeiture;\\r\\n\\r\\n    /* Events */\\r\\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\\r\\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\\r\\n    event DelegationUpdate(\\r\\n        address indexed valAddr,\\r\\n        address indexed delAddr,\\r\\n        uint256 valTokens,\\r\\n        uint256 delShares,\\r\\n        int256 tokenDiff\\r\\n    );\\r\\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\\r\\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\\r\\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Staking constructor\\r\\n     * @param _xqsTokenAddress address of Celer Token Contract\\r\\n     * @param _proposalDeposit required deposit amount for a governance proposal\\r\\n     * @param _votingPeriod voting timeout for a governance proposal\\r\\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\\r\\n     * @param _maxBondedValidators the maximum number of bonded validators\\r\\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\\r\\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\\r\\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\\r\\n     * @param _validatorBondInterval min interval between bondValidator\\r\\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\\r\\n     */\\r\\n    constructor(\\r\\n        address _xqsTokenAddress,\\r\\n        uint256 _proposalDeposit,\\r\\n        uint256 _votingPeriod,\\r\\n        uint256 _unbondingPeriod,\\r\\n        uint256 _maxBondedValidators,\\r\\n        uint256 _minValidatorTokens,\\r\\n        uint256 _minSelfDelegation,\\r\\n        uint256 _advanceNoticePeriod,\\r\\n        uint256 _validatorBondInterval,\\r\\n        uint256 _maxSlashFactor\\r\\n    ) {\\r\\n        XQUBESWAP_TOKEN = IERC20(_xqsTokenAddress);\\r\\n\\r\\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\\r\\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\\r\\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\\r\\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\\r\\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\\r\\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\\r\\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\\r\\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\\r\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /*********************************\\r\\n     * External and Public Functions *\\r\\n     *********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize a validator candidate\\r\\n     * @param _signer signer address\\r\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\r\\n     * @param _commissionRate the self-declaimed commission rate\\r\\n     */\\r\\n    function initializeValidator(\\r\\n        address _signer,\\r\\n        uint256 _minSelfDelegation,\\r\\n        uint64 _commissionRate\\r\\n    ) external whenNotPaused onlyWhitelisted {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status == dt.ValidatorStatus.Null, \\\"Validator is initialized\\\");\\r\\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\r\\n        require(signerVals[valAddr] == address(0), \\\"Validator is other signer\\\");\\r\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\r\\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid commission rate\\\");\\r\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\r\\n        validator.signer = _signer;\\r\\n        validator.status = dt.ValidatorStatus.Unbonded;\\r\\n        validator.minSelfDelegation = _minSelfDelegation;\\r\\n        validator.commissionRate = _commissionRate;\\r\\n        valAddrs.push(valAddr);\\r\\n        signerVals[_signer] = valAddr;\\r\\n\\r\\n        delegate(valAddr, _minSelfDelegation);\\r\\n        emit ValidatorNotice(valAddr, \\\"init\\\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update validator signer address\\r\\n     * @param _signer signer address\\r\\n     */\\r\\n    function updateValidatorSigner(address _signer) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator not initialized\\\");\\r\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\r\\n        if (_signer != valAddr) {\\r\\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\r\\n        }\\r\\n\\r\\n        delete signerVals[validator.signer];\\r\\n        validator.signer = _signer;\\r\\n        signerVals[_signer] = valAddr;\\r\\n\\r\\n        emit ValidatorNotice(valAddr, \\\"signer\\\", abi.encode(_signer), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Candidate claims to become a bonded validator\\r\\n     * @dev caller can be either validator owner or signer\\r\\n     */\\r\\n    function bondValidator() external {\\r\\n        address valAddr = msg.sender;\\r\\n        if (signerVals[msg.sender] != address(0)) {\\r\\n            valAddr = signerVals[msg.sender];\\r\\n        }\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(\\r\\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\\r\\n            \\\"Invalid validator status\\\"\\r\\n        );\\r\\n        require(block.number >= validator.bondBlock, \\\"Bond block not reached\\\");\\r\\n        require(block.number >= nextBondBlock, \\\"Too frequent validator bond\\\");\\r\\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\\r\\n        require(hasMinRequiredTokens(valAddr, true), \\\"Not have min tokens\\\");\\r\\n\\r\\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\\r\\n        // if the number of validators has not reached the max_validator_num,\\r\\n        // add validator directly\\r\\n        if (bondedValAddrs.length < maxBondedValidators) {\\r\\n            _bondValidator(valAddr);\\r\\n            _decentralizationCheck(validator.tokens);\\r\\n            return;\\r\\n        }\\r\\n        // if the number of validators has already reached the max_validator_num,\\r\\n        // add validator only if its tokens is more than the current least bonded validator tokens\\r\\n        uint256 minTokens = dt.MAX_INT;\\r\\n        uint256 minTokensIndex;\\r\\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\\r\\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\\r\\n                minTokensIndex = i;\\r\\n                minTokens = validators[bondedValAddrs[i]].tokens;\\r\\n                if (minTokens == 0) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(validator.tokens > minTokens, \\\"Insufficient tokens\\\");\\r\\n        _replaceBondedValidator(valAddr, minTokensIndex);\\r\\n        _decentralizationCheck(validator.tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Confirm validator status from Unbonding to Unbonded\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function confirmUnbondedValidator(address _valAddr) external {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status == dt.ValidatorStatus.Unbonding, \\\"Validator not unbonding\\\");\\r\\n        require(block.number >= validator.unbondBlock, \\\"Unbond block not reached\\\");\\r\\n\\r\\n        validator.status = dt.ValidatorStatus.Unbonded;\\r\\n        delete validator.unbondBlock;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate XQST tokens to a validator\\r\\n     * @dev Minimal amount per delegate operation is 1 XQST\\r\\n     * @param _valAddr validator to delegate\\r\\n     * @param _tokens the amount of delegated XQST tokens\\r\\n     */\\r\\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\\r\\n        address delAddr = msg.sender;\\r\\n        require(_tokens >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 XQST\\\");\\r\\n\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\r\\n\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n        delegator.shares += shares;\\r\\n        validator.shares += shares;\\r\\n        validator.tokens += _tokens;\\r\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens += _tokens;\\r\\n            _decentralizationCheck(validator.tokens);\\r\\n        }\\r\\n        XQUBESWAP_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\\r\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Undelegate shares from a validator\\r\\n     * @dev Tokens are delegated by the msgSender to the validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _shares undelegate shares\\r\\n     */\\r\\n    function undelegateShares(address _valAddr, uint256 _shares) external {\\r\\n        require(_shares >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 share\\\");\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\\r\\n        _undelegate(validator, _valAddr, tokens, _shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Undelegate shares from a validator\\r\\n     * @dev Tokens are delegated by the msgSender to the validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _tokens undelegate tokens\\r\\n     */\\r\\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\\r\\n        require(_tokens >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 XQST\\\");\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\r\\n        _undelegate(validator, _valAddr, _tokens, shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Complete pending undelegations from a validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function completeUndelegate(address _valAddr) external {\\r\\n        address delAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n\\r\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\r\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\r\\n        // for all pending undelegations\\r\\n        uint32 i;\\r\\n        uint256 undelegationShares;\\r\\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\\r\\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\\r\\n                // complete undelegation when the validator becomes unbonded or\\r\\n                // the unbondingPeriod for the pending undelegation is up.\\r\\n                undelegationShares += delegator.undelegations.queue[i].shares;\\r\\n                delete delegator.undelegations.queue[i];\\r\\n                continue;\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        delegator.undelegations.head = i;\\r\\n\\r\\n        require(undelegationShares > 0, \\\"No undelegation ready to be completed\\\");\\r\\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\\r\\n        validator.undelegationShares -= undelegationShares;\\r\\n        validator.undelegationTokens -= tokens;\\r\\n        XQUBESWAP_TOKEN.safeTransfer(delAddr, tokens);\\r\\n        emit Undelegated(_valAddr, delAddr, tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update commission rate\\r\\n     * @param _newRate new commission rate\\r\\n     */\\r\\n    function updateCommissionRate(uint64 _newRate) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid new rate\\\");\\r\\n        validator.commissionRate = _newRate;\\r\\n        emit ValidatorNotice(valAddr, \\\"commission\\\", abi.encode(_newRate), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update minimal self delegation value\\r\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\r\\n     */\\r\\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\r\\n        if (_minSelfDelegation < validator.minSelfDelegation) {\\r\\n            require(validator.status != dt.ValidatorStatus.Bonded, \\\"Validator is bonded\\\");\\r\\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\\r\\n        }\\r\\n        validator.minSelfDelegation = _minSelfDelegation;\\r\\n        emit ValidatorNotice(valAddr, \\\"min-self-delegation\\\", abi.encode(_minSelfDelegation), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Slash a validator and its delegators\\r\\n     * @param _slashRequest slash request bytes coded in protobuf\\r\\n     * @param _sigs list of validator signatures\\r\\n     */\\r\\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\\r\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Slash\\\"));\\r\\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\\r\\n\\r\\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\\r\\n        require(block.timestamp < request.expireTime, \\\"Slash expired\\\");\\r\\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \\\"Invalid slash factor\\\");\\r\\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \\\"Exceed max slash factor\\\");\\r\\n        require(!slashNonces[request.nonce], \\\"Used slash nonce\\\");\\r\\n        slashNonces[request.nonce] = true;\\r\\n\\r\\n        address valAddr = request.validator;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(\\r\\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\\r\\n            \\\"Invalid validator status\\\"\\r\\n        );\\r\\n\\r\\n        // slash delegated tokens\\r\\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\r\\n        validator.tokens -= slashAmt;\\r\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens -= slashAmt;\\r\\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\\r\\n                _unbondValidator(valAddr);\\r\\n            }\\r\\n        }\\r\\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\\r\\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\\r\\n        }\\r\\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\\r\\n\\r\\n        // slash pending undelegations\\r\\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\r\\n        validator.undelegationTokens -= slashUndelegation;\\r\\n        slashAmt += slashUndelegation;\\r\\n\\r\\n        uint256 collectAmt;\\r\\n        for (uint256 i = 0; i < request.collectors.length; i++) {\\r\\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\\r\\n            if (collectAmt + collector.amount > slashAmt) {\\r\\n                collector.amount = slashAmt - collectAmt;\\r\\n            }\\r\\n            if (collector.amount > 0) {\\r\\n                collectAmt += collector.amount;\\r\\n                if (collector.account == address(0)) {\\r\\n                    XQUBESWAP_TOKEN.safeTransfer(msg.sender, collector.amount);\\r\\n                    emit SlashAmtCollected(msg.sender, collector.amount);\\r\\n                } else {\\r\\n                    XQUBESWAP_TOKEN.safeTransfer(collector.account, collector.amount);\\r\\n                    emit SlashAmtCollected(collector.account, collector.amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        forfeiture += slashAmt - collectAmt;\\r\\n        emit Slash(valAddr, request.nonce, slashAmt);\\r\\n    }\\r\\n\\r\\n    function collectForfeiture() external {\\r\\n        require(forfeiture > 0, \\\"Nothing to collect\\\");\\r\\n        XQUBESWAP_TOKEN.safeTransfer(rewardContract, forfeiture);\\r\\n        forfeiture = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validator notice event, could be triggered by anyone\\r\\n     */\\r\\n    function validatorNotice(\\r\\n        address _valAddr,\\r\\n        string calldata _key,\\r\\n        bytes calldata _data\\r\\n    ) external {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\\r\\n        require(msg.sender == govContract, \\\"Caller is not gov contract\\\");\\r\\n        if (_name == dt.ParamName.MaxBondedValidators) {\\r\\n            require(bondedValAddrs.length <= _value, \\\"invalid value\\\");\\r\\n        }\\r\\n        params[_name] = _value;\\r\\n    }\\r\\n\\r\\n    function setGovContract(address _addr) external onlyOwner {\\r\\n        govContract = _addr;\\r\\n    }\\r\\n\\r\\n    function setRewardContract(address _addr) external onlyOwner {\\r\\n        rewardContract = _addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set max slash factor\\r\\n     */\\r\\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\\r\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Owner drains tokens when the contract is paused\\r\\n     * @dev emergency use only\\r\\n     * @param _amount drained token amount\\r\\n     */\\r\\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\\r\\n        XQUBESWAP_TOKEN.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**************************\\r\\n     *  Public View Functions *\\r\\n     **************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Validate if a message is signed by quorum tokens\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of validator signatures\\r\\n     */\\r\\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\\r\\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\\r\\n        uint256 signedTokens;\\r\\n        address prev = address(0);\\r\\n        uint256 quorum = getQuorumTokens();\\r\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\r\\n            address signer = hash.recover(_sigs[i]);\\r\\n            require(signer > prev, \\\"Signers not in ascending order\\\");\\r\\n            prev = signer;\\r\\n            dt.Validator storage validator = validators[signerVals[signer]];\\r\\n            if (validator.status != dt.ValidatorStatus.Bonded) {\\r\\n                continue;\\r\\n            }\\r\\n            signedTokens += validator.tokens;\\r\\n            if (signedTokens >= quorum) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Quorum not reached\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the validators.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs the list of signatures\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata,\\r\\n        uint256[] calldata\\r\\n    ) public view override {\\r\\n        require(verifySignatures(_msg, _sigs), \\\"Failed to verify sigs\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get quorum amount of tokens\\r\\n     * @return the quorum amount\\r\\n     */\\r\\n    function getQuorumTokens() public view returns (uint256) {\\r\\n        return (bondedTokens * 2) / 3 + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get validator info\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @return Validator token amount\\r\\n     */\\r\\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\\r\\n        return validators[_valAddr].tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get validator info\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @return Validator status\\r\\n     */\\r\\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\\r\\n        return validators[_valAddr].status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check the given address is a validator or not\\r\\n     * @param _addr the address to check\\r\\n     * @return the given address is a validator or not\\r\\n     */\\r\\n    function isBondedValidator(address _addr) public view returns (bool) {\\r\\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of validators\\r\\n     * @return the number of validators\\r\\n     */\\r\\n    function getValidatorNum() public view returns (uint256) {\\r\\n        return valAddrs.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of bonded validators\\r\\n     * @return the number of bonded validators\\r\\n     */\\r\\n    function getBondedValidatorNum() public view returns (uint256) {\\r\\n        return bondedValAddrs.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return addresses and token amounts of bonded validators\\r\\n     */\\r\\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\\r\\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\\r\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\r\\n            address valAddr = bondedValAddrs[i];\\r\\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\\r\\n        }\\r\\n        return infos;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if min token requirements are met\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _checkSelfDelegation check self delegation\\r\\n     */\\r\\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\\r\\n        dt.Validator storage v = validators[_valAddr];\\r\\n        uint256 valTokens = v.tokens;\\r\\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\\r\\n            return false;\\r\\n        }\\r\\n        if (_checkSelfDelegation) {\\r\\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\\r\\n            if (selfDelegation < v.minSelfDelegation) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the delegator info of a specific validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _delAddr the address of the delegator\\r\\n     * @return DelegatorInfo from the given validator\\r\\n     */\\r\\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        dt.Delegator storage d = validator.delegators[_delAddr];\\r\\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\\r\\n\\r\\n        uint256 undelegationShares;\\r\\n        uint256 withdrawableUndelegationShares;\\r\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\r\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\r\\n        uint256 len = d.undelegations.tail - d.undelegations.head;\\r\\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\\r\\n            undelegationShares += undelegations[i].shares;\\r\\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\\r\\n                withdrawableUndelegationShares += undelegations[i].shares;\\r\\n            }\\r\\n        }\\r\\n        uint256 undelegationTokens = _shareToToken(\\r\\n            undelegationShares,\\r\\n            validator.undelegationTokens,\\r\\n            validator.undelegationShares\\r\\n        );\\r\\n        uint256 withdrawableUndelegationTokens = _shareToToken(\\r\\n            withdrawableUndelegationShares,\\r\\n            validator.undelegationTokens,\\r\\n            validator.undelegationShares\\r\\n        );\\r\\n\\r\\n        return\\r\\n            dt.DelegatorInfo(\\r\\n                _valAddr,\\r\\n                tokens,\\r\\n                d.shares,\\r\\n                undelegations,\\r\\n                undelegationTokens,\\r\\n                withdrawableUndelegationTokens\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the value of a specific uint parameter\\r\\n     * @param _name the key of this parameter\\r\\n     * @return the value of this parameter\\r\\n     */\\r\\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\\r\\n        return params[_name];\\r\\n    }\\r\\n\\r\\n    /*********************\\r\\n     * Private Functions *\\r\\n     *********************/\\r\\n\\r\\n    function _undelegate(\\r\\n        dt.Validator storage validator,\\r\\n        address _valAddr,\\r\\n        uint256 _tokens,\\r\\n        uint256 _shares\\r\\n    ) private {\\r\\n        address delAddr = msg.sender;\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n        delegator.shares -= _shares;\\r\\n        validator.shares -= _shares;\\r\\n        validator.tokens -= _tokens;\\r\\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\\r\\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\\r\\n            validator.shares -= delegator.shares;\\r\\n            delegator.shares = 0;\\r\\n        }\\r\\n        require(delegator.shares == 0 || delegator.shares >= dt.XQST_DECIMAL, \\\"not enough remaining shares\\\");\\r\\n\\r\\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\\r\\n            XQUBESWAP_TOKEN.safeTransfer(delAddr, _tokens);\\r\\n            emit Undelegated(_valAddr, delAddr, _tokens);\\r\\n            return;\\r\\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens -= _tokens;\\r\\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\\r\\n                _unbondValidator(_valAddr);\\r\\n            }\\r\\n        }\\r\\n        require(\\r\\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\\r\\n            \\\"Exceed max undelegation entries\\\"\\r\\n        );\\r\\n\\r\\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\\r\\n        validator.undelegationShares += undelegationShares;\\r\\n        validator.undelegationTokens += _tokens;\\r\\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\\r\\n        undelegation.shares = undelegationShares;\\r\\n        undelegation.creationBlock = block.number;\\r\\n        delegator.undelegations.tail++;\\r\\n\\r\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set validator to bonded\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _setBondedValidator(address _valAddr) private {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        validator.status = dt.ValidatorStatus.Bonded;\\r\\n        delete validator.unbondBlock;\\r\\n        bondedTokens += validator.tokens;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set validator to unbonding\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _setUnbondingValidator(address _valAddr) private {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        validator.status = dt.ValidatorStatus.Unbonding;\\r\\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\\r\\n        bondedTokens -= validator.tokens;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Bond a validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _bondValidator(address _valAddr) private {\\r\\n        bondedValAddrs.push(_valAddr);\\r\\n        _setBondedValidator(_valAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Replace a bonded validator\\r\\n     * @param _valAddr the address of the new validator\\r\\n     * @param _index the index of the validator to be replaced\\r\\n     */\\r\\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\\r\\n        _setUnbondingValidator(bondedValAddrs[_index]);\\r\\n        bondedValAddrs[_index] = _valAddr;\\r\\n        _setBondedValidator(_valAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unbond a validator\\r\\n     * @param _valAddr validator to be removed\\r\\n     */\\r\\n    function _unbondValidator(address _valAddr) private {\\r\\n        uint256 lastIndex = bondedValAddrs.length - 1;\\r\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\r\\n            if (bondedValAddrs[i] == _valAddr) {\\r\\n                if (i < lastIndex) {\\r\\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\\r\\n                }\\r\\n                bondedValAddrs.pop();\\r\\n                _setUnbondingValidator(_valAddr);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Not bonded validator\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if one validator has too much power\\r\\n     * @param _valTokens token amounts of the validator\\r\\n     */\\r\\n    function _decentralizationCheck(uint256 _valTokens) private view {\\r\\n        uint256 bondedValNum = bondedValAddrs.length;\\r\\n        if (bondedValNum == 2 || bondedValNum == 3) {\\r\\n            require(_valTokens < getQuorumTokens(), \\\"Single validator should not have quorum tokens\\\");\\r\\n        } else if (bondedValNum > 3) {\\r\\n            require(_valTokens < bondedTokens / 3, \\\"Single validator should not have 1/3 tokens\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert token to share\\r\\n     */\\r\\n    function _tokenToShare(\\r\\n        uint256 tokens,\\r\\n        uint256 totalTokens,\\r\\n        uint256 totalShares\\r\\n    ) private pure returns (uint256) {\\r\\n        if (totalTokens == 0) {\\r\\n            return tokens;\\r\\n        }\\r\\n        return (tokens * totalShares) / totalTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert share to token\\r\\n     */\\r\\n    function _shareToToken(\\r\\n        uint256 shares,\\r\\n        uint256 totalTokens,\\r\\n        uint256 totalShares\\r\\n    ) private pure returns (uint256) {\\r\\n        if (totalShares == 0) {\\r\\n            return shares;\\r\\n        }\\r\\n        return (shares * totalTokens) / totalShares;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x786d8da75bf9302eb98ed2276777fb93bad6d62c68d938d57622d6ea0d366728\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620015a8380380620015a883398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c05161147a6200012e600039600081816101da0152610610015260008181610214015281816105ed0152818161093e0152610ba30152600081816101040152818161026b01528181610643015281816108c101528181610a180152610add015261147a6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806382d7b4b811610081578063934a18ec1161005b578063934a18ec146101fc578063e144aba51461020f578063e478ed9d1461023657600080fd5b806382d7b4b8146101c45780638338f0e5146101cc578063913e77ad146101d557600080fd5b80634cf088d9116100b25780634cf088d9146100ff578063581c53c51461013e5780637e5fb8f31461015e57600080fd5b806322da7927146100ce57806325ed6b35146100ea575b600080fd5b6100d760015481565b6040519081526020015b60405180910390f35b6100fd6100f8366004610f90565b610249565b005b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e1565b61015161014c366004610fd5565b61055c565b6040516100e19190611024565b6101b261016c366004611032565b6000602081905290815260409020805460018201546002830154600384015460048501546005909501546001600160a01b03909416949293919260ff9182169290911686565b6040516100e19695949392919061105b565b6100fd61058a565b6100d760025481565b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6100fd61020a366004611032565b61063c565b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6102443660046110ad565b6109dc565b33600360405163a310624f60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a310624f90602401602060405180830381865afa1580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906110dd565b60038111156102e7576102e7610ffa565b146103395760405162461bcd60e51b815260206004820152601f60248201527f566f746572206973206e6f74206120626f6e6465642076616c696461746f720060448201526064015b60405180910390fd5b60008381526020819052604090206001600582015460ff16600281111561036257610362610ffa565b146103af5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f706f73616c207374617475730000000000000000006044820152606401610330565b806002015443106104025760405162461bcd60e51b815260206004820152601460248201527f566f746520646561646c696e65207061737365640000000000000000000000006044820152606401610330565b6001600160a01b038216600090815260068201602052604081205460ff16600381111561043157610431610ffa565b1461047e5760405162461bcd60e51b815260206004820152600f60248201527f566f7465722068617320766f74656400000000000000000000000000000000006044820152606401610330565b600083600381111561049257610492610ffa565b036104df5760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420766f746500000000000000000000000000000000000000006044820152606401610330565b6001600160a01b03821660009081526006820160205260409020805484919060ff1916600183600381111561051657610516610ffa565b02179055507f06c7ef6e19454637e93ee60cc680c61fb2ebabb57e58cf36d94141a5036b3d6584838560405161054e939291906110fa565b60405180910390a150505050565b6000828152602081815260408083206001600160a01b038516845260060190915290205460ff165b92915050565b6000600254116105dc5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610330565b600254610635906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f000000000000000000000000000000000000000000000000000000000000000090610c2c565b6000600255565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634021d4d56040518163ffffffff1660e01b8152600401600060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106c7919081019061118d565b905060005b81518163ffffffff16101561079557600161070a86848463ffffffff16815181106106f9576106f9611263565b60200260200101516000015161055c565b600381111561071b5761071b610ffa565b0361075257818163ffffffff168151811061073857610738611263565b6020026020010151602001518461074f919061128f565b93505b818163ffffffff168151811061076a5761076a611263565b60200260200101516020015183610781919061128f565b92508061078d816112a2565b9150506106cc565b50600060036107a58460026112c5565b6107af91906112dc565b6107ba90600161128f565b60008681526020819052604090209085101591506001600582015460ff1660028111156107e9576107e9610ffa565b146108365760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f706f73616c207374617475730000000000000000006044820152606401610330565b806002015443101561088a5760405162461bcd60e51b815260206004820152601960248201527f566f746520646561646c696e65206e6f742072656163686564000000000000006044820152606401610330565b60058101805460ff19166002179055811561096f57600381015460048083015460405163e909156d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363e909156d936108f89360ff90921692016112fe565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b50508254600184015461096a93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935090911690610c2c565b61098b565b806001015460026000828254610985919061128f565b90915550505b600381015460048201546040517fd0d659ab2c0f954d2f29cf2e13d8ff2e15e147f3424eb205a079c4caa6bfe1a9926109cc928a92879260ff169190611319565b60405180910390a1505050505050565b600180546000818152602081905260409020916109f9919061128f565b600155604051631042b80b60e21b815233906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063410ae02c90610a4d908490600401611344565b602060405180830381865afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611352565b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038481169190911785556001808601839055604051631042b80b60e21b81529293507f00000000000000000000000000000000000000000000000000000000000000009091169163410ae02c91610b1291600401611344565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b539190611352565b610b5d904361128f565b600284015560038301805486919060ff19166001836008811115610b8357610b83610ffa565b02179055506004830184905560058301805460ff19166001179055610bd37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316833084610cc1565b7f4a4d354dbdc4d7b757c1f44b6e074bb6e1afe33f4b9867ce48cfb7004d76f16060018054610c02919061136b565b838386600201548989604051610c1d9695949392919061137e565b60405180910390a15050505050565b6040516001600160a01b038316602482015260448101829052610cbc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610cff565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610cf99085906323b872dd60e01b90608401610c58565b50505050565b6000610d54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610de49092919063ffffffff16565b805190915015610cbc5780806020019051810190610d7291906113af565b610cbc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610330565b6060610df38484600085610dfd565b90505b9392505050565b606082471015610e755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610330565b6001600160a01b0385163b610ecc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610330565b600080866001600160a01b03168587604051610ee891906113f5565b60006040518083038185875af1925050503d8060008114610f25576040519150601f19603f3d011682016040523d82523d6000602084013e610f2a565b606091505b5091509150610f3a828286610f47565b925050505b949350505050565b60608315610f56575081610df6565b825115610f665782518084602001fd5b8160405162461bcd60e51b81526004016103309190611411565b60048110610f8d57600080fd5b50565b60008060408385031215610fa357600080fd5b823591506020830135610fb581610f80565b809150509250929050565b6001600160a01b0381168114610f8d57600080fd5b60008060408385031215610fe857600080fd5b823591506020830135610fb581610fc0565b634e487b7160e01b600052602160045260246000fd5b6004811061102057611020610ffa565b9052565b602081016105848284611010565b60006020828403121561104457600080fd5b5035919050565b6009811061102057611020610ffa565b6001600160a01b0387168152602081018690526040810185905260c08101611086606083018661104b565b8360808301526003831061109c5761109c610ffa565b8260a0830152979650505050505050565b600080604083850312156110c057600080fd5b8235600981106110cf57600080fd5b946020939093013593505050565b6000602082840312156110ef57600080fd5b8151610df681610f80565b8381526001600160a01b038316602082015260608101610f3f6040830184611010565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156111565761115661111d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156111855761118561111d565b604052919050565b600060208083850312156111a057600080fd5b825167ffffffffffffffff808211156111b857600080fd5b818501915085601f8301126111cc57600080fd5b8151818111156111de576111de61111d565b6111ec848260051b0161115c565b818152848101925060069190911b83018401908782111561120c57600080fd5b928401925b81841015611258576040848903121561122a5760008081fd5b611232611133565b845161123d81610fc0565b81528486015186820152835260409093019291840191611211565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561058457610584611279565b600063ffffffff8083168181036112bb576112bb611279565b6001019392505050565b808202811582820484141761058457610584611279565b6000826112f957634e487b7160e01b600052601260045260246000fd5b500490565b6040810161130c828561104b565b8260208301529392505050565b848152831515602082015260808101611335604083018561104b565b82606083015295945050505050565b60208101610584828461104b565b60006020828403121561136457600080fd5b5051919050565b8181038181111561058457610584611279565b8681526001600160a01b0386166020820152604081018590526060810184905260c0810161109c608083018561104b565b6000602082840312156113c157600080fd5b81518015158114610df657600080fd5b60005b838110156113ec5781810151838201526020016113d4565b50506000910152565b600082516114078184602087016113d1565b9190910192915050565b60208152600082518060208401526114308160408501602087016113d1565b601f01601f1916919091016040019291505056fea2646970667358221220b9144974abd7decb3a133f30457d62f6f12fac8a21edacc7d60981fdc0781c6e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806382d7b4b811610081578063934a18ec1161005b578063934a18ec146101fc578063e144aba51461020f578063e478ed9d1461023657600080fd5b806382d7b4b8146101c45780638338f0e5146101cc578063913e77ad146101d557600080fd5b80634cf088d9116100b25780634cf088d9146100ff578063581c53c51461013e5780637e5fb8f31461015e57600080fd5b806322da7927146100ce57806325ed6b35146100ea575b600080fd5b6100d760015481565b6040519081526020015b60405180910390f35b6100fd6100f8366004610f90565b610249565b005b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e1565b61015161014c366004610fd5565b61055c565b6040516100e19190611024565b6101b261016c366004611032565b6000602081905290815260409020805460018201546002830154600384015460048501546005909501546001600160a01b03909416949293919260ff9182169290911686565b6040516100e19695949392919061105b565b6100fd61058a565b6100d760025481565b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6100fd61020a366004611032565b61063c565b6101267f000000000000000000000000000000000000000000000000000000000000000081565b6100fd6102443660046110ad565b6109dc565b33600360405163a310624f60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a310624f90602401602060405180830381865afa1580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906110dd565b60038111156102e7576102e7610ffa565b146103395760405162461bcd60e51b815260206004820152601f60248201527f566f746572206973206e6f74206120626f6e6465642076616c696461746f720060448201526064015b60405180910390fd5b60008381526020819052604090206001600582015460ff16600281111561036257610362610ffa565b146103af5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f706f73616c207374617475730000000000000000006044820152606401610330565b806002015443106104025760405162461bcd60e51b815260206004820152601460248201527f566f746520646561646c696e65207061737365640000000000000000000000006044820152606401610330565b6001600160a01b038216600090815260068201602052604081205460ff16600381111561043157610431610ffa565b1461047e5760405162461bcd60e51b815260206004820152600f60248201527f566f7465722068617320766f74656400000000000000000000000000000000006044820152606401610330565b600083600381111561049257610492610ffa565b036104df5760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420766f746500000000000000000000000000000000000000006044820152606401610330565b6001600160a01b03821660009081526006820160205260409020805484919060ff1916600183600381111561051657610516610ffa565b02179055507f06c7ef6e19454637e93ee60cc680c61fb2ebabb57e58cf36d94141a5036b3d6584838560405161054e939291906110fa565b60405180910390a150505050565b6000828152602081815260408083206001600160a01b038516845260060190915290205460ff165b92915050565b6000600254116105dc5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610330565b600254610635906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f000000000000000000000000000000000000000000000000000000000000000090610c2c565b6000600255565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634021d4d56040518163ffffffff1660e01b8152600401600060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106c7919081019061118d565b905060005b81518163ffffffff16101561079557600161070a86848463ffffffff16815181106106f9576106f9611263565b60200260200101516000015161055c565b600381111561071b5761071b610ffa565b0361075257818163ffffffff168151811061073857610738611263565b6020026020010151602001518461074f919061128f565b93505b818163ffffffff168151811061076a5761076a611263565b60200260200101516020015183610781919061128f565b92508061078d816112a2565b9150506106cc565b50600060036107a58460026112c5565b6107af91906112dc565b6107ba90600161128f565b60008681526020819052604090209085101591506001600582015460ff1660028111156107e9576107e9610ffa565b146108365760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f706f73616c207374617475730000000000000000006044820152606401610330565b806002015443101561088a5760405162461bcd60e51b815260206004820152601960248201527f566f746520646561646c696e65206e6f742072656163686564000000000000006044820152606401610330565b60058101805460ff19166002179055811561096f57600381015460048083015460405163e909156d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363e909156d936108f89360ff90921692016112fe565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b50508254600184015461096a93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935090911690610c2c565b61098b565b806001015460026000828254610985919061128f565b90915550505b600381015460048201546040517fd0d659ab2c0f954d2f29cf2e13d8ff2e15e147f3424eb205a079c4caa6bfe1a9926109cc928a92879260ff169190611319565b60405180910390a1505050505050565b600180546000818152602081905260409020916109f9919061128f565b600155604051631042b80b60e21b815233906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063410ae02c90610a4d908490600401611344565b602060405180830381865afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611352565b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038481169190911785556001808601839055604051631042b80b60e21b81529293507f00000000000000000000000000000000000000000000000000000000000000009091169163410ae02c91610b1291600401611344565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b539190611352565b610b5d904361128f565b600284015560038301805486919060ff19166001836008811115610b8357610b83610ffa565b02179055506004830184905560058301805460ff19166001179055610bd37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316833084610cc1565b7f4a4d354dbdc4d7b757c1f44b6e074bb6e1afe33f4b9867ce48cfb7004d76f16060018054610c02919061136b565b838386600201548989604051610c1d9695949392919061137e565b60405180910390a15050505050565b6040516001600160a01b038316602482015260448101829052610cbc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610cff565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610cf99085906323b872dd60e01b90608401610c58565b50505050565b6000610d54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610de49092919063ffffffff16565b805190915015610cbc5780806020019051810190610d7291906113af565b610cbc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610330565b6060610df38484600085610dfd565b90505b9392505050565b606082471015610e755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610330565b6001600160a01b0385163b610ecc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610330565b600080866001600160a01b03168587604051610ee891906113f5565b60006040518083038185875af1925050503d8060008114610f25576040519150601f19603f3d011682016040523d82523d6000602084013e610f2a565b606091505b5091509150610f3a828286610f47565b925050505b949350505050565b60608315610f56575081610df6565b825115610f665782518084602001fd5b8160405162461bcd60e51b81526004016103309190611411565b60048110610f8d57600080fd5b50565b60008060408385031215610fa357600080fd5b823591506020830135610fb581610f80565b809150509250929050565b6001600160a01b0381168114610f8d57600080fd5b60008060408385031215610fe857600080fd5b823591506020830135610fb581610fc0565b634e487b7160e01b600052602160045260246000fd5b6004811061102057611020610ffa565b9052565b602081016105848284611010565b60006020828403121561104457600080fd5b5035919050565b6009811061102057611020610ffa565b6001600160a01b0387168152602081018690526040810185905260c08101611086606083018661104b565b8360808301526003831061109c5761109c610ffa565b8260a0830152979650505050505050565b600080604083850312156110c057600080fd5b8235600981106110cf57600080fd5b946020939093013593505050565b6000602082840312156110ef57600080fd5b8151610df681610f80565b8381526001600160a01b038316602082015260608101610f3f6040830184611010565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156111565761115661111d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156111855761118561111d565b604052919050565b600060208083850312156111a057600080fd5b825167ffffffffffffffff808211156111b857600080fd5b818501915085601f8301126111cc57600080fd5b8151818111156111de576111de61111d565b6111ec848260051b0161115c565b818152848101925060069190911b83018401908782111561120c57600080fd5b928401925b81841015611258576040848903121561122a5760008081fd5b611232611133565b845161123d81610fc0565b81528486015186820152835260409093019291840191611211565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561058457610584611279565b600063ffffffff8083168181036112bb576112bb611279565b6001019392505050565b808202811582820484141761058457610584611279565b6000826112f957634e487b7160e01b600052601260045260246000fd5b500490565b6040810161130c828561104b565b8260208301529392505050565b848152831515602082015260808101611335604083018561104b565b82606083015295945050505050565b60208101610584828461104b565b60006020828403121561136457600080fd5b5051919050565b8181038181111561058457610584611279565b8681526001600160a01b0386166020820152604081018590526060810184905260c0810161109c608083018561104b565b6000602082840312156113c157600080fd5b81518015158114610df657600080fd5b60005b838110156113ec5781810151838201526020016113d4565b50506000910152565b600082516114078184602087016113d1565b9190910192915050565b60208152600082518060208401526114308160408501602087016113d1565b601f01601f1916919091016040019291505056fea2646970667358221220b9144974abd7decb3a133f30457d62f6f12fac8a21edacc7d60981fdc0781c6e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "confirmParamProposal(uint256)": {
        "params": {
          "_proposalId": "the id of the parameter proposal"
        }
      },
      "createParamProposal(uint8,uint256)": {
        "params": {
          "_name": "the key of this parameter",
          "_value": "the new proposed value of this parameter"
        }
      },
      "getParamProposalVote(uint256,address)": {
        "params": {
          "_proposalId": "the proposal id",
          "_voter": "the voter address"
        },
        "returns": {
          "_0": "the vote type of the given voter on the given parameter proposal"
        }
      },
      "voteParam(uint256,uint8)": {
        "params": {
          "_proposalId": "the id of the parameter proposal",
          "_vote": "the type of vote"
        }
      }
    },
    "title": "Governance module for Staking contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "confirmParamProposal(uint256)": {
        "notice": "Confirm a parameter proposal"
      },
      "createParamProposal(uint8,uint256)": {
        "notice": "Create a parameter proposal"
      },
      "getParamProposalVote(uint256,address)": {
        "notice": "Get the vote type of a voter on a parameter proposal"
      },
      "voteParam(uint256,uint8)": {
        "notice": "Vote for a parameter proposal with a specific type of vote"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37969,
        "contract": "contracts/staking/Govern.sol:Govern",
        "label": "paramProposals",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ParamProposal)37964_storage)"
      },
      {
        "astId": 37971,
        "contract": "contracts/staking/Govern.sol:Govern",
        "label": "nextParamProposalId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 37973,
        "contract": "contracts/staking/Govern.sol:Govern",
        "label": "forfeiture",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(ParamName)37832": {
        "encoding": "inplace",
        "label": "enum DataTypes.ParamName",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalStatus)37939": {
        "encoding": "inplace",
        "label": "enum Govern.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(VoteOption)37944": {
        "encoding": "inplace",
        "label": "enum Govern.VoteOption",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(VoteOption)37944)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Govern.VoteOption)",
        "numberOfBytes": "32",
        "value": "t_enum(VoteOption)37944"
      },
      "t_mapping(t_uint256,t_struct(ParamProposal)37964_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Govern.ParamProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(ParamProposal)37964_storage"
      },
      "t_struct(ParamProposal)37964_storage": {
        "encoding": "inplace",
        "label": "struct Govern.ParamProposal",
        "members": [
          {
            "astId": 37946,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 37948,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 37950,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "voteDeadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 37953,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(ParamName)37832"
          },
          {
            "astId": 37955,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "newValue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 37958,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ProposalStatus)37939"
          },
          {
            "astId": 37963,
            "contract": "contracts/staking/Govern.sol:Govern",
            "label": "votes",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_enum(VoteOption)37944)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}