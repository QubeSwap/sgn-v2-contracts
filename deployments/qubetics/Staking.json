{
  "address": "0x1705a771B1dBaeC22beF7efE8e196642619A3faf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xqsTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unbondingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBondedValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minValidatorTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_advanceNoticePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBondInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlashFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tokenDiff",
          "type": "int256"
        }
      ],
      "name": "DelegationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashAmt",
          "type": "uint256"
        }
      ],
      "name": "Slash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SlashAmtCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "ValidatorNotice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "ValidatorStatusUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "XQUBESWAP_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondedValAddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectForfeiture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "completeUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "confirmUnbondedValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeiture",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondedValidatorNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondedValidatorsTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "valAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ValidatorTokens[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delAddr",
          "type": "address"
        }
      ],
      "name": "getDelegatorInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "valAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "creationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.Undelegation[]",
              "name": "undelegations",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "undelegationTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawableUndelegationTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelegatorInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "_name",
          "type": "uint8"
        }
      ],
      "name": "getParamValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorumTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "getValidatorStatus",
      "outputs": [
        {
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "getValidatorTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_checkSelfDelegation",
          "type": "bool"
        }
      ],
      "name": "hasMinRequiredTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_commissionRate",
          "type": "uint64"
        }
      ],
      "name": "initializeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBondedValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBondBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setGovContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSlashFactor",
          "type": "uint256"
        }
      ],
      "name": "setMaxSlashFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "_name",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setParamValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRewardContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_whitelistEnabled",
          "type": "bool"
        }
      ],
      "name": "setWhitelistEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerVals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_slashRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slashNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "undelegateShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "undelegateTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newRate",
          "type": "uint64"
        }
      ],
      "name": "updateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        }
      ],
      "name": "updateMinSelfDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "updateValidatorSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "valAddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validatorNotice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undelegationTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undelegationShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "bondBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "unbondBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "commissionRate",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "verifySigs",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe83199be641020657b42b3e95783512e25d225d461506070ce4bc0a3efefa6ff",
  "receipt": {
    "to": null,
    "from": "0x46eE49e5688082C6F0f18f2504b5FcC1bd5244c0",
    "contractAddress": "0x1705a771B1dBaeC22beF7efE8e196642619A3faf",
    "transactionIndex": 0,
    "gasUsed": "5557522",
    "logsBloom": "0x
    "blockHash": "0x064b7e89b85a3569419f7c35753ccb5a4d3ef7b18a1cbac0a4d1a4b0132d88b3",
    "transactionHash": "0xe83199be641020657b42b3e95783512e25d225d461506070ce4bc0a3efefa6ff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1953734,
        "transactionHash": "0xe83199be641020657b42b3e95783512e25d225d461506070ce4bc0a3efefa6ff",
        "address": "0x1705a771B1dBaeC22beF7efE8e196642619A3faf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x064b7e89b85a3569419f7c35753ccb5a4d3ef7b18a1cbac0a4d1a4b0132d88b3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1953734,
        "transactionHash": "0xe83199be641020657b42b3e95783512e25d225d461506070ce4bc0a3efefa6ff",
        "address": "0x1705a771B1dBaeC22beF7efE8e196642619A3faf",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000046ee49e5688082c6f0f18f2504b5fcc1bd5244c0",
        "logIndex": 1,
        "blockHash": "0x064b7e89b85a3569419f7c35753ccb5a4d3ef7b18a1cbac0a4d1a4b0132d88b3"
      }
    ],
    "blockNumber": 1953734,
    "cumulativeGasUsed": "5557522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EafACBeCD3B605506e0D4Bd9B5d0C7A9328669b",
    "10000000000000000000",
    "300",
    "300",
    "25",
    "10000000000000000000000",
    "10000000000000000000000",
    "30",
    "30",
    "10"
  ],
  "numDeployments": 1,
  "solcInputHash": "599f975210cdab3113358d43cb6a3e35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xqsTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBondedValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minValidatorTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_advanceNoticePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBondInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlashFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tokenDiff\",\"type\":\"int256\"}],\"name\":\"DelegationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmt\",\"type\":\"uint256\"}],\"name\":\"Slash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashAmtCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ValidatorNotice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ValidatorStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XQUBESWAP_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondedValAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectForfeiture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"completeUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"confirmUnbondedValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeiture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondedValidatorNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondedValidatorsTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ValidatorTokens[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delAddr\",\"type\":\"address\"}],\"name\":\"getDelegatorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Undelegation[]\",\"name\":\"undelegations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"undelegationTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableUndelegationTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelegatorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"_name\",\"type\":\"uint8\"}],\"name\":\"getParamValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"getValidatorStatus\",\"outputs\":[{\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"getValidatorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_checkSelfDelegation\",\"type\":\"bool\"}],\"name\":\"hasMinRequiredTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_commissionRate\",\"type\":\"uint64\"}],\"name\":\"initializeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBondedValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGovContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlashFactor\",\"type\":\"uint256\"}],\"name\":\"setMaxSlashFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"_name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setParamValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerVals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_slashRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"undelegateShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"undelegateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newRate\",\"type\":\"uint64\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"}],\"name\":\"updateMinSelfDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"updateValidatorSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validatorNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undelegationTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undelegationShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"bondBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unbondBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"commissionRate\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"verifySigs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondValidator()\":{\"details\":\"caller can be either validator owner or signer\"},\"completeUndelegate(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"}},\"confirmUnbondedValidator(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"}},\"constructor\":{\"params\":{\"_advanceNoticePeriod\":\"the wait time after the announcement and prior to the effective date of an update\",\"_maxBondedValidators\":\"the maximum number of bonded validators\",\"_maxSlashFactor\":\"maximal slashing factor (1e6 = 100%)\",\"_minSelfDelegation\":\"minimal amount of self-delegated tokens\",\"_minValidatorTokens\":\"the global minimum token amount requirement for bonded validator\",\"_proposalDeposit\":\"required deposit amount for a governance proposal\",\"_unbondingPeriod\":\"the locking time for funds locked before withdrawn\",\"_validatorBondInterval\":\"min interval between bondValidator\",\"_votingPeriod\":\"voting timeout for a governance proposal\",\"_xqsTokenAddress\":\"address of Celer Token Contract\"}},\"delegate(address,uint256)\":{\"details\":\"Minimal amount per delegate operation is 1 XQST\",\"params\":{\"_tokens\":\"the amount of delegated XQST tokens\",\"_valAddr\":\"validator to delegate\"}},\"drainToken(uint256)\":{\"details\":\"emergency use only\",\"params\":{\"_amount\":\"drained token amount\"}},\"getBondedValidatorNum()\":{\"returns\":{\"_0\":\"the number of bonded validators\"}},\"getBondedValidatorsTokens()\":{\"returns\":{\"_0\":\"addresses and token amounts of bonded validators\"}},\"getDelegatorInfo(address,address)\":{\"params\":{\"_delAddr\":\"the address of the delegator\",\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"DelegatorInfo from the given validator\"}},\"getParamValue(uint8)\":{\"params\":{\"_name\":\"the key of this parameter\"},\"returns\":{\"_0\":\"the value of this parameter\"}},\"getQuorumTokens()\":{\"returns\":{\"_0\":\"the quorum amount\"}},\"getValidatorNum()\":{\"returns\":{\"_0\":\"the number of validators\"}},\"getValidatorStatus(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"Validator status\"}},\"getValidatorTokens(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"Validator token amount\"}},\"hasMinRequiredTokens(address,bool)\":{\"params\":{\"_checkSelfDelegation\":\"check self delegation\",\"_valAddr\":\"the address of the validator\"}},\"initializeValidator(address,uint256,uint64)\":{\"params\":{\"_commissionRate\":\"the self-declaimed commission rate\",\"_minSelfDelegation\":\"minimal amount of tokens staked by the validator itself\",\"_signer\":\"signer address\"}},\"isBondedValidator(address)\":{\"params\":{\"_addr\":\"the address to check\"},\"returns\":{\"_0\":\"the given address is a validator or not\"}},\"isWhitelisted(address)\":{\"returns\":{\"_0\":\"is account whitelisted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"slash(bytes,bytes[])\":{\"params\":{\"_sigs\":\"list of validator signatures\",\"_slashRequest\":\"slash request bytes coded in protobuf\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"undelegateShares(address,uint256)\":{\"details\":\"Tokens are delegated by the msgSender to the validator\",\"params\":{\"_shares\":\"undelegate shares\",\"_valAddr\":\"the address of the validator\"}},\"undelegateTokens(address,uint256)\":{\"details\":\"Tokens are delegated by the msgSender to the validator\",\"params\":{\"_tokens\":\"undelegate tokens\",\"_valAddr\":\"the address of the validator\"}},\"updateCommissionRate(uint64)\":{\"params\":{\"_newRate\":\"new commission rate\"}},\"updateMinSelfDelegation(uint256)\":{\"params\":{\"_minSelfDelegation\":\"minimal amount of tokens staked by the validator itself\"}},\"updateValidatorSigner(address)\":{\"params\":{\"_signer\":\"signer address\"}},\"verifySignatures(bytes,bytes[])\":{\"params\":{\"_msg\":\"signed message\",\"_sigs\":\"list of validator signatures\"}},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_msg\":\"signed message\",\"_sigs\":\"the list of signatures\"}}},\"title\":\"A Staking contract shared by all external sidechains and apps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelisted(address)\":{\"notice\":\"Add an account to whitelist\"},\"bondValidator()\":{\"notice\":\"Candidate claims to become a bonded validator\"},\"completeUndelegate(address)\":{\"notice\":\"Complete pending undelegations from a validator\"},\"confirmUnbondedValidator(address)\":{\"notice\":\"Confirm validator status from Unbonding to Unbonded\"},\"constructor\":{\"notice\":\"Staking constructor\"},\"delegate(address,uint256)\":{\"notice\":\"Delegate XQST tokens to a validator\"},\"drainToken(uint256)\":{\"notice\":\"Owner drains tokens when the contract is paused\"},\"getBondedValidatorNum()\":{\"notice\":\"Get the number of bonded validators\"},\"getDelegatorInfo(address,address)\":{\"notice\":\"Get the delegator info of a specific validator\"},\"getParamValue(uint8)\":{\"notice\":\"Get the value of a specific uint parameter\"},\"getQuorumTokens()\":{\"notice\":\"Get quorum amount of tokens\"},\"getValidatorNum()\":{\"notice\":\"Get the number of validators\"},\"getValidatorStatus(address)\":{\"notice\":\"Get validator info\"},\"getValidatorTokens(address)\":{\"notice\":\"Get validator info\"},\"hasMinRequiredTokens(address,bool)\":{\"notice\":\"Check if min token requirements are met\"},\"initializeValidator(address,uint256,uint64)\":{\"notice\":\"Initialize a validator candidate\"},\"isBondedValidator(address)\":{\"notice\":\"Check the given address is a validator or not\"},\"removeWhitelisted(address)\":{\"notice\":\"Remove an account from whitelist\"},\"setMaxSlashFactor(uint256)\":{\"notice\":\"Set max slash factor\"},\"setWhitelistEnabled(bool)\":{\"notice\":\"Set whitelistEnabled\"},\"slash(bytes,bytes[])\":{\"notice\":\"Slash a validator and its delegators\"},\"undelegateShares(address,uint256)\":{\"notice\":\"Undelegate shares from a validator\"},\"undelegateTokens(address,uint256)\":{\"notice\":\"Undelegate shares from a validator\"},\"updateCommissionRate(uint64)\":{\"notice\":\"Update commission rate\"},\"updateMinSelfDelegation(uint256)\":{\"notice\":\"Update minimal self delegation value\"},\"updateValidatorSigner(address)\":{\"notice\":\"Update validator signer address\"},\"validatorNotice(address,string,bytes)\":{\"notice\":\"Validator notice event, could be triggered by anyone\"},\"verifySignatures(bytes,bytes[])\":{\"notice\":\"Validate if a message is signed by quorum tokens\"},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Verifies that a message is signed by a quorum among the validators.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ISigsVerifier {\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\r\\n     * @param _signers sorted list of current signers\\r\\n     * @param _powers powers of current signers\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata _signers,\\r\\n        uint256[] calldata _powers\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x64957c1004af8c9a8fe54ad5fdba6e8af24a75f92bf77e7eefe71b1f39926f4c\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// runtime proto sol library\\r\\nlibrary Pb {\\r\\n    enum WireType {\\r\\n        Varint,\\r\\n        Fixed64,\\r\\n        LengthDelim,\\r\\n        StartGroup,\\r\\n        EndGroup,\\r\\n        Fixed32\\r\\n    }\\r\\n\\r\\n    struct Buffer {\\r\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\r\\n        bytes b; // hold serialized proto msg, readonly\\r\\n    }\\r\\n\\r\\n    // create a new in-memory Buffer object from raw msg bytes\\r\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\r\\n        buf.b = raw;\\r\\n        buf.idx = 0;\\r\\n    }\\r\\n\\r\\n    // whether there are unread bytes\\r\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\r\\n        return buf.idx < buf.b.length;\\r\\n    }\\r\\n\\r\\n    // decode current field number and wiretype\\r\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\r\\n        uint256 v = decVarint(buf);\\r\\n        tag = v / 8;\\r\\n        wiretype = WireType(v & 7);\\r\\n    }\\r\\n\\r\\n    // count tag occurrences, return an array due to no memory map support\\r\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\r\\n    // should keep buf.idx unchanged because this is only a count function\\r\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\r\\n        uint256 originalIdx = buf.idx;\\r\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\r\\n        uint256 tag;\\r\\n        WireType wire;\\r\\n        while (hasMore(buf)) {\\r\\n            (tag, wire) = decKey(buf);\\r\\n            cnts[tag] += 1;\\r\\n            skipValue(buf, wire);\\r\\n        }\\r\\n        buf.idx = originalIdx;\\r\\n    }\\r\\n\\r\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\r\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\r\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\r\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\r\\n        v = buf.idx; // use v to save one additional uint variable\\r\\n        assembly {\\r\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\r\\n        }\\r\\n        uint256 b; // store current byte content\\r\\n        v = 0; // reset to 0 for return value\\r\\n        for (uint256 i = 0; i < 10; i++) {\\r\\n            assembly {\\r\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\r\\n            }\\r\\n            v |= (b & 0x7F) << (i * 7);\\r\\n            if (b & 0x80 == 0) {\\r\\n                buf.idx += i + 1;\\r\\n                return v;\\r\\n            }\\r\\n        }\\r\\n        revert(); // i=10, invalid varint stream\\r\\n    }\\r\\n\\r\\n    // read length delimited field and return bytes\\r\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        b = new bytes(len);\\r\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\r\\n        uint256 bStart;\\r\\n        uint256 bufBStart = buf.idx;\\r\\n        assembly {\\r\\n            bStart := add(b, 32)\\r\\n            bufBStart := add(add(bufB, 32), bufBStart)\\r\\n        }\\r\\n        for (uint256 i = 0; i < len; i += 32) {\\r\\n            assembly {\\r\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\r\\n            }\\r\\n        }\\r\\n        buf.idx = end;\\r\\n    }\\r\\n\\r\\n    // return packed ints\\r\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\r\\n        uint256 len = decVarint(buf);\\r\\n        uint256 end = buf.idx + len;\\r\\n        require(end <= buf.b.length); // avoid overflow\\r\\n        // array in memory must be init w/ known length\\r\\n        // so we have to create a tmp array w/ max possible len first\\r\\n        uint256[] memory tmp = new uint256[](len);\\r\\n        uint256 i = 0; // count how many ints are there\\r\\n        while (buf.idx < end) {\\r\\n            tmp[i] = decVarint(buf);\\r\\n            i++;\\r\\n        }\\r\\n        t = new uint256[](i); // init t with correct length\\r\\n        for (uint256 j = 0; j < i; j++) {\\r\\n            t[j] = tmp[j];\\r\\n        }\\r\\n        return t;\\r\\n    }\\r\\n\\r\\n    // move idx pass current value field, to beginning of next tag or msg end\\r\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\r\\n        if (wire == WireType.Varint) {\\r\\n            decVarint(buf);\\r\\n        } else if (wire == WireType.LengthDelim) {\\r\\n            uint256 len = decVarint(buf);\\r\\n            buf.idx += len; // skip len bytes value data\\r\\n            require(buf.idx <= buf.b.length); // avoid overflow\\r\\n        } else {\\r\\n            revert();\\r\\n        } // unsupported wiretype\\r\\n    }\\r\\n\\r\\n    // type conversion help utils\\r\\n    function _bool(uint256 x) internal pure returns (bool v) {\\r\\n        return x != 0;\\r\\n    }\\r\\n\\r\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\r\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        } // load all 32bytes to v\\r\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\r\\n    }\\r\\n\\r\\n    function _address(bytes memory b) internal pure returns (address v) {\\r\\n        v = _addressPayable(b);\\r\\n    }\\r\\n\\r\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\r\\n        require(b.length == 20);\\r\\n        //load 32bytes then shift right 12 bytes\\r\\n        assembly {\\r\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\r\\n        require(b.length == 32);\\r\\n        assembly {\\r\\n            v := mload(add(b, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // uint[] to uint8[]\\r\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\r\\n        t = new uint8[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint8(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\r\\n        t = new uint32[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint32(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\r\\n        t = new uint64[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = uint64(arr[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\r\\n        t = new bool[](arr.length);\\r\\n        for (uint256 i = 0; i < t.length; i++) {\\r\\n            t[i] = arr[i] != 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x870ea11c2e01e1af41a0e2b4d78312d7fb3396810476ea16f9b6b0292ed29e78\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\r\\n// source: contracts/libraries/proto/staking.proto\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"./Pb.sol\\\";\\r\\n\\r\\nlibrary PbStaking {\\r\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\r\\n\\r\\n    struct StakingReward {\\r\\n        address recipient; // tag: 1\\r\\n        uint256 cumulativeRewardAmount; // tag: 2\\r\\n    } // end struct StakingReward\\r\\n\\r\\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.recipient = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder StakingReward\\r\\n\\r\\n    struct Slash {\\r\\n        address validator; // tag: 1\\r\\n        uint64 nonce; // tag: 2\\r\\n        uint64 slashFactor; // tag: 3\\r\\n        uint64 expireTime; // tag: 4\\r\\n        uint64 jailPeriod; // tag: 5\\r\\n        AcctAmtPair[] collectors; // tag: 6\\r\\n    } // end struct Slash\\r\\n\\r\\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256[] memory cnts = buf.cntTags(6);\\r\\n        m.collectors = new AcctAmtPair[](cnts[6]);\\r\\n        cnts[6] = 0; // reset counter for later use\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.validator = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.nonce = uint64(buf.decVarint());\\r\\n            } else if (tag == 3) {\\r\\n                m.slashFactor = uint64(buf.decVarint());\\r\\n            } else if (tag == 4) {\\r\\n                m.expireTime = uint64(buf.decVarint());\\r\\n            } else if (tag == 5) {\\r\\n                m.jailPeriod = uint64(buf.decVarint());\\r\\n            } else if (tag == 6) {\\r\\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\\r\\n                cnts[6]++;\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder Slash\\r\\n\\r\\n    struct AcctAmtPair {\\r\\n        address account; // tag: 1\\r\\n        uint256 amount; // tag: 2\\r\\n    } // end struct AcctAmtPair\\r\\n\\r\\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\\r\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\r\\n\\r\\n        uint256 tag;\\r\\n        Pb.WireType wire;\\r\\n        while (buf.hasMore()) {\\r\\n            (tag, wire) = buf.decKey();\\r\\n            if (false) {}\\r\\n            // solidity has no switch/case\\r\\n            else if (tag == 1) {\\r\\n                m.account = Pb._address(buf.decBytes());\\r\\n            } else if (tag == 2) {\\r\\n                m.amount = Pb._uint256(buf.decBytes());\\r\\n            } else {\\r\\n                buf.skipValue(wire);\\r\\n            } // skip value of unknown tag\\r\\n        }\\r\\n    } // end decoder AcctAmtPair\\r\\n}\\r\\n\",\"keccak256\":\"0xd7a1f57d9706ba27e0014d0f6afe682310809418161512aa8c443c0b1d719980\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n *\\r\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\r\\n * renounceOwnership. So we can support Proxy based upgradable contract\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\r\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\r\\n     * because constructor sets _owner in contract state.\\r\\n     */\\r\\n    function initOwner() internal {\\r\\n        require(_owner == address(0), \\\"owner already set\\\");\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa85eba884c4b3be9bada2125c59907854d553c63f6610a82eb595bd207f42c3\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Pauser is Ownable, Pausable {\\r\\n    mapping(address => bool) public pausers;\\r\\n\\r\\n    event PauserAdded(address account);\\r\\n    event PauserRemoved(address account);\\r\\n\\r\\n    constructor() {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() public onlyPauser {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyPauser {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return pausers[account];\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyOwner {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function removePauser(address account) public onlyOwner {\\r\\n        _removePauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) private {\\r\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\r\\n        pausers[account] = true;\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) private {\\r\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\r\\n        pausers[account] = false;\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e5dd7a6577d4d1e2cca7f4917472c6b12470672dba0a3592eb8ef0c2d0ab044\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract Whitelist is Ownable {\\r\\n    mapping(address => bool) public whitelist;\\r\\n    bool public whitelistEnabled;\\r\\n\\r\\n    event WhitelistedAdded(address account);\\r\\n    event WhitelistedRemoved(address account);\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        if (whitelistEnabled) {\\r\\n            require(isWhitelisted(msg.sender), \\\"Caller is not whitelisted\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set whitelistEnabled\\r\\n     */\\r\\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\\r\\n        whitelistEnabled = _whitelistEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add an account to whitelist\\r\\n     */\\r\\n    function addWhitelisted(address account) external onlyOwner {\\r\\n        require(!isWhitelisted(account), \\\"Already whitelisted\\\");\\r\\n        whitelist[account] = true;\\r\\n        emit WhitelistedAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove an account from whitelist\\r\\n     */\\r\\n    function removeWhitelisted(address account) external onlyOwner {\\r\\n        require(isWhitelisted(account), \\\"Not whitelisted\\\");\\r\\n        whitelist[account] = false;\\r\\n        emit WhitelistedRemoved(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return is account whitelisted\\r\\n     */\\r\\n    function isWhitelisted(address account) public view returns (bool) {\\r\\n        return whitelist[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdabba31e5c190b3cde996aef04565ed361046515d1767033a936dd10a0cb07ff\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    uint256 constant XQST_DECIMAL = 1e18;\\r\\n    uint256 constant MAX_INT = 2**256 - 1;\\r\\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\\r\\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\\r\\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\\r\\n\\r\\n    enum ValidatorStatus {\\r\\n        Null,\\r\\n        Unbonded,\\r\\n        Unbonding,\\r\\n        Bonded\\r\\n    }\\r\\n\\r\\n    enum ParamName {\\r\\n        ProposalDeposit,\\r\\n        VotingPeriod,\\r\\n        UnbondingPeriod,\\r\\n        MaxBondedValidators,\\r\\n        MinValidatorTokens,\\r\\n        MinSelfDelegation,\\r\\n        AdvanceNoticePeriod,\\r\\n        ValidatorBondInterval,\\r\\n        MaxSlashFactor\\r\\n    }\\r\\n\\r\\n    struct Undelegation {\\r\\n        uint256 shares;\\r\\n        uint256 creationBlock;\\r\\n    }\\r\\n\\r\\n    struct Undelegations {\\r\\n        mapping(uint256 => Undelegation) queue;\\r\\n        uint32 head;\\r\\n        uint32 tail;\\r\\n    }\\r\\n\\r\\n    struct Delegator {\\r\\n        uint256 shares;\\r\\n        Undelegations undelegations;\\r\\n    }\\r\\n\\r\\n    struct Validator {\\r\\n        ValidatorStatus status;\\r\\n        address signer;\\r\\n        uint256 tokens; // sum of all tokens delegated to this validator\\r\\n        uint256 shares; // sum of all delegation shares\\r\\n        uint256 undelegationTokens; // tokens being undelegated\\r\\n        uint256 undelegationShares; // shares of tokens being undelegated\\r\\n        mapping(address => Delegator) delegators;\\r\\n        uint256 minSelfDelegation;\\r\\n        uint64 bondBlock; // cannot become bonded before this block\\r\\n        uint64 unbondBlock; // cannot become unbonded before this block\\r\\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct ValidatorTokens {\\r\\n        address valAddr;\\r\\n        uint256 tokens;\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct ValidatorInfo {\\r\\n        address valAddr;\\r\\n        ValidatorStatus status;\\r\\n        address signer;\\r\\n        uint256 tokens;\\r\\n        uint256 shares;\\r\\n        uint256 minSelfDelegation;\\r\\n        uint64 commissionRate;\\r\\n    }\\r\\n\\r\\n    // used for external view output\\r\\n    struct DelegatorInfo {\\r\\n        address valAddr;\\r\\n        uint256 tokens;\\r\\n        uint256 shares;\\r\\n        Undelegation[] undelegations;\\r\\n        uint256 undelegationTokens;\\r\\n        uint256 withdrawableUndelegationTokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2a8bba135109d3ba0860985b08b94813318f1513e3de11c416da74df9577deb\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {DataTypes as dt} from \\\"./DataTypes.sol\\\";\\r\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\r\\nimport \\\"../libraries/PbStaking.sol\\\";\\r\\nimport \\\"../safeguard/Pauser.sol\\\";\\r\\nimport \\\"../safeguard/Whitelist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title A Staking contract shared by all external sidechains and apps\\r\\n */\\r\\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    IERC20 public immutable XQUBESWAP_TOKEN;\\r\\n\\r\\n    uint256 public bondedTokens;\\r\\n    uint256 public nextBondBlock;\\r\\n    address[] public valAddrs;\\r\\n    address[] public bondedValAddrs;\\r\\n    mapping(address => dt.Validator) public validators; // key is valAddr\\r\\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\\r\\n    mapping(uint256 => bool) public slashNonces;\\r\\n\\r\\n    mapping(dt.ParamName => uint256) public params;\\r\\n    address public govContract;\\r\\n    address public rewardContract;\\r\\n    uint256 public forfeiture;\\r\\n\\r\\n    /* Events */\\r\\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\\r\\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\\r\\n    event DelegationUpdate(\\r\\n        address indexed valAddr,\\r\\n        address indexed delAddr,\\r\\n        uint256 valTokens,\\r\\n        uint256 delShares,\\r\\n        int256 tokenDiff\\r\\n    );\\r\\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\\r\\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\\r\\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Staking constructor\\r\\n     * @param _xqsTokenAddress address of Celer Token Contract\\r\\n     * @param _proposalDeposit required deposit amount for a governance proposal\\r\\n     * @param _votingPeriod voting timeout for a governance proposal\\r\\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\\r\\n     * @param _maxBondedValidators the maximum number of bonded validators\\r\\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\\r\\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\\r\\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\\r\\n     * @param _validatorBondInterval min interval between bondValidator\\r\\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\\r\\n     */\\r\\n    constructor(\\r\\n        address _xqsTokenAddress,\\r\\n        uint256 _proposalDeposit,\\r\\n        uint256 _votingPeriod,\\r\\n        uint256 _unbondingPeriod,\\r\\n        uint256 _maxBondedValidators,\\r\\n        uint256 _minValidatorTokens,\\r\\n        uint256 _minSelfDelegation,\\r\\n        uint256 _advanceNoticePeriod,\\r\\n        uint256 _validatorBondInterval,\\r\\n        uint256 _maxSlashFactor\\r\\n    ) {\\r\\n        XQUBESWAP_TOKEN = IERC20(_xqsTokenAddress);\\r\\n\\r\\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\\r\\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\\r\\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\\r\\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\\r\\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\\r\\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\\r\\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\\r\\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\\r\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /*********************************\\r\\n     * External and Public Functions *\\r\\n     *********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize a validator candidate\\r\\n     * @param _signer signer address\\r\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\r\\n     * @param _commissionRate the self-declaimed commission rate\\r\\n     */\\r\\n    function initializeValidator(\\r\\n        address _signer,\\r\\n        uint256 _minSelfDelegation,\\r\\n        uint64 _commissionRate\\r\\n    ) external whenNotPaused onlyWhitelisted {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status == dt.ValidatorStatus.Null, \\\"Validator is initialized\\\");\\r\\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\r\\n        require(signerVals[valAddr] == address(0), \\\"Validator is other signer\\\");\\r\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\r\\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid commission rate\\\");\\r\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\r\\n        validator.signer = _signer;\\r\\n        validator.status = dt.ValidatorStatus.Unbonded;\\r\\n        validator.minSelfDelegation = _minSelfDelegation;\\r\\n        validator.commissionRate = _commissionRate;\\r\\n        valAddrs.push(valAddr);\\r\\n        signerVals[_signer] = valAddr;\\r\\n\\r\\n        delegate(valAddr, _minSelfDelegation);\\r\\n        emit ValidatorNotice(valAddr, \\\"init\\\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update validator signer address\\r\\n     * @param _signer signer address\\r\\n     */\\r\\n    function updateValidatorSigner(address _signer) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator not initialized\\\");\\r\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\r\\n        if (_signer != valAddr) {\\r\\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\r\\n        }\\r\\n\\r\\n        delete signerVals[validator.signer];\\r\\n        validator.signer = _signer;\\r\\n        signerVals[_signer] = valAddr;\\r\\n\\r\\n        emit ValidatorNotice(valAddr, \\\"signer\\\", abi.encode(_signer), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Candidate claims to become a bonded validator\\r\\n     * @dev caller can be either validator owner or signer\\r\\n     */\\r\\n    function bondValidator() external {\\r\\n        address valAddr = msg.sender;\\r\\n        if (signerVals[msg.sender] != address(0)) {\\r\\n            valAddr = signerVals[msg.sender];\\r\\n        }\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(\\r\\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\\r\\n            \\\"Invalid validator status\\\"\\r\\n        );\\r\\n        require(block.number >= validator.bondBlock, \\\"Bond block not reached\\\");\\r\\n        require(block.number >= nextBondBlock, \\\"Too frequent validator bond\\\");\\r\\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\\r\\n        require(hasMinRequiredTokens(valAddr, true), \\\"Not have min tokens\\\");\\r\\n\\r\\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\\r\\n        // if the number of validators has not reached the max_validator_num,\\r\\n        // add validator directly\\r\\n        if (bondedValAddrs.length < maxBondedValidators) {\\r\\n            _bondValidator(valAddr);\\r\\n            _decentralizationCheck(validator.tokens);\\r\\n            return;\\r\\n        }\\r\\n        // if the number of validators has already reached the max_validator_num,\\r\\n        // add validator only if its tokens is more than the current least bonded validator tokens\\r\\n        uint256 minTokens = dt.MAX_INT;\\r\\n        uint256 minTokensIndex;\\r\\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\\r\\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\\r\\n                minTokensIndex = i;\\r\\n                minTokens = validators[bondedValAddrs[i]].tokens;\\r\\n                if (minTokens == 0) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(validator.tokens > minTokens, \\\"Insufficient tokens\\\");\\r\\n        _replaceBondedValidator(valAddr, minTokensIndex);\\r\\n        _decentralizationCheck(validator.tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Confirm validator status from Unbonding to Unbonded\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function confirmUnbondedValidator(address _valAddr) external {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status == dt.ValidatorStatus.Unbonding, \\\"Validator not unbonding\\\");\\r\\n        require(block.number >= validator.unbondBlock, \\\"Unbond block not reached\\\");\\r\\n\\r\\n        validator.status = dt.ValidatorStatus.Unbonded;\\r\\n        delete validator.unbondBlock;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate XQST tokens to a validator\\r\\n     * @dev Minimal amount per delegate operation is 1 XQST\\r\\n     * @param _valAddr validator to delegate\\r\\n     * @param _tokens the amount of delegated XQST tokens\\r\\n     */\\r\\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\\r\\n        address delAddr = msg.sender;\\r\\n        require(_tokens >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 XQST\\\");\\r\\n\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\r\\n\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n        delegator.shares += shares;\\r\\n        validator.shares += shares;\\r\\n        validator.tokens += _tokens;\\r\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens += _tokens;\\r\\n            _decentralizationCheck(validator.tokens);\\r\\n        }\\r\\n        XQUBESWAP_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\\r\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Undelegate shares from a validator\\r\\n     * @dev Tokens are delegated by the msgSender to the validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _shares undelegate shares\\r\\n     */\\r\\n    function undelegateShares(address _valAddr, uint256 _shares) external {\\r\\n        require(_shares >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 share\\\");\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\\r\\n        _undelegate(validator, _valAddr, tokens, _shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Undelegate shares from a validator\\r\\n     * @dev Tokens are delegated by the msgSender to the validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _tokens undelegate tokens\\r\\n     */\\r\\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\\r\\n        require(_tokens >= dt.XQST_DECIMAL, \\\"Minimal amount is 1 XQST\\\");\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\r\\n        _undelegate(validator, _valAddr, _tokens, shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Complete pending undelegations from a validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function completeUndelegate(address _valAddr) external {\\r\\n        address delAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n\\r\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\r\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\r\\n        // for all pending undelegations\\r\\n        uint32 i;\\r\\n        uint256 undelegationShares;\\r\\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\\r\\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\\r\\n                // complete undelegation when the validator becomes unbonded or\\r\\n                // the unbondingPeriod for the pending undelegation is up.\\r\\n                undelegationShares += delegator.undelegations.queue[i].shares;\\r\\n                delete delegator.undelegations.queue[i];\\r\\n                continue;\\r\\n            }\\r\\n            break;\\r\\n        }\\r\\n        delegator.undelegations.head = i;\\r\\n\\r\\n        require(undelegationShares > 0, \\\"No undelegation ready to be completed\\\");\\r\\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\\r\\n        validator.undelegationShares -= undelegationShares;\\r\\n        validator.undelegationTokens -= tokens;\\r\\n        XQUBESWAP_TOKEN.safeTransfer(delAddr, tokens);\\r\\n        emit Undelegated(_valAddr, delAddr, tokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update commission rate\\r\\n     * @param _newRate new commission rate\\r\\n     */\\r\\n    function updateCommissionRate(uint64 _newRate) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid new rate\\\");\\r\\n        validator.commissionRate = _newRate;\\r\\n        emit ValidatorNotice(valAddr, \\\"commission\\\", abi.encode(_newRate), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update minimal self delegation value\\r\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\r\\n     */\\r\\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\\r\\n        address valAddr = msg.sender;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\r\\n        if (_minSelfDelegation < validator.minSelfDelegation) {\\r\\n            require(validator.status != dt.ValidatorStatus.Bonded, \\\"Validator is bonded\\\");\\r\\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\\r\\n        }\\r\\n        validator.minSelfDelegation = _minSelfDelegation;\\r\\n        emit ValidatorNotice(valAddr, \\\"min-self-delegation\\\", abi.encode(_minSelfDelegation), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Slash a validator and its delegators\\r\\n     * @param _slashRequest slash request bytes coded in protobuf\\r\\n     * @param _sigs list of validator signatures\\r\\n     */\\r\\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\\r\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Slash\\\"));\\r\\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\\r\\n\\r\\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\\r\\n        require(block.timestamp < request.expireTime, \\\"Slash expired\\\");\\r\\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \\\"Invalid slash factor\\\");\\r\\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \\\"Exceed max slash factor\\\");\\r\\n        require(!slashNonces[request.nonce], \\\"Used slash nonce\\\");\\r\\n        slashNonces[request.nonce] = true;\\r\\n\\r\\n        address valAddr = request.validator;\\r\\n        dt.Validator storage validator = validators[valAddr];\\r\\n        require(\\r\\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\\r\\n            \\\"Invalid validator status\\\"\\r\\n        );\\r\\n\\r\\n        // slash delegated tokens\\r\\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\r\\n        validator.tokens -= slashAmt;\\r\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens -= slashAmt;\\r\\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\\r\\n                _unbondValidator(valAddr);\\r\\n            }\\r\\n        }\\r\\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\\r\\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\\r\\n        }\\r\\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\\r\\n\\r\\n        // slash pending undelegations\\r\\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\r\\n        validator.undelegationTokens -= slashUndelegation;\\r\\n        slashAmt += slashUndelegation;\\r\\n\\r\\n        uint256 collectAmt;\\r\\n        for (uint256 i = 0; i < request.collectors.length; i++) {\\r\\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\\r\\n            if (collectAmt + collector.amount > slashAmt) {\\r\\n                collector.amount = slashAmt - collectAmt;\\r\\n            }\\r\\n            if (collector.amount > 0) {\\r\\n                collectAmt += collector.amount;\\r\\n                if (collector.account == address(0)) {\\r\\n                    XQUBESWAP_TOKEN.safeTransfer(msg.sender, collector.amount);\\r\\n                    emit SlashAmtCollected(msg.sender, collector.amount);\\r\\n                } else {\\r\\n                    XQUBESWAP_TOKEN.safeTransfer(collector.account, collector.amount);\\r\\n                    emit SlashAmtCollected(collector.account, collector.amount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        forfeiture += slashAmt - collectAmt;\\r\\n        emit Slash(valAddr, request.nonce, slashAmt);\\r\\n    }\\r\\n\\r\\n    function collectForfeiture() external {\\r\\n        require(forfeiture > 0, \\\"Nothing to collect\\\");\\r\\n        XQUBESWAP_TOKEN.safeTransfer(rewardContract, forfeiture);\\r\\n        forfeiture = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validator notice event, could be triggered by anyone\\r\\n     */\\r\\n    function validatorNotice(\\r\\n        address _valAddr,\\r\\n        string calldata _key,\\r\\n        bytes calldata _data\\r\\n    ) external {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\r\\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\\r\\n        require(msg.sender == govContract, \\\"Caller is not gov contract\\\");\\r\\n        if (_name == dt.ParamName.MaxBondedValidators) {\\r\\n            require(bondedValAddrs.length <= _value, \\\"invalid value\\\");\\r\\n        }\\r\\n        params[_name] = _value;\\r\\n    }\\r\\n\\r\\n    function setGovContract(address _addr) external onlyOwner {\\r\\n        govContract = _addr;\\r\\n    }\\r\\n\\r\\n    function setRewardContract(address _addr) external onlyOwner {\\r\\n        rewardContract = _addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set max slash factor\\r\\n     */\\r\\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\\r\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Owner drains tokens when the contract is paused\\r\\n     * @dev emergency use only\\r\\n     * @param _amount drained token amount\\r\\n     */\\r\\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\\r\\n        XQUBESWAP_TOKEN.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**************************\\r\\n     *  Public View Functions *\\r\\n     **************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Validate if a message is signed by quorum tokens\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs list of validator signatures\\r\\n     */\\r\\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\\r\\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\\r\\n        uint256 signedTokens;\\r\\n        address prev = address(0);\\r\\n        uint256 quorum = getQuorumTokens();\\r\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\r\\n            address signer = hash.recover(_sigs[i]);\\r\\n            require(signer > prev, \\\"Signers not in ascending order\\\");\\r\\n            prev = signer;\\r\\n            dt.Validator storage validator = validators[signerVals[signer]];\\r\\n            if (validator.status != dt.ValidatorStatus.Bonded) {\\r\\n                continue;\\r\\n            }\\r\\n            signedTokens += validator.tokens;\\r\\n            if (signedTokens >= quorum) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Quorum not reached\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies that a message is signed by a quorum among the validators.\\r\\n     * @param _msg signed message\\r\\n     * @param _sigs the list of signatures\\r\\n     */\\r\\n    function verifySigs(\\r\\n        bytes memory _msg,\\r\\n        bytes[] calldata _sigs,\\r\\n        address[] calldata,\\r\\n        uint256[] calldata\\r\\n    ) public view override {\\r\\n        require(verifySignatures(_msg, _sigs), \\\"Failed to verify sigs\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get quorum amount of tokens\\r\\n     * @return the quorum amount\\r\\n     */\\r\\n    function getQuorumTokens() public view returns (uint256) {\\r\\n        return (bondedTokens * 2) / 3 + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get validator info\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @return Validator token amount\\r\\n     */\\r\\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\\r\\n        return validators[_valAddr].tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get validator info\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @return Validator status\\r\\n     */\\r\\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\\r\\n        return validators[_valAddr].status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check the given address is a validator or not\\r\\n     * @param _addr the address to check\\r\\n     * @return the given address is a validator or not\\r\\n     */\\r\\n    function isBondedValidator(address _addr) public view returns (bool) {\\r\\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of validators\\r\\n     * @return the number of validators\\r\\n     */\\r\\n    function getValidatorNum() public view returns (uint256) {\\r\\n        return valAddrs.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of bonded validators\\r\\n     * @return the number of bonded validators\\r\\n     */\\r\\n    function getBondedValidatorNum() public view returns (uint256) {\\r\\n        return bondedValAddrs.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return addresses and token amounts of bonded validators\\r\\n     */\\r\\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\\r\\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\\r\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\r\\n            address valAddr = bondedValAddrs[i];\\r\\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\\r\\n        }\\r\\n        return infos;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if min token requirements are met\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _checkSelfDelegation check self delegation\\r\\n     */\\r\\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\\r\\n        dt.Validator storage v = validators[_valAddr];\\r\\n        uint256 valTokens = v.tokens;\\r\\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\\r\\n            return false;\\r\\n        }\\r\\n        if (_checkSelfDelegation) {\\r\\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\\r\\n            if (selfDelegation < v.minSelfDelegation) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the delegator info of a specific validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     * @param _delAddr the address of the delegator\\r\\n     * @return DelegatorInfo from the given validator\\r\\n     */\\r\\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        dt.Delegator storage d = validator.delegators[_delAddr];\\r\\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\\r\\n\\r\\n        uint256 undelegationShares;\\r\\n        uint256 withdrawableUndelegationShares;\\r\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\r\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\r\\n        uint256 len = d.undelegations.tail - d.undelegations.head;\\r\\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\\r\\n            undelegationShares += undelegations[i].shares;\\r\\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\\r\\n                withdrawableUndelegationShares += undelegations[i].shares;\\r\\n            }\\r\\n        }\\r\\n        uint256 undelegationTokens = _shareToToken(\\r\\n            undelegationShares,\\r\\n            validator.undelegationTokens,\\r\\n            validator.undelegationShares\\r\\n        );\\r\\n        uint256 withdrawableUndelegationTokens = _shareToToken(\\r\\n            withdrawableUndelegationShares,\\r\\n            validator.undelegationTokens,\\r\\n            validator.undelegationShares\\r\\n        );\\r\\n\\r\\n        return\\r\\n            dt.DelegatorInfo(\\r\\n                _valAddr,\\r\\n                tokens,\\r\\n                d.shares,\\r\\n                undelegations,\\r\\n                undelegationTokens,\\r\\n                withdrawableUndelegationTokens\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the value of a specific uint parameter\\r\\n     * @param _name the key of this parameter\\r\\n     * @return the value of this parameter\\r\\n     */\\r\\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\\r\\n        return params[_name];\\r\\n    }\\r\\n\\r\\n    /*********************\\r\\n     * Private Functions *\\r\\n     *********************/\\r\\n\\r\\n    function _undelegate(\\r\\n        dt.Validator storage validator,\\r\\n        address _valAddr,\\r\\n        uint256 _tokens,\\r\\n        uint256 _shares\\r\\n    ) private {\\r\\n        address delAddr = msg.sender;\\r\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\r\\n        delegator.shares -= _shares;\\r\\n        validator.shares -= _shares;\\r\\n        validator.tokens -= _tokens;\\r\\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\\r\\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\\r\\n            validator.shares -= delegator.shares;\\r\\n            delegator.shares = 0;\\r\\n        }\\r\\n        require(delegator.shares == 0 || delegator.shares >= dt.XQST_DECIMAL, \\\"not enough remaining shares\\\");\\r\\n\\r\\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\\r\\n            XQUBESWAP_TOKEN.safeTransfer(delAddr, _tokens);\\r\\n            emit Undelegated(_valAddr, delAddr, _tokens);\\r\\n            return;\\r\\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\\r\\n            bondedTokens -= _tokens;\\r\\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\\r\\n                _unbondValidator(_valAddr);\\r\\n            }\\r\\n        }\\r\\n        require(\\r\\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\\r\\n            \\\"Exceed max undelegation entries\\\"\\r\\n        );\\r\\n\\r\\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\\r\\n        validator.undelegationShares += undelegationShares;\\r\\n        validator.undelegationTokens += _tokens;\\r\\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\\r\\n        undelegation.shares = undelegationShares;\\r\\n        undelegation.creationBlock = block.number;\\r\\n        delegator.undelegations.tail++;\\r\\n\\r\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set validator to bonded\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _setBondedValidator(address _valAddr) private {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        validator.status = dt.ValidatorStatus.Bonded;\\r\\n        delete validator.unbondBlock;\\r\\n        bondedTokens += validator.tokens;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set validator to unbonding\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _setUnbondingValidator(address _valAddr) private {\\r\\n        dt.Validator storage validator = validators[_valAddr];\\r\\n        validator.status = dt.ValidatorStatus.Unbonding;\\r\\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\\r\\n        bondedTokens -= validator.tokens;\\r\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Bond a validator\\r\\n     * @param _valAddr the address of the validator\\r\\n     */\\r\\n    function _bondValidator(address _valAddr) private {\\r\\n        bondedValAddrs.push(_valAddr);\\r\\n        _setBondedValidator(_valAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Replace a bonded validator\\r\\n     * @param _valAddr the address of the new validator\\r\\n     * @param _index the index of the validator to be replaced\\r\\n     */\\r\\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\\r\\n        _setUnbondingValidator(bondedValAddrs[_index]);\\r\\n        bondedValAddrs[_index] = _valAddr;\\r\\n        _setBondedValidator(_valAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unbond a validator\\r\\n     * @param _valAddr validator to be removed\\r\\n     */\\r\\n    function _unbondValidator(address _valAddr) private {\\r\\n        uint256 lastIndex = bondedValAddrs.length - 1;\\r\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\r\\n            if (bondedValAddrs[i] == _valAddr) {\\r\\n                if (i < lastIndex) {\\r\\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\\r\\n                }\\r\\n                bondedValAddrs.pop();\\r\\n                _setUnbondingValidator(_valAddr);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Not bonded validator\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if one validator has too much power\\r\\n     * @param _valTokens token amounts of the validator\\r\\n     */\\r\\n    function _decentralizationCheck(uint256 _valTokens) private view {\\r\\n        uint256 bondedValNum = bondedValAddrs.length;\\r\\n        if (bondedValNum == 2 || bondedValNum == 3) {\\r\\n            require(_valTokens < getQuorumTokens(), \\\"Single validator should not have quorum tokens\\\");\\r\\n        } else if (bondedValNum > 3) {\\r\\n            require(_valTokens < bondedTokens / 3, \\\"Single validator should not have 1/3 tokens\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert token to share\\r\\n     */\\r\\n    function _tokenToShare(\\r\\n        uint256 tokens,\\r\\n        uint256 totalTokens,\\r\\n        uint256 totalShares\\r\\n    ) private pure returns (uint256) {\\r\\n        if (totalTokens == 0) {\\r\\n            return tokens;\\r\\n        }\\r\\n        return (tokens * totalShares) / totalTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert share to token\\r\\n     */\\r\\n    function _shareToToken(\\r\\n        uint256 shares,\\r\\n        uint256 totalTokens,\\r\\n        uint256 totalShares\\r\\n    ) private pure returns (uint256) {\\r\\n        if (totalShares == 0) {\\r\\n            return shares;\\r\\n        }\\r\\n        return (shares * totalTokens) / totalShares;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x786d8da75bf9302eb98ed2276777fb93bad6d62c68d938d57622d6ea0d366728\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620062ac380380620062ac8339810160408190526200003491620002cd565b6200003f33620001b4565b6000805460ff60a01b19169055620000573362000204565b6001600160a01b0399909916608052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76979097557f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf959095557fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91634939093557f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e919091557f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784557febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f4557f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc557ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a965560086000527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec98569358556200035a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff1615620002725760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c72656164792070617573657200000000000000604482015260640160405180910390fd5b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910160405180910390a150565b6000806000806000806000806000806101408b8d031215620002ee57600080fd5b8a516001600160a01b03811681146200030657600080fd5b809a505060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b608051615f05620003a7600039600081816109fd01528181610de6015281816110b001528181611c4a01528181611cc5015281816121fd015281816130ed015261467b0152615f056000f3fe6080604052600436106103855760003560e01c80636ea69d62116101d157806390e360f811610102578063b4f7fa34116100a0578063eb505dd51161006f578063eb505dd514610ad8578063eecefef814610b05578063f2fde38b14610b32578063fa52c7d814610b5257600080fd5b8063b4f7fa3414610a3f578063c8f9f98414610a5f578063dcfdc1e114610a98578063e909156d14610ab857600080fd5b80639b19251a116100dc5780639b19251a14610975578063a310624f146109a5578063a9fbc76c146109eb578063acc62ccf14610a1f57600080fd5b806390e360f8146109055780639146f1101461093557806392bb243c1461095557600080fd5b80638338f0e51161016f57806388d996e81161014957806388d996e81461089257806389f9aab5146108b25780638a74d5fe146108c75780638da5cb5b146108e757600080fd5b80638338f0e51461085157806383cfb318146108675780638456cb591461087d57600080fd5b80637a50dbd2116101ab5780637a50dbd2146107cc57806380f51c12146107ec57806382d7b4b81461081c57806382dc1ec41461083157600080fd5b80636ea69d62146107775780636ef8d66d1461079757806371bc0216146107ac57600080fd5b8063410ae02c116102b6578063525eba2111610254578063682dbc2211610223578063682dbc22146106e157806368706e54146107015780636b2c0f55146107215780636d3087831461074157600080fd5b8063525eba211461066c5780635c975abb1461068c5780635e593eff146106ab57806365d5d420146106cb57600080fd5b806347abfdbf1161029057806347abfdbf146105f257806349955e391461061257806351508f0a1461063257806351fb012d1461065257600080fd5b8063410ae02c1461057957806346fbf68e14610599578063473849bd146105d257600080fd5b80632fa4d12b116103235780633985c4e6116102fd5780633985c4e6146104d95780633af32abf146104f95780633f4ba83a146105425780634021d4d51461055757600080fd5b80632fa4d12b1461047757806336f1635f146104af578063386c024a146104c457600080fd5b8063145aa1161161035f578063145aa116146103f35780631a203257146104135780631cfe4f0b14610433578063291d95491461045757600080fd5b8063026e402b14610391578063052d9e7e146103b357806310154bad146103d357600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103b16103ac366004615410565b610bf0565b005b3480156103bf57600080fd5b506103b16103ce366004615448565b610e6e565b3480156103df57600080fd5b506103b16103ee366004615465565b610ed8565b3480156103ff57600080fd5b506103b161040e366004615480565b610ff3565b34801561041f57600080fd5b506103b161042e366004615480565b6110da565b34801561043f57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561046357600080fd5b506103b1610472366004615465565b61115f565b34801561048357600080fd5b50600c54610497906001600160a01b031681565b6040516001600160a01b03909116815260200161044e565b3480156104bb57600080fd5b506103b161126f565b3480156104d057600080fd5b506104446115fa565b3480156104e557600080fd5b506103b16104f4366004615520565b611627565b34801561050557600080fd5b50610532610514366004615465565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200161044e565b34801561054e57600080fd5b506103b1611dcc565b34801561056357600080fd5b5061056c611e35565b60405161044e919061558c565b34801561058557600080fd5b506104446105943660046155f3565b611f36565b3480156105a557600080fd5b506105326105b4366004615465565b6001600160a01b031660009081526001602052604090205460ff1690565b3480156105de57600080fd5b506103b16105ed366004615465565b611f75565b3480156105fe57600080fd5b5061053261060d36600461560e565b61227c565b34801561061e57600080fd5b506103b161062d36600461565d565b612336565b34801561063e57600080fd5b506103b161064d366004615465565b612497565b34801561065e57600080fd5b506003546105329060ff1681565b34801561067857600080fd5b506103b1610687366004615678565b612510565b34801561069857600080fd5b50600054600160a01b900460ff16610532565b3480156106b757600080fd5b506103b16106c6366004615480565b6129b2565b3480156106d757600080fd5b5061044460045481565b3480156106ed57600080fd5b506103b16106fc36600461576b565b612bc9565b34801561070d57600080fd5b506103b161071c366004615465565b612c2c565b34801561072d57600080fd5b506103b161073c366004615465565b612ca5565b34801561074d57600080fd5b5061049761075c366004615465565b6009602052600090815260409020546001600160a01b031681565b34801561078357600080fd5b50600d54610497906001600160a01b031681565b3480156107a357600080fd5b506103b1612d05565b3480156107b857600080fd5b506103b16107c7366004615465565b612d0e565b3480156107d857600080fd5b506103b16107e7366004615465565b612e56565b3480156107f857600080fd5b50610532610807366004615465565b60016020526000908152604090205460ff1681565b34801561082857600080fd5b506103b1613087565b34801561083d57600080fd5b506103b161084c366004615465565b61311e565b34801561085d57600080fd5b50610444600e5481565b34801561087357600080fd5b5061044460055481565b34801561088957600080fd5b506103b161317e565b34801561089e57600080fd5b506103b16108ad366004615410565b6131e5565b3480156108be57600080fd5b50600754610444565b3480156108d357600080fd5b506105326108e23660046158af565b6132e2565b3480156108f357600080fd5b506000546001600160a01b0316610497565b34801561091157600080fd5b50610532610920366004615480565b600a6020526000908152604090205460ff1681565b34801561094157600080fd5b506103b1610950366004615927565b6134c6565b34801561096157600080fd5b50610497610970366004615480565b613593565b34801561098157600080fd5b50610532610990366004615465565b60026020526000908152604090205460ff1681565b3480156109b157600080fd5b506109de6109c0366004615465565b6001600160a01b031660009081526008602052604090205460ff1690565b60405161044e91906159e0565b3480156109f757600080fd5b506104977f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2b57600080fd5b50610497610a3a366004615480565b6135bd565b348015610a4b57600080fd5b50610532610a5a366004615465565b6135cd565b348015610a6b57600080fd5b50610444610a7a366004615465565b6001600160a01b031660009081526008602052604090206001015490565b348015610aa457600080fd5b506103b1610ab3366004615410565b613605565b348015610ac457600080fd5b506103b1610ad33660046159ee565b6136fc565b348015610ae457600080fd5b50610444610af33660046155f3565b600b6020526000908152604090205481565b348015610b1157600080fd5b50610b25610b20366004615a0a565b6137fe565b60405161044e9190615a3d565b348015610b3e57600080fd5b506103b1610b4d366004615465565b613af7565b348015610b5e57600080fd5b50610bda610b6d366004615465565b600860205260009081526040902080546001820154600283015460038401546004850154600686015460079096015460ff8616966101009096046001600160a01b0316959067ffffffffffffffff80821691680100000000000000008104821691600160801b909104168a565b60405161044e9a99989796959493929190615adc565b600054600160a01b900460ff1615610c425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b33670de0b6b3a7640000821015610c9b5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e742069732031205851535400000000000000006044820152606401610c39565b6001600160a01b038316600090815260086020526040812090815460ff166003811115610cca57610cca6159a8565b03610d175760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6000610d2c8483600101548460020154613bd3565b6001600160a01b0384166000908152600584016020526040812080549293509183918391610d5b908490615b5e565b9250508190555081836002016000828254610d769190615b5e565b9250508190555084836001016000828254610d919190615b5e565b9091555060039050835460ff166003811115610daf57610daf6159a8565b03610dd9578460046000828254610dc69190615b5e565b90915550506001830154610dd990613c03565b610e0e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853088613d26565b6001830154815460408051928352602083019190915281018690526001600160a01b0380861691908816907f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea9060600160405180910390a3505050505050565b33610e816000546001600160a01b031690565b6001600160a01b031614610ec55760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6003805460ff1916911515919091179055565b33610eeb6000546001600160a01b031690565b6001600160a01b031614610f2f5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b03811660009081526002602052604090205460ff1615610f985760405162461bcd60e51b815260206004820152601360248201527f416c72656164792077686974656c6973746564000000000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f91015b60405180910390a150565b600054600160a01b900460ff1661104c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c39565b3361105f6000546001600160a01b031690565b6001600160a01b0316146110a35760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613dbe565b50565b336110ed6000546001600160a01b031690565b6001600160a01b0316146111315760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935855565b336111726000546001600160a01b031690565b6001600160a01b0316146111b65760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b03811660009081526002602052604090205460ff1661121e5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b69101610fe8565b336000818152600960205260409020546001600160a01b0316156112a85750336000908152600960205260409020546001600160a01b03165b6001600160a01b03811660009081526008602052604090206001815460ff1660038111156112d8576112d86159a8565b14806112f957506002815460ff1660038111156112f7576112f76159a8565b145b6113455760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c39565b600781015467ffffffffffffffff164310156113a35760405162461bcd60e51b815260206004820152601660248201527f426f6e6420626c6f636b206e6f742072656163686564000000000000000000006044820152606401610c39565b6005544310156113f55760405162461bcd60e51b815260206004820152601b60248201527f546f6f206672657175656e742076616c696461746f7220626f6e6400000000006044820152606401610c39565b6007600052600b6020527ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a965461142b9043615b5e565b60055561143982600161227c565b6114855760405162461bcd60e51b815260206004820152601360248201527f4e6f742068617665206d696e20746f6b656e73000000000000000000000000006044820152606401610c39565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e546007548111156114d6576114c483613dee565b6114d18260010154613c03565b505050565b6000196000805b83811015611588578260086000600784815481106114fd576114fd615b71565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154101561157657809150600860006007838154811061154557611545615b71565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015492508215611588575b8061158081615b87565b9150506114dd565b50818460010154116115dc5760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420746f6b656e73000000000000000000000000006044820152606401610c39565b6115e68582613e42565b6115f38460010154613c03565b5050505050565b60006003600454600261160d9190615ba0565b6116179190615bb7565b611622906001615b5e565b905090565b600054600160a01b900460ff16156116745760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b600046306040516020016116ca92919091825260601b6bffffffffffffffffffffffff191660208201527f536c617368000000000000000000000000000000000000000000000000000000603482015260390190565b6040516020818303038152906040528051906020012090506117148186866040516020016116fa93929190615bd9565b60408051601f198184030181529190526108e28486615bf3565b50600061175686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ebd92505050565b9050806060015167ffffffffffffffff1642106117b55760405162461bcd60e51b815260206004820152600d60248201527f536c6173682065787069726564000000000000000000000000000000000000006044820152606401610c39565b620f4240816040015167ffffffffffffffff1611156118165760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736c61736820666163746f720000000000000000000000006044820152606401610c39565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935854604082015167ffffffffffffffff16111561189f5760405162461bcd60e51b815260206004820152601760248201527f457863656564206d617820736c61736820666163746f720000000000000000006044820152606401610c39565b60208082015167ffffffffffffffff166000908152600a909152604090205460ff161561190e5760405162461bcd60e51b815260206004820152601060248201527f5573656420736c617368206e6f6e6365000000000000000000000000000000006044820152606401610c39565b60208082015167ffffffffffffffff166000908152600a82526040808220805460ff1916600117905583516001600160a01b0381168352600890935290206003815460ff166003811115611964576119646159a8565b148061198557506002815460ff166003811115611983576119836159a8565b145b6119d15760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c39565b6000620f4240846040015167ffffffffffffffff1683600101546119f59190615ba0565b6119ff9190615bb7565b905080826001016000828254611a159190615c00565b9091555060039050825460ff166003811115611a3357611a336159a8565b03611a81578060046000828254611a4a9190615c00565b9091555050608084015167ffffffffffffffff16151580611a735750611a7183600161227c565b155b15611a8157611a8183614129565b6002825460ff166003811115611a9957611a996159a8565b148015611ab457506000846080015167ffffffffffffffff16115b15611af7576080840151611ad29067ffffffffffffffff1643615b5e565b60078301805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b60006001600160a01b0316836001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8460010154600085611b3e90615c13565b6040805193845260208401929092529082015260600160405180910390a36000620f4240856040015167ffffffffffffffff168460030154611b809190615ba0565b611b8a9190615bb7565b905080836003016000828254611ba09190615c00565b90915550611bb090508183615b5e565b91506000805b8660a0015151811015611d4a5760008760a001518281518110611bdb57611bdb615b71565b6020026020010151905084816020015184611bf69190615b5e565b1115611c0c57611c068386615c00565b60208201525b602081015115611d37576020810151611c259084615b5e565b81519093506001600160a01b0316611cb0576020810151611c72906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613dbe565b60208082015160405190815233917fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a3910160405180910390a2611d37565b80516020820151611ceb916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691613dbe565b80600001516001600160a01b03167fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a38260200151604051611d2e91815260200190565b60405180910390a25b5080611d4281615b87565b915050611bb6565b50611d558184615c00565b600e6000828254611d669190615b5e565b90915550506020808701516040805167ffffffffffffffff90921682529181018590526001600160a01b038716917f10863f35bc5db9fda133333468bf7b1ceaaa88cb4263c061f890f97b79bf9008910160405180910390a25050505050505050505050565b3360009081526001602052604090205460ff16611e2b5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c39565b611e3361428e565b565b60075460609060009067ffffffffffffffff811115611e5657611e566156b4565b604051908082528060200260200182016040528015611e9b57816020015b6040805180820190915260008082526020820152815260200190600190039081611e745790505b50905060005b600754811015611f3057600060078281548110611ec057611ec0615b71565b60009182526020808320909101546040805180820182526001600160a01b039092168083528085526008845293206001015491810191909152845191925090849084908110611f1157611f11615b71565b6020026020010181905250508080611f2890615b87565b915050611ea1565b50919050565b6000600b6000836008811115611f4e57611f4e6159a8565b6008811115611f5f57611f5f6159a8565b8152602001908152602001600020549050919050565b6001600160a01b03811660009081526008602052604081203391815460ff166003811115611fa557611fa56159a8565b03611ff25760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6001600160a01b03821660009081526005820160209081526040822060028352600b9091527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345483549192909160019060ff166003811115612056576120566159a8565b60028501549114915063ffffffff1660005b600285015463ffffffff6401000000009091048116908316101561211a5782806120b8575063ffffffff8216600090815260018087016020526040909120015443906120b5908690615b5e565b11155b156121035763ffffffff821660009081526001860160205260409020546120df9082615b5e565b63ffffffff8316600090815260018088016020526040822082815501559050612108565b61211a565b8161211281615c2f565b925050612068565b60028501805463ffffffff191663ffffffff8416179055806121a45760405162461bcd60e51b815260206004820152602560248201527f4e6f20756e64656c65676174696f6e20726561647920746f20626520636f6d7060448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152608401610c39565b60006121b98288600301548960040154614334565b9050818760040160008282546121cf9190615c00565b92505081905550808760030160008282546121ea9190615c00565b9091555061222490506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168983613dbe565b876001600160a01b0316896001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8360405161226991815260200190565b60405180910390a3505050505050505050565b6001600160a01b03821660009081526008602090815260408220600181015460048452600b9092527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784549091908110156122db57600092505050612330565b8315612329576001600160a01b0385166000908152600583016020526040812054600284015461230d91908490614334565b905082600601548110156123275760009350505050612330565b505b6001925050505b92915050565b33600081815260086020526040812090815460ff16600381111561235c5761235c6159a8565b036123a95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6127108367ffffffffffffffff1611156124055760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e65772072617465000000000000000000000000000000006044820152606401610c39565b60078101805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8616908102919091179091556040805160208101929092526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615ca2565b60405180910390a2505050565b336124aa6000546001600160a01b031690565b6001600160a01b0316146124ee5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff161561255d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b60035460ff16156125c7573360009081526002602052604090205460ff166125c75760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610c39565b33600081815260086020526040812090815460ff1660038111156125ed576125ed6159a8565b1461263a5760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f7220697320696e697469616c697a656400000000000000006044820152606401610c39565b6001600160a01b03851660009081526008602052604081205460ff166003811115612667576126676159a8565b146126b45760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c39565b6001600160a01b03828116600090815260096020526040902054161561271c5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206973206f74686572207369676e6572000000000000006044820152606401610c39565b6001600160a01b0385811660009081526009602052604090205416156127845760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c39565b6127108367ffffffffffffffff1611156127e05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401610c39565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f45484101561285b5760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c39565b80547fffffffffffffffffffffff0000000000000000000000000000000000000000001660ff196101006001600160a01b03888116918202929092169290921760019081178455600680850188905560078501805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8a1602179055805491820190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031990811692861692831790915560009283526009602052604090922080549092161790556129338285610bf0565b604080516001600160a01b03878116602083015291810186905267ffffffffffffffff85166060820152908316907f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c9060800160408051601f19818403018152908290526129a391600090615d01565b60405180910390a25050505050565b33600081815260086020526040812090815460ff1660038111156129d8576129d86159a8565b03612a255760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f454831015612aa05760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c39565b8060060154831015612b6c576003815460ff166003811115612ac457612ac46159a8565b03612b115760405162461bcd60e51b815260206004820152601360248201527f56616c696461746f7220697320626f6e646564000000000000000000000000006044820152606401610c39565b6006600052600b6020527f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc54612b479043615b5e565b60078201805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b6006810183905560408051602081018590526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615d2f565b612bd7876108e28789615bf3565b612c235760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f20766572696679207369677300000000000000000000006044820152606401610c39565b50505050505050565b33612c3f6000546001600160a01b031690565b6001600160a01b031614612c835760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b33612cb86000546001600160a01b031690565b6001600160a01b031614612cfc5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d781614350565b611e3333614350565b6001600160a01b03811660009081526008602052604090206002815460ff166003811115612d3e57612d3e6159a8565b14612d8b5760405162461bcd60e51b815260206004820152601760248201527f56616c696461746f72206e6f7420756e626f6e64696e670000000000000000006044820152606401610c39565b600781015468010000000000000000900467ffffffffffffffff16431015612df55760405162461bcd60e51b815260206004820152601860248201527f556e626f6e6420626c6f636b206e6f74207265616368656400000000000000006044820152606401610c39565b805460ff1916600190811782556007820180546fffffffffffffffff0000000000000000191690555b6040516001600160a01b038416907fd5e59fa85493a77fb57f6bf9080f2f71fde9de0eadc62b27b43b6263f3f1f59a90600090a35050565b33600081815260086020526040812090815460ff166003811115612e7c57612e7c6159a8565b03612ec95760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206e6f7420696e697469616c697a6564000000000000006044820152606401610c39565b6001600160a01b038381166000908152600960205260409020541615612f315760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c39565b816001600160a01b0316836001600160a01b031614612fc4576001600160a01b03831660009081526008602052604081205460ff166003811115612f7757612f776159a8565b14612fc45760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c39565b8054610100908190046001600160a01b03908116600090815260096020908152604080832080546001600160a01b031990811690915586547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1689861696870217875585845292819020805490931693871693841790925581519081019390935290917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615d76565b6000600e54116130d95760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610c39565b600d54600e54613117916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690613dbe565b6000600e55565b336131316000546001600160a01b031690565b6001600160a01b0316146131755760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d781614409565b3360009081526001602052604090205460ff166131dd5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c39565b611e336144c7565b670de0b6b3a764000081101561323d5760405162461bcd60e51b815260206004820152601960248201527f4d696e696d616c20616d6f756e742069732031207368617265000000000000006044820152606401610c39565b6001600160a01b038216600090815260086020526040812090815460ff16600381111561326c5761326c6159a8565b036132b95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b60006132ce8383600101548460020154614334565b90506132dc8285838661454f565b50505050565b60008061334384805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600080806133516115fa565b905060005b865181101561347d57600061338d88838151811061337657613376615b71565b6020026020010151876148f090919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116133f05760405162461bcd60e51b815260206004820152601e60248201527f5369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610c39565b6001600160a01b038082166000908152600960209081526040808320549093168252600890522090935083906003815460ff166003811115613434576134346159a8565b1461344057505061346b565b600181015461344f9087615b5e565b9550838610613468576001975050505050505050612330565b50505b8061347581615b87565b915050613356565b5060405162461bcd60e51b815260206004820152601260248201527f51756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610c39565b6001600160a01b038516600090815260086020526040812090815460ff1660038111156134f5576134f56159a8565b036135425760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b856001600160a01b03167f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c8686868633604051613583959493929190615de6565b60405180910390a2505050505050565b600681815481106135a357600080fd5b6000918252602090912001546001600160a01b0316905081565b600781815481106135a357600080fd5b600060036001600160a01b03831660009081526008602052604090205460ff1660038111156135fe576135fe6159a8565b1492915050565b670de0b6b3a764000081101561365d5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e742069732031205851535400000000000000006044820152606401610c39565b6001600160a01b038216600090815260086020526040812090815460ff16600381111561368c5761368c6159a8565b036136d95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b60006136ee8383600101548460020154613bd3565b90506132dc8285858461454f565b600c546001600160a01b031633146137565760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420676f7620636f6e74726163740000000000006044820152606401610c39565b600382600881111561376a5761376a6159a8565b036137c1576007548110156137c15760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610c39565b80600b60008460088111156137d8576137d86159a8565b60088111156137e9576137e96159a8565b81526020810191909152604001600020555050565b6138406040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160008152602001600081525090565b6001600160a01b0380841660009081526008602090815260408083209386168352600584019091528120805460018401546002850154929392613884929190614334565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345485549293509091829190829060019060ff1660038111156138d5576138d56159a8565b6002880154911491506000906138fc9063ffffffff80821691640100000000900416615e29565b63ffffffff16905060008167ffffffffffffffff81111561391f5761391f6156b4565b60405190808252806020026020018201604052801561396457816020015b604080518082019091526000808252602082015281526020019060019003908161393d5790505b50905060005b82811015613a7b57600289015460018a019060009061398f9063ffffffff1684615b5e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250508282815181106139ce576139ce615b71565b60200260200101819052508181815181106139eb576139eb615b71565b60200260200101516000015187613a029190615b5e565b96508380613a3857504385838381518110613a1f57613a1f615b71565b602002602001015160200151613a359190615b5e565b11155b15613a6957818181518110613a4f57613a4f615b71565b60200260200101516000015186613a669190615b5e565b95505b80613a7381615b87565b91505061396a565b506000613a91878b600301548c60040154614334565b90506000613aa8878c600301548d60040154614334565b90506040518060c001604052808f6001600160a01b031681526020018a81526020018b600001548152602001848152602001838152602001828152509b50505050505050505050505092915050565b33613b0a6000546001600160a01b031690565b6001600160a01b031614613b4e5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b038116613bca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c39565b6110d781614914565b600082600003613be4575082613bfc565b82613bef8386615ba0565b613bf99190615bb7565b90505b9392505050565b6007546002811480613c155750806003145b15613c9a57613c226115fa565b8210613c965760405162461bcd60e51b815260206004820152602e60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f2071756f72756d20746f6b656e730000000000000000000000000000000000006064820152608401610c39565b5050565b6003811115613c96576003600454613cb29190615bb7565b8210613c965760405162461bcd60e51b815260206004820152602b60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f20312f3320746f6b656e730000000000000000000000000000000000000000006064820152608401610c39565b6040516001600160a01b03808516602483015283166044820152606481018290526132dc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614964565b6040516001600160a01b0383166024820152604481018290526114d190849063a9059cbb60e01b90606401613d5a565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790556110d781614a49565b613e7260078281548110613e5857613e58615b71565b6000918252602090912001546001600160a01b0316614aaf565b8160078281548110613e8657613e86615b71565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c9682614a49565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840183905260a084015283518085019094528184528301849052909190613f0c826006614b56565b905080600681518110613f2157613f21615b71565b602002602001015167ffffffffffffffff811115613f4157613f416156b4565b604051908082528060200260200182016040528015613f8657816020015b6040805180820190915260008082526020820152815260200190600190039081613f5f5790505b508360a00181905250600081600681518110613fa457613fa4615b71565b6020026020010181815250506000805b6020840151518451101561412057613fcb84614c10565b909250905081600103613ff957613fe9613fe485614c4a565b614d07565b6001600160a01b03168552613fb4565b8160020361401e5761400a84614d12565b67ffffffffffffffff166020860152613fb4565b816003036140435761402f84614d12565b67ffffffffffffffff166040860152613fb4565b816004036140685761405484614d12565b67ffffffffffffffff166060860152613fb4565b8160050361408d5761407984614d12565b67ffffffffffffffff166080860152613fb4565b81600603614111576140a66140a185614c4a565b614d8d565b8560a00151846006815181106140be576140be615b71565b6020026020010151815181106140d6576140d6615b71565b6020026020010181905250826006815181106140f4576140f4615b71565b60200260200101805180919061410990615b87565b905250613fb4565b61411b8482614e32565b613fb4565b50505050919050565b60075460009061413b90600190615c00565b905060005b60075481101561424557826001600160a01b03166007828154811061416757614167615b71565b6000918252602090912001546001600160a01b03160361423357818110156141f7576007828154811061419c5761419c615b71565b600091825260209091200154600780546001600160a01b0390921691839081106141c8576141c8615b71565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600780548061420857614208615e4d565b600082815260209020810160001990810180546001600160a01b03191690550190556114d183614aaf565b8061423d81615b87565b915050614140565b5060405162461bcd60e51b815260206004820152601460248201527f4e6f7420626f6e6465642076616c696461746f720000000000000000000000006044820152606401610c39565b600054600160a01b900460ff166142e75760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c39565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081600003614345575082613bfc565b81613bef8486615ba0565b6001600160a01b03811660009081526001602052604090205460ff166143b85760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610fe8565b6001600160a01b03811660009081526001602052604090205460ff16156144725760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610c39565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610fe8565b600054600160a01b900460ff16156145145760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586143173390565b3360008181526005860160205260408120805490918491839190614574908490615c00565b925050819055508286600201600082825461458f9190615c00565b92505081905550838660010160008282546145aa9190615c00565b909155505060028601546001870154148015906145c957508054600210155b156145ee5780546002870180546000906145e4908490615c00565b9091555050600081555b8054158061460557508054670de0b6b3a764000011155b6146515760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682072656d61696e696e672073686172657300000000006044820152606401610c39565b6001865460ff166003811115614669576146696159a8565b036146f6576146a26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386613dbe565b816001600160a01b0316856001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c866040516146e791815260200190565b60405180910390a350506132dc565b6003865460ff16600381111561470e5761470e6159a8565b036147575783600460008282546147259190615c00565b9250508190555061474a85866001600160a01b0316846001600160a01b03161461227c565b6147575761475785614129565b6002810154600a9061477a9063ffffffff80821691640100000000900416615e29565b63ffffffff16106147cd5760405162461bcd60e51b815260206004820152601f60248201527f457863656564206d617820756e64656c65676174696f6e20656e7472696573006044820152606401610c39565b60006147e28588600301548960040154613bd3565b9050808760040160008282546147f89190615b5e565b92505081905550848760030160008282546148139190615b5e565b909155505060028201805463ffffffff6401000000009182900481166000908152600180870160205260409091208581554391810191909155835490939290041690600461486083615c2f565b91906101000a81548163ffffffff021916908363ffffffff16021790555050836001600160a01b0316876001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8a6001015486600001548a6148c890615c13565b6040805193845260208401929092529082015260600160405180910390a35050505050505050565b60008060006148ff8585614ea2565b9150915061490c81614f10565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006149b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150c69092919063ffffffff16565b8051909150156114d157808060200190518101906149d79190615e63565b6114d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c39565b6001600160a01b0381166000908152600860205260408120805460ff191660031781556007810180546fffffffffffffffff00000000000000001916905560018101546004805492939192909190614aa2908490615b5e565b9091555060039050612e1e565b6001600160a01b03811660009081526008602090815260408220805460ff191660029081178255909252600b90527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163454614b099043615b5e565b8160070160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001015460046000828254614b499190615c00565b9091555060029050612e1e565b8151606090614b66836001615b5e565b67ffffffffffffffff811115614b7e57614b7e6156b4565b604051908082528060200260200182016040528015614ba7578160200160208202803683370190505b5091506000805b60208601515186511015614c0757614bc586614c10565b80925081935050506001848381518110614be157614be1615b71565b60200260200101818151614bf59190615b5e565b905250614c028682614e32565b614bae565b50509092525090565b6000806000614c1e84614d12565b9050614c2b600882615bb7565b9250806007166005811115614c4257614c426159a8565b915050915091565b60606000614c5783614d12565b90506000818460000151614c6b9190615b5e565b9050836020015151811115614c7f57600080fd5b8167ffffffffffffffff811115614c9857614c986156b4565b6040519080825280601f01601f191660200182016040528015614cc2576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015614cfc578181015183820152614cf5602082615b5e565b9050614cda565b505050935250919050565b6000612330826150d5565b602080820151825181019091015160009182805b600a81101561038c5783811a9150614d3f816007615ba0565b82607f16901b8517945081608016600003614d7b57614d5f816001615b5e565b86518790614d6e908390615b5e565b9052509395945050505050565b80614d8581615b87565b915050614d26565b6040805180820182526000808252602080830182905283518085019094528184528301849052909190805b60208301515183511015614e2a57614dcf83614c10565b909250905081600103614df857614de8613fe484614c4a565b6001600160a01b03168452614db8565b81600203614e1b57614e11614e0c84614c4a565b6150fd565b6020850152614db8565b614e258382614e32565b614db8565b505050919050565b6000816005811115614e4657614e466159a8565b03614e54576114d182614d12565b6002816005811115614e6857614e686159a8565b0361038c576000614e7883614d12565b90508083600001818151614e8c9190615b5e565b905250602083015151835111156114d157600080fd5b6000808251604103614ed85760208301516040840151606085015160001a614ecc87828585615134565b94509450505050614f09565b8251604003614f015760208301516040840151614ef6868383615221565b935093505050614f09565b506000905060025b9250929050565b6000816004811115614f2457614f246159a8565b03614f2c5750565b6001816004811115614f4057614f406159a8565b03614f8d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c39565b6002816004811115614fa157614fa16159a8565b03614fee5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c39565b6003816004811115615002576150026159a8565b0361505a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c39565b600481600481111561506e5761506e6159a8565b036110d75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c39565b6060613bf98484600085615273565b600081516014146150e557600080fd5b50602001516c01000000000000000000000000900490565b600060208251111561510e57600080fd5b60208201519050815160206151239190615c00565b61512e906008615ba0565b1c919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561516b5750600090506003615218565b8460ff16601b1415801561518357508460ff16601c14155b156151945750600090506004615218565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156151e8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661521157600060019250925050615218565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161525760ff86901c601b615b5e565b905061526587828885615134565b935093505050935093915050565b6060824710156152eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c39565b6001600160a01b0385163b6153425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c39565b600080866001600160a01b0316858760405161535e9190615e80565b60006040518083038185875af1925050503d806000811461539b576040519150601f19603f3d011682016040523d82523d6000602084013e6153a0565b606091505b50915091506153b08282866153bb565b979650505050505050565b606083156153ca575081613bfc565b8251156153da5782518084602001fd5b8160405162461bcd60e51b8152600401610c399190615e9c565b80356001600160a01b038116811461540b57600080fd5b919050565b6000806040838503121561542357600080fd5b61542c836153f4565b946020939093013593505050565b80151581146110d757600080fd5b60006020828403121561545a57600080fd5b8135613bfc8161543a565b60006020828403121561547757600080fd5b613bfc826153f4565b60006020828403121561549257600080fd5b5035919050565b60008083601f8401126154ab57600080fd5b50813567ffffffffffffffff8111156154c357600080fd5b602083019150836020828501011115614f0957600080fd5b60008083601f8401126154ed57600080fd5b50813567ffffffffffffffff81111561550557600080fd5b6020830191508360208260051b8501011115614f0957600080fd5b6000806000806040858703121561553657600080fd5b843567ffffffffffffffff8082111561554e57600080fd5b61555a88838901615499565b9096509450602087013591508082111561557357600080fd5b50615580878288016154db565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b828110156155d757815180516001600160a01b031685528601518685015292840192908501906001016155a9565b5091979650505050505050565b80356009811061540b57600080fd5b60006020828403121561560557600080fd5b613bfc826155e4565b6000806040838503121561562157600080fd5b61562a836153f4565b9150602083013561563a8161543a565b809150509250929050565b803567ffffffffffffffff8116811461540b57600080fd5b60006020828403121561566f57600080fd5b613bfc82615645565b60008060006060848603121561568d57600080fd5b615696846153f4565b9250602084013591506156ab60408501615645565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156156f3576156f36156b4565b604052919050565b600082601f83011261570c57600080fd5b813567ffffffffffffffff811115615726576157266156b4565b615739601f8201601f19166020016156ca565b81815284602083860101111561574e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060006080888a03121561578657600080fd5b873567ffffffffffffffff8082111561579e57600080fd5b6157aa8b838c016156fb565b985060208a01359150808211156157c057600080fd5b6157cc8b838c016154db565b909850965060408a01359150808211156157e557600080fd5b6157f18b838c016154db565b909650945060608a013591508082111561580a57600080fd5b506158178a828b016154db565b989b979a50959850939692959293505050565b600067ffffffffffffffff80841115615845576158456156b4565b8360051b60206158568183016156ca565b8681529350908401908084018783111561586f57600080fd5b855b838110156158a3578035858111156158895760008081fd5b6158958a828a016156fb565b835250908201908201615871565b50505050509392505050565b600080604083850312156158c257600080fd5b823567ffffffffffffffff808211156158da57600080fd5b6158e6868387016156fb565b935060208501359150808211156158fc57600080fd5b508301601f8101851361590e57600080fd5b61591d8582356020840161582a565b9150509250929050565b60008060008060006060868803121561593f57600080fd5b615948866153f4565b9450602086013567ffffffffffffffff8082111561596557600080fd5b61597189838a01615499565b9096509450604088013591508082111561598a57600080fd5b5061599788828901615499565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b600481106159dc57634e487b7160e01b600052602160045260246000fd5b9052565b6020810161233082846159be565b60008060408385031215615a0157600080fd5b61542c836155e4565b60008060408385031215615a1d57600080fd5b615a26836153f4565b9150615a34602084016153f4565b90509250929050565b6000602080835260e083016001600160a01b038551168285015281850151604081818701528087015160608701526060870151915060c06080870152828251808552610100880191508584019450600093505b80841015615ab95784518051835286015186830152938501936001939093019290820190615a90565b50608088015160a088015260a088015160c0880152809550505050505092915050565b6101408101615aeb828d6159be565b6001600160a01b039a909a16602082015260408101989098526060880196909652608087019490945260a086019290925260c085015267ffffffffffffffff90811660e08501529081166101008401521661012090910152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561233057612330615b48565b634e487b7160e01b600052603260045260246000fd5b600060018201615b9957615b99615b48565b5060010190565b808202811582820484141761233057612330615b48565b600082615bd457634e487b7160e01b600052601260045260246000fd5b500490565b838152818360208301376000910160200190815292915050565b6000613bfc36848461582a565b8181038181111561233057612330615b48565b6000600160ff1b8201615c2857615c28615b48565b5060000390565b600063ffffffff808316818103615c4857615c48615b48565b6001019392505050565b60005b83811015615c6d578181015183820152602001615c55565b50506000910152565b60008151808452615c8e816020860160208601615c52565b601f01601f19169290920160200192915050565b60608152600a60608201527f636f6d6d697373696f6e00000000000000000000000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b90506001600160a01b03831660408301529392505050565b6060815260046060820152631a5b9a5d60e21b608082015260a060208201526000615ce960a0830185615c76565b60608152601360608201527f6d696e2d73656c662d64656c65676174696f6e00000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b60608152600660608201527f7369676e65720000000000000000000000000000000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000615dfa606083018789615dbd565b8281036020840152615e0d818688615dbd565b9150506001600160a01b03831660408301529695505050505050565b63ffffffff828116828216039080821115615e4657615e46615b48565b5092915050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615e7557600080fd5b8151613bfc8161543a565b60008251615e92818460208701615c52565b9190910192915050565b602081526000613bfc6020830184615c7656fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212206ca351f9b00bfdb3fb041ad51a3c3db4ced9fcc90478294acf0a09fb4c20424164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103855760003560e01c80636ea69d62116101d157806390e360f811610102578063b4f7fa34116100a0578063eb505dd51161006f578063eb505dd514610ad8578063eecefef814610b05578063f2fde38b14610b32578063fa52c7d814610b5257600080fd5b8063b4f7fa3414610a3f578063c8f9f98414610a5f578063dcfdc1e114610a98578063e909156d14610ab857600080fd5b80639b19251a116100dc5780639b19251a14610975578063a310624f146109a5578063a9fbc76c146109eb578063acc62ccf14610a1f57600080fd5b806390e360f8146109055780639146f1101461093557806392bb243c1461095557600080fd5b80638338f0e51161016f57806388d996e81161014957806388d996e81461089257806389f9aab5146108b25780638a74d5fe146108c75780638da5cb5b146108e757600080fd5b80638338f0e51461085157806383cfb318146108675780638456cb591461087d57600080fd5b80637a50dbd2116101ab5780637a50dbd2146107cc57806380f51c12146107ec57806382d7b4b81461081c57806382dc1ec41461083157600080fd5b80636ea69d62146107775780636ef8d66d1461079757806371bc0216146107ac57600080fd5b8063410ae02c116102b6578063525eba2111610254578063682dbc2211610223578063682dbc22146106e157806368706e54146107015780636b2c0f55146107215780636d3087831461074157600080fd5b8063525eba211461066c5780635c975abb1461068c5780635e593eff146106ab57806365d5d420146106cb57600080fd5b806347abfdbf1161029057806347abfdbf146105f257806349955e391461061257806351508f0a1461063257806351fb012d1461065257600080fd5b8063410ae02c1461057957806346fbf68e14610599578063473849bd146105d257600080fd5b80632fa4d12b116103235780633985c4e6116102fd5780633985c4e6146104d95780633af32abf146104f95780633f4ba83a146105425780634021d4d51461055757600080fd5b80632fa4d12b1461047757806336f1635f146104af578063386c024a146104c457600080fd5b8063145aa1161161035f578063145aa116146103f35780631a203257146104135780631cfe4f0b14610433578063291d95491461045757600080fd5b8063026e402b14610391578063052d9e7e146103b357806310154bad146103d357600080fd5b3661038c57005b600080fd5b34801561039d57600080fd5b506103b16103ac366004615410565b610bf0565b005b3480156103bf57600080fd5b506103b16103ce366004615448565b610e6e565b3480156103df57600080fd5b506103b16103ee366004615465565b610ed8565b3480156103ff57600080fd5b506103b161040e366004615480565b610ff3565b34801561041f57600080fd5b506103b161042e366004615480565b6110da565b34801561043f57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561046357600080fd5b506103b1610472366004615465565b61115f565b34801561048357600080fd5b50600c54610497906001600160a01b031681565b6040516001600160a01b03909116815260200161044e565b3480156104bb57600080fd5b506103b161126f565b3480156104d057600080fd5b506104446115fa565b3480156104e557600080fd5b506103b16104f4366004615520565b611627565b34801561050557600080fd5b50610532610514366004615465565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200161044e565b34801561054e57600080fd5b506103b1611dcc565b34801561056357600080fd5b5061056c611e35565b60405161044e919061558c565b34801561058557600080fd5b506104446105943660046155f3565b611f36565b3480156105a557600080fd5b506105326105b4366004615465565b6001600160a01b031660009081526001602052604090205460ff1690565b3480156105de57600080fd5b506103b16105ed366004615465565b611f75565b3480156105fe57600080fd5b5061053261060d36600461560e565b61227c565b34801561061e57600080fd5b506103b161062d36600461565d565b612336565b34801561063e57600080fd5b506103b161064d366004615465565b612497565b34801561065e57600080fd5b506003546105329060ff1681565b34801561067857600080fd5b506103b1610687366004615678565b612510565b34801561069857600080fd5b50600054600160a01b900460ff16610532565b3480156106b757600080fd5b506103b16106c6366004615480565b6129b2565b3480156106d757600080fd5b5061044460045481565b3480156106ed57600080fd5b506103b16106fc36600461576b565b612bc9565b34801561070d57600080fd5b506103b161071c366004615465565b612c2c565b34801561072d57600080fd5b506103b161073c366004615465565b612ca5565b34801561074d57600080fd5b5061049761075c366004615465565b6009602052600090815260409020546001600160a01b031681565b34801561078357600080fd5b50600d54610497906001600160a01b031681565b3480156107a357600080fd5b506103b1612d05565b3480156107b857600080fd5b506103b16107c7366004615465565b612d0e565b3480156107d857600080fd5b506103b16107e7366004615465565b612e56565b3480156107f857600080fd5b50610532610807366004615465565b60016020526000908152604090205460ff1681565b34801561082857600080fd5b506103b1613087565b34801561083d57600080fd5b506103b161084c366004615465565b61311e565b34801561085d57600080fd5b50610444600e5481565b34801561087357600080fd5b5061044460055481565b34801561088957600080fd5b506103b161317e565b34801561089e57600080fd5b506103b16108ad366004615410565b6131e5565b3480156108be57600080fd5b50600754610444565b3480156108d357600080fd5b506105326108e23660046158af565b6132e2565b3480156108f357600080fd5b506000546001600160a01b0316610497565b34801561091157600080fd5b50610532610920366004615480565b600a6020526000908152604090205460ff1681565b34801561094157600080fd5b506103b1610950366004615927565b6134c6565b34801561096157600080fd5b50610497610970366004615480565b613593565b34801561098157600080fd5b50610532610990366004615465565b60026020526000908152604090205460ff1681565b3480156109b157600080fd5b506109de6109c0366004615465565b6001600160a01b031660009081526008602052604090205460ff1690565b60405161044e91906159e0565b3480156109f757600080fd5b506104977f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2b57600080fd5b50610497610a3a366004615480565b6135bd565b348015610a4b57600080fd5b50610532610a5a366004615465565b6135cd565b348015610a6b57600080fd5b50610444610a7a366004615465565b6001600160a01b031660009081526008602052604090206001015490565b348015610aa457600080fd5b506103b1610ab3366004615410565b613605565b348015610ac457600080fd5b506103b1610ad33660046159ee565b6136fc565b348015610ae457600080fd5b50610444610af33660046155f3565b600b6020526000908152604090205481565b348015610b1157600080fd5b50610b25610b20366004615a0a565b6137fe565b60405161044e9190615a3d565b348015610b3e57600080fd5b506103b1610b4d366004615465565b613af7565b348015610b5e57600080fd5b50610bda610b6d366004615465565b600860205260009081526040902080546001820154600283015460038401546004850154600686015460079096015460ff8616966101009096046001600160a01b0316959067ffffffffffffffff80821691680100000000000000008104821691600160801b909104168a565b60405161044e9a99989796959493929190615adc565b600054600160a01b900460ff1615610c425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b33670de0b6b3a7640000821015610c9b5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e742069732031205851535400000000000000006044820152606401610c39565b6001600160a01b038316600090815260086020526040812090815460ff166003811115610cca57610cca6159a8565b03610d175760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6000610d2c8483600101548460020154613bd3565b6001600160a01b0384166000908152600584016020526040812080549293509183918391610d5b908490615b5e565b9250508190555081836002016000828254610d769190615b5e565b9250508190555084836001016000828254610d919190615b5e565b9091555060039050835460ff166003811115610daf57610daf6159a8565b03610dd9578460046000828254610dc69190615b5e565b90915550506001830154610dd990613c03565b610e0e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853088613d26565b6001830154815460408051928352602083019190915281018690526001600160a01b0380861691908816907f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea9060600160405180910390a3505050505050565b33610e816000546001600160a01b031690565b6001600160a01b031614610ec55760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6003805460ff1916911515919091179055565b33610eeb6000546001600160a01b031690565b6001600160a01b031614610f2f5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b03811660009081526002602052604090205460ff1615610f985760405162461bcd60e51b815260206004820152601360248201527f416c72656164792077686974656c6973746564000000000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f91015b60405180910390a150565b600054600160a01b900460ff1661104c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c39565b3361105f6000546001600160a01b031690565b6001600160a01b0316146110a35760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613dbe565b50565b336110ed6000546001600160a01b031690565b6001600160a01b0316146111315760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935855565b336111726000546001600160a01b031690565b6001600160a01b0316146111b65760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b03811660009081526002602052604090205460ff1661121e5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b69101610fe8565b336000818152600960205260409020546001600160a01b0316156112a85750336000908152600960205260409020546001600160a01b03165b6001600160a01b03811660009081526008602052604090206001815460ff1660038111156112d8576112d86159a8565b14806112f957506002815460ff1660038111156112f7576112f76159a8565b145b6113455760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c39565b600781015467ffffffffffffffff164310156113a35760405162461bcd60e51b815260206004820152601660248201527f426f6e6420626c6f636b206e6f742072656163686564000000000000000000006044820152606401610c39565b6005544310156113f55760405162461bcd60e51b815260206004820152601b60248201527f546f6f206672657175656e742076616c696461746f7220626f6e6400000000006044820152606401610c39565b6007600052600b6020527ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a965461142b9043615b5e565b60055561143982600161227c565b6114855760405162461bcd60e51b815260206004820152601360248201527f4e6f742068617665206d696e20746f6b656e73000000000000000000000000006044820152606401610c39565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e546007548111156114d6576114c483613dee565b6114d18260010154613c03565b505050565b6000196000805b83811015611588578260086000600784815481106114fd576114fd615b71565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154101561157657809150600860006007838154811061154557611545615b71565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015492508215611588575b8061158081615b87565b9150506114dd565b50818460010154116115dc5760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420746f6b656e73000000000000000000000000006044820152606401610c39565b6115e68582613e42565b6115f38460010154613c03565b5050505050565b60006003600454600261160d9190615ba0565b6116179190615bb7565b611622906001615b5e565b905090565b600054600160a01b900460ff16156116745760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b600046306040516020016116ca92919091825260601b6bffffffffffffffffffffffff191660208201527f536c617368000000000000000000000000000000000000000000000000000000603482015260390190565b6040516020818303038152906040528051906020012090506117148186866040516020016116fa93929190615bd9565b60408051601f198184030181529190526108e28486615bf3565b50600061175686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ebd92505050565b9050806060015167ffffffffffffffff1642106117b55760405162461bcd60e51b815260206004820152600d60248201527f536c6173682065787069726564000000000000000000000000000000000000006044820152606401610c39565b620f4240816040015167ffffffffffffffff1611156118165760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736c61736820666163746f720000000000000000000000006044820152606401610c39565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935854604082015167ffffffffffffffff16111561189f5760405162461bcd60e51b815260206004820152601760248201527f457863656564206d617820736c61736820666163746f720000000000000000006044820152606401610c39565b60208082015167ffffffffffffffff166000908152600a909152604090205460ff161561190e5760405162461bcd60e51b815260206004820152601060248201527f5573656420736c617368206e6f6e6365000000000000000000000000000000006044820152606401610c39565b60208082015167ffffffffffffffff166000908152600a82526040808220805460ff1916600117905583516001600160a01b0381168352600890935290206003815460ff166003811115611964576119646159a8565b148061198557506002815460ff166003811115611983576119836159a8565b145b6119d15760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c39565b6000620f4240846040015167ffffffffffffffff1683600101546119f59190615ba0565b6119ff9190615bb7565b905080826001016000828254611a159190615c00565b9091555060039050825460ff166003811115611a3357611a336159a8565b03611a81578060046000828254611a4a9190615c00565b9091555050608084015167ffffffffffffffff16151580611a735750611a7183600161227c565b155b15611a8157611a8183614129565b6002825460ff166003811115611a9957611a996159a8565b148015611ab457506000846080015167ffffffffffffffff16115b15611af7576080840151611ad29067ffffffffffffffff1643615b5e565b60078301805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b60006001600160a01b0316836001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8460010154600085611b3e90615c13565b6040805193845260208401929092529082015260600160405180910390a36000620f4240856040015167ffffffffffffffff168460030154611b809190615ba0565b611b8a9190615bb7565b905080836003016000828254611ba09190615c00565b90915550611bb090508183615b5e565b91506000805b8660a0015151811015611d4a5760008760a001518281518110611bdb57611bdb615b71565b6020026020010151905084816020015184611bf69190615b5e565b1115611c0c57611c068386615c00565b60208201525b602081015115611d37576020810151611c259084615b5e565b81519093506001600160a01b0316611cb0576020810151611c72906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613dbe565b60208082015160405190815233917fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a3910160405180910390a2611d37565b80516020820151611ceb916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691613dbe565b80600001516001600160a01b03167fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a38260200151604051611d2e91815260200190565b60405180910390a25b5080611d4281615b87565b915050611bb6565b50611d558184615c00565b600e6000828254611d669190615b5e565b90915550506020808701516040805167ffffffffffffffff90921682529181018590526001600160a01b038716917f10863f35bc5db9fda133333468bf7b1ceaaa88cb4263c061f890f97b79bf9008910160405180910390a25050505050505050505050565b3360009081526001602052604090205460ff16611e2b5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c39565b611e3361428e565b565b60075460609060009067ffffffffffffffff811115611e5657611e566156b4565b604051908082528060200260200182016040528015611e9b57816020015b6040805180820190915260008082526020820152815260200190600190039081611e745790505b50905060005b600754811015611f3057600060078281548110611ec057611ec0615b71565b60009182526020808320909101546040805180820182526001600160a01b039092168083528085526008845293206001015491810191909152845191925090849084908110611f1157611f11615b71565b6020026020010181905250508080611f2890615b87565b915050611ea1565b50919050565b6000600b6000836008811115611f4e57611f4e6159a8565b6008811115611f5f57611f5f6159a8565b8152602001908152602001600020549050919050565b6001600160a01b03811660009081526008602052604081203391815460ff166003811115611fa557611fa56159a8565b03611ff25760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6001600160a01b03821660009081526005820160209081526040822060028352600b9091527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345483549192909160019060ff166003811115612056576120566159a8565b60028501549114915063ffffffff1660005b600285015463ffffffff6401000000009091048116908316101561211a5782806120b8575063ffffffff8216600090815260018087016020526040909120015443906120b5908690615b5e565b11155b156121035763ffffffff821660009081526001860160205260409020546120df9082615b5e565b63ffffffff8316600090815260018088016020526040822082815501559050612108565b61211a565b8161211281615c2f565b925050612068565b60028501805463ffffffff191663ffffffff8416179055806121a45760405162461bcd60e51b815260206004820152602560248201527f4e6f20756e64656c65676174696f6e20726561647920746f20626520636f6d7060448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152608401610c39565b60006121b98288600301548960040154614334565b9050818760040160008282546121cf9190615c00565b92505081905550808760030160008282546121ea9190615c00565b9091555061222490506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168983613dbe565b876001600160a01b0316896001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8360405161226991815260200190565b60405180910390a3505050505050505050565b6001600160a01b03821660009081526008602090815260408220600181015460048452600b9092527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784549091908110156122db57600092505050612330565b8315612329576001600160a01b0385166000908152600583016020526040812054600284015461230d91908490614334565b905082600601548110156123275760009350505050612330565b505b6001925050505b92915050565b33600081815260086020526040812090815460ff16600381111561235c5761235c6159a8565b036123a95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6127108367ffffffffffffffff1611156124055760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e65772072617465000000000000000000000000000000006044820152606401610c39565b60078101805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8616908102919091179091556040805160208101929092526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615ca2565b60405180910390a2505050565b336124aa6000546001600160a01b031690565b6001600160a01b0316146124ee5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff161561255d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b60035460ff16156125c7573360009081526002602052604090205460ff166125c75760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610c39565b33600081815260086020526040812090815460ff1660038111156125ed576125ed6159a8565b1461263a5760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f7220697320696e697469616c697a656400000000000000006044820152606401610c39565b6001600160a01b03851660009081526008602052604081205460ff166003811115612667576126676159a8565b146126b45760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c39565b6001600160a01b03828116600090815260096020526040902054161561271c5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206973206f74686572207369676e6572000000000000006044820152606401610c39565b6001600160a01b0385811660009081526009602052604090205416156127845760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c39565b6127108367ffffffffffffffff1611156127e05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401610c39565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f45484101561285b5760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c39565b80547fffffffffffffffffffffff0000000000000000000000000000000000000000001660ff196101006001600160a01b03888116918202929092169290921760019081178455600680850188905560078501805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8a1602179055805491820190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031990811692861692831790915560009283526009602052604090922080549092161790556129338285610bf0565b604080516001600160a01b03878116602083015291810186905267ffffffffffffffff85166060820152908316907f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c9060800160408051601f19818403018152908290526129a391600090615d01565b60405180910390a25050505050565b33600081815260086020526040812090815460ff1660038111156129d8576129d86159a8565b03612a255760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f454831015612aa05760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c39565b8060060154831015612b6c576003815460ff166003811115612ac457612ac46159a8565b03612b115760405162461bcd60e51b815260206004820152601360248201527f56616c696461746f7220697320626f6e646564000000000000000000000000006044820152606401610c39565b6006600052600b6020527f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc54612b479043615b5e565b60078201805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b6006810183905560408051602081018590526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615d2f565b612bd7876108e28789615bf3565b612c235760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f20766572696679207369677300000000000000000000006044820152606401610c39565b50505050505050565b33612c3f6000546001600160a01b031690565b6001600160a01b031614612c835760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b33612cb86000546001600160a01b031690565b6001600160a01b031614612cfc5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d781614350565b611e3333614350565b6001600160a01b03811660009081526008602052604090206002815460ff166003811115612d3e57612d3e6159a8565b14612d8b5760405162461bcd60e51b815260206004820152601760248201527f56616c696461746f72206e6f7420756e626f6e64696e670000000000000000006044820152606401610c39565b600781015468010000000000000000900467ffffffffffffffff16431015612df55760405162461bcd60e51b815260206004820152601860248201527f556e626f6e6420626c6f636b206e6f74207265616368656400000000000000006044820152606401610c39565b805460ff1916600190811782556007820180546fffffffffffffffff0000000000000000191690555b6040516001600160a01b038416907fd5e59fa85493a77fb57f6bf9080f2f71fde9de0eadc62b27b43b6263f3f1f59a90600090a35050565b33600081815260086020526040812090815460ff166003811115612e7c57612e7c6159a8565b03612ec95760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206e6f7420696e697469616c697a6564000000000000006044820152606401610c39565b6001600160a01b038381166000908152600960205260409020541615612f315760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c39565b816001600160a01b0316836001600160a01b031614612fc4576001600160a01b03831660009081526008602052604081205460ff166003811115612f7757612f776159a8565b14612fc45760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c39565b8054610100908190046001600160a01b03908116600090815260096020908152604080832080546001600160a01b031990811690915586547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1689861696870217875585845292819020805490931693871693841790925581519081019390935290917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261248a91600090615d76565b6000600e54116130d95760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610c39565b600d54600e54613117916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690613dbe565b6000600e55565b336131316000546001600160a01b031690565b6001600160a01b0316146131755760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6110d781614409565b3360009081526001602052604090205460ff166131dd5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c39565b611e336144c7565b670de0b6b3a764000081101561323d5760405162461bcd60e51b815260206004820152601960248201527f4d696e696d616c20616d6f756e742069732031207368617265000000000000006044820152606401610c39565b6001600160a01b038216600090815260086020526040812090815460ff16600381111561326c5761326c6159a8565b036132b95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b60006132ce8383600101548460020154614334565b90506132dc8285838661454f565b50505050565b60008061334384805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600080806133516115fa565b905060005b865181101561347d57600061338d88838151811061337657613376615b71565b6020026020010151876148f090919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116133f05760405162461bcd60e51b815260206004820152601e60248201527f5369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610c39565b6001600160a01b038082166000908152600960209081526040808320549093168252600890522090935083906003815460ff166003811115613434576134346159a8565b1461344057505061346b565b600181015461344f9087615b5e565b9550838610613468576001975050505050505050612330565b50505b8061347581615b87565b915050613356565b5060405162461bcd60e51b815260206004820152601260248201527f51756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610c39565b6001600160a01b038516600090815260086020526040812090815460ff1660038111156134f5576134f56159a8565b036135425760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b856001600160a01b03167f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c8686868633604051613583959493929190615de6565b60405180910390a2505050505050565b600681815481106135a357600080fd5b6000918252602090912001546001600160a01b0316905081565b600781815481106135a357600080fd5b600060036001600160a01b03831660009081526008602052604090205460ff1660038111156135fe576135fe6159a8565b1492915050565b670de0b6b3a764000081101561365d5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e742069732031205851535400000000000000006044820152606401610c39565b6001600160a01b038216600090815260086020526040812090815460ff16600381111561368c5761368c6159a8565b036136d95760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c39565b60006136ee8383600101548460020154613bd3565b90506132dc8285858461454f565b600c546001600160a01b031633146137565760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420676f7620636f6e74726163740000000000006044820152606401610c39565b600382600881111561376a5761376a6159a8565b036137c1576007548110156137c15760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610c39565b80600b60008460088111156137d8576137d86159a8565b60088111156137e9576137e96159a8565b81526020810191909152604001600020555050565b6138406040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160008152602001600081525090565b6001600160a01b0380841660009081526008602090815260408083209386168352600584019091528120805460018401546002850154929392613884929190614334565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345485549293509091829190829060019060ff1660038111156138d5576138d56159a8565b6002880154911491506000906138fc9063ffffffff80821691640100000000900416615e29565b63ffffffff16905060008167ffffffffffffffff81111561391f5761391f6156b4565b60405190808252806020026020018201604052801561396457816020015b604080518082019091526000808252602082015281526020019060019003908161393d5790505b50905060005b82811015613a7b57600289015460018a019060009061398f9063ffffffff1684615b5e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250508282815181106139ce576139ce615b71565b60200260200101819052508181815181106139eb576139eb615b71565b60200260200101516000015187613a029190615b5e565b96508380613a3857504385838381518110613a1f57613a1f615b71565b602002602001015160200151613a359190615b5e565b11155b15613a6957818181518110613a4f57613a4f615b71565b60200260200101516000015186613a669190615b5e565b95505b80613a7381615b87565b91505061396a565b506000613a91878b600301548c60040154614334565b90506000613aa8878c600301548d60040154614334565b90506040518060c001604052808f6001600160a01b031681526020018a81526020018b600001548152602001848152602001838152602001828152509b50505050505050505050505092915050565b33613b0a6000546001600160a01b031690565b6001600160a01b031614613b4e5760405162461bcd60e51b81526020600482018190526024820152600080516020615eb08339815191526044820152606401610c39565b6001600160a01b038116613bca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c39565b6110d781614914565b600082600003613be4575082613bfc565b82613bef8386615ba0565b613bf99190615bb7565b90505b9392505050565b6007546002811480613c155750806003145b15613c9a57613c226115fa565b8210613c965760405162461bcd60e51b815260206004820152602e60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f2071756f72756d20746f6b656e730000000000000000000000000000000000006064820152608401610c39565b5050565b6003811115613c96576003600454613cb29190615bb7565b8210613c965760405162461bcd60e51b815260206004820152602b60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f20312f3320746f6b656e730000000000000000000000000000000000000000006064820152608401610c39565b6040516001600160a01b03808516602483015283166044820152606481018290526132dc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614964565b6040516001600160a01b0383166024820152604481018290526114d190849063a9059cbb60e01b90606401613d5a565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790556110d781614a49565b613e7260078281548110613e5857613e58615b71565b6000918252602090912001546001600160a01b0316614aaf565b8160078281548110613e8657613e86615b71565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c9682614a49565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840183905260a084015283518085019094528184528301849052909190613f0c826006614b56565b905080600681518110613f2157613f21615b71565b602002602001015167ffffffffffffffff811115613f4157613f416156b4565b604051908082528060200260200182016040528015613f8657816020015b6040805180820190915260008082526020820152815260200190600190039081613f5f5790505b508360a00181905250600081600681518110613fa457613fa4615b71565b6020026020010181815250506000805b6020840151518451101561412057613fcb84614c10565b909250905081600103613ff957613fe9613fe485614c4a565b614d07565b6001600160a01b03168552613fb4565b8160020361401e5761400a84614d12565b67ffffffffffffffff166020860152613fb4565b816003036140435761402f84614d12565b67ffffffffffffffff166040860152613fb4565b816004036140685761405484614d12565b67ffffffffffffffff166060860152613fb4565b8160050361408d5761407984614d12565b67ffffffffffffffff166080860152613fb4565b81600603614111576140a66140a185614c4a565b614d8d565b8560a00151846006815181106140be576140be615b71565b6020026020010151815181106140d6576140d6615b71565b6020026020010181905250826006815181106140f4576140f4615b71565b60200260200101805180919061410990615b87565b905250613fb4565b61411b8482614e32565b613fb4565b50505050919050565b60075460009061413b90600190615c00565b905060005b60075481101561424557826001600160a01b03166007828154811061416757614167615b71565b6000918252602090912001546001600160a01b03160361423357818110156141f7576007828154811061419c5761419c615b71565b600091825260209091200154600780546001600160a01b0390921691839081106141c8576141c8615b71565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600780548061420857614208615e4d565b600082815260209020810160001990810180546001600160a01b03191690550190556114d183614aaf565b8061423d81615b87565b915050614140565b5060405162461bcd60e51b815260206004820152601460248201527f4e6f7420626f6e6465642076616c696461746f720000000000000000000000006044820152606401610c39565b600054600160a01b900460ff166142e75760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c39565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081600003614345575082613bfc565b81613bef8486615ba0565b6001600160a01b03811660009081526001602052604090205460ff166143b85760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610c39565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610fe8565b6001600160a01b03811660009081526001602052604090205460ff16156144725760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610c39565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610fe8565b600054600160a01b900460ff16156145145760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c39565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586143173390565b3360008181526005860160205260408120805490918491839190614574908490615c00565b925050819055508286600201600082825461458f9190615c00565b92505081905550838660010160008282546145aa9190615c00565b909155505060028601546001870154148015906145c957508054600210155b156145ee5780546002870180546000906145e4908490615c00565b9091555050600081555b8054158061460557508054670de0b6b3a764000011155b6146515760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682072656d61696e696e672073686172657300000000006044820152606401610c39565b6001865460ff166003811115614669576146696159a8565b036146f6576146a26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386613dbe565b816001600160a01b0316856001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c866040516146e791815260200190565b60405180910390a350506132dc565b6003865460ff16600381111561470e5761470e6159a8565b036147575783600460008282546147259190615c00565b9250508190555061474a85866001600160a01b0316846001600160a01b03161461227c565b6147575761475785614129565b6002810154600a9061477a9063ffffffff80821691640100000000900416615e29565b63ffffffff16106147cd5760405162461bcd60e51b815260206004820152601f60248201527f457863656564206d617820756e64656c65676174696f6e20656e7472696573006044820152606401610c39565b60006147e28588600301548960040154613bd3565b9050808760040160008282546147f89190615b5e565b92505081905550848760030160008282546148139190615b5e565b909155505060028201805463ffffffff6401000000009182900481166000908152600180870160205260409091208581554391810191909155835490939290041690600461486083615c2f565b91906101000a81548163ffffffff021916908363ffffffff16021790555050836001600160a01b0316876001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8a6001015486600001548a6148c890615c13565b6040805193845260208401929092529082015260600160405180910390a35050505050505050565b60008060006148ff8585614ea2565b9150915061490c81614f10565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006149b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150c69092919063ffffffff16565b8051909150156114d157808060200190518101906149d79190615e63565b6114d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c39565b6001600160a01b0381166000908152600860205260408120805460ff191660031781556007810180546fffffffffffffffff00000000000000001916905560018101546004805492939192909190614aa2908490615b5e565b9091555060039050612e1e565b6001600160a01b03811660009081526008602090815260408220805460ff191660029081178255909252600b90527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163454614b099043615b5e565b8160070160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001015460046000828254614b499190615c00565b9091555060029050612e1e565b8151606090614b66836001615b5e565b67ffffffffffffffff811115614b7e57614b7e6156b4565b604051908082528060200260200182016040528015614ba7578160200160208202803683370190505b5091506000805b60208601515186511015614c0757614bc586614c10565b80925081935050506001848381518110614be157614be1615b71565b60200260200101818151614bf59190615b5e565b905250614c028682614e32565b614bae565b50509092525090565b6000806000614c1e84614d12565b9050614c2b600882615bb7565b9250806007166005811115614c4257614c426159a8565b915050915091565b60606000614c5783614d12565b90506000818460000151614c6b9190615b5e565b9050836020015151811115614c7f57600080fd5b8167ffffffffffffffff811115614c9857614c986156b4565b6040519080825280601f01601f191660200182016040528015614cc2576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015614cfc578181015183820152614cf5602082615b5e565b9050614cda565b505050935250919050565b6000612330826150d5565b602080820151825181019091015160009182805b600a81101561038c5783811a9150614d3f816007615ba0565b82607f16901b8517945081608016600003614d7b57614d5f816001615b5e565b86518790614d6e908390615b5e565b9052509395945050505050565b80614d8581615b87565b915050614d26565b6040805180820182526000808252602080830182905283518085019094528184528301849052909190805b60208301515183511015614e2a57614dcf83614c10565b909250905081600103614df857614de8613fe484614c4a565b6001600160a01b03168452614db8565b81600203614e1b57614e11614e0c84614c4a565b6150fd565b6020850152614db8565b614e258382614e32565b614db8565b505050919050565b6000816005811115614e4657614e466159a8565b03614e54576114d182614d12565b6002816005811115614e6857614e686159a8565b0361038c576000614e7883614d12565b90508083600001818151614e8c9190615b5e565b905250602083015151835111156114d157600080fd5b6000808251604103614ed85760208301516040840151606085015160001a614ecc87828585615134565b94509450505050614f09565b8251604003614f015760208301516040840151614ef6868383615221565b935093505050614f09565b506000905060025b9250929050565b6000816004811115614f2457614f246159a8565b03614f2c5750565b6001816004811115614f4057614f406159a8565b03614f8d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c39565b6002816004811115614fa157614fa16159a8565b03614fee5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c39565b6003816004811115615002576150026159a8565b0361505a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c39565b600481600481111561506e5761506e6159a8565b036110d75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c39565b6060613bf98484600085615273565b600081516014146150e557600080fd5b50602001516c01000000000000000000000000900490565b600060208251111561510e57600080fd5b60208201519050815160206151239190615c00565b61512e906008615ba0565b1c919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561516b5750600090506003615218565b8460ff16601b1415801561518357508460ff16601c14155b156151945750600090506004615218565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156151e8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661521157600060019250925050615218565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161525760ff86901c601b615b5e565b905061526587828885615134565b935093505050935093915050565b6060824710156152eb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c39565b6001600160a01b0385163b6153425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c39565b600080866001600160a01b0316858760405161535e9190615e80565b60006040518083038185875af1925050503d806000811461539b576040519150601f19603f3d011682016040523d82523d6000602084013e6153a0565b606091505b50915091506153b08282866153bb565b979650505050505050565b606083156153ca575081613bfc565b8251156153da5782518084602001fd5b8160405162461bcd60e51b8152600401610c399190615e9c565b80356001600160a01b038116811461540b57600080fd5b919050565b6000806040838503121561542357600080fd5b61542c836153f4565b946020939093013593505050565b80151581146110d757600080fd5b60006020828403121561545a57600080fd5b8135613bfc8161543a565b60006020828403121561547757600080fd5b613bfc826153f4565b60006020828403121561549257600080fd5b5035919050565b60008083601f8401126154ab57600080fd5b50813567ffffffffffffffff8111156154c357600080fd5b602083019150836020828501011115614f0957600080fd5b60008083601f8401126154ed57600080fd5b50813567ffffffffffffffff81111561550557600080fd5b6020830191508360208260051b8501011115614f0957600080fd5b6000806000806040858703121561553657600080fd5b843567ffffffffffffffff8082111561554e57600080fd5b61555a88838901615499565b9096509450602087013591508082111561557357600080fd5b50615580878288016154db565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b828110156155d757815180516001600160a01b031685528601518685015292840192908501906001016155a9565b5091979650505050505050565b80356009811061540b57600080fd5b60006020828403121561560557600080fd5b613bfc826155e4565b6000806040838503121561562157600080fd5b61562a836153f4565b9150602083013561563a8161543a565b809150509250929050565b803567ffffffffffffffff8116811461540b57600080fd5b60006020828403121561566f57600080fd5b613bfc82615645565b60008060006060848603121561568d57600080fd5b615696846153f4565b9250602084013591506156ab60408501615645565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156156f3576156f36156b4565b604052919050565b600082601f83011261570c57600080fd5b813567ffffffffffffffff811115615726576157266156b4565b615739601f8201601f19166020016156ca565b81815284602083860101111561574e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060006080888a03121561578657600080fd5b873567ffffffffffffffff8082111561579e57600080fd5b6157aa8b838c016156fb565b985060208a01359150808211156157c057600080fd5b6157cc8b838c016154db565b909850965060408a01359150808211156157e557600080fd5b6157f18b838c016154db565b909650945060608a013591508082111561580a57600080fd5b506158178a828b016154db565b989b979a50959850939692959293505050565b600067ffffffffffffffff80841115615845576158456156b4565b8360051b60206158568183016156ca565b8681529350908401908084018783111561586f57600080fd5b855b838110156158a3578035858111156158895760008081fd5b6158958a828a016156fb565b835250908201908201615871565b50505050509392505050565b600080604083850312156158c257600080fd5b823567ffffffffffffffff808211156158da57600080fd5b6158e6868387016156fb565b935060208501359150808211156158fc57600080fd5b508301601f8101851361590e57600080fd5b61591d8582356020840161582a565b9150509250929050565b60008060008060006060868803121561593f57600080fd5b615948866153f4565b9450602086013567ffffffffffffffff8082111561596557600080fd5b61597189838a01615499565b9096509450604088013591508082111561598a57600080fd5b5061599788828901615499565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b600481106159dc57634e487b7160e01b600052602160045260246000fd5b9052565b6020810161233082846159be565b60008060408385031215615a0157600080fd5b61542c836155e4565b60008060408385031215615a1d57600080fd5b615a26836153f4565b9150615a34602084016153f4565b90509250929050565b6000602080835260e083016001600160a01b038551168285015281850151604081818701528087015160608701526060870151915060c06080870152828251808552610100880191508584019450600093505b80841015615ab95784518051835286015186830152938501936001939093019290820190615a90565b50608088015160a088015260a088015160c0880152809550505050505092915050565b6101408101615aeb828d6159be565b6001600160a01b039a909a16602082015260408101989098526060880196909652608087019490945260a086019290925260c085015267ffffffffffffffff90811660e08501529081166101008401521661012090910152919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561233057612330615b48565b634e487b7160e01b600052603260045260246000fd5b600060018201615b9957615b99615b48565b5060010190565b808202811582820484141761233057612330615b48565b600082615bd457634e487b7160e01b600052601260045260246000fd5b500490565b838152818360208301376000910160200190815292915050565b6000613bfc36848461582a565b8181038181111561233057612330615b48565b6000600160ff1b8201615c2857615c28615b48565b5060000390565b600063ffffffff808316818103615c4857615c48615b48565b6001019392505050565b60005b83811015615c6d578181015183820152602001615c55565b50506000910152565b60008151808452615c8e816020860160208601615c52565b601f01601f19169290920160200192915050565b60608152600a60608201527f636f6d6d697373696f6e00000000000000000000000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b90506001600160a01b03831660408301529392505050565b6060815260046060820152631a5b9a5d60e21b608082015260a060208201526000615ce960a0830185615c76565b60608152601360608201527f6d696e2d73656c662d64656c65676174696f6e00000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b60608152600660608201527f7369676e65720000000000000000000000000000000000000000000000000000608082015260a060208201526000615ce960a0830185615c76565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000615dfa606083018789615dbd565b8281036020840152615e0d818688615dbd565b9150506001600160a01b03831660408301529695505050505050565b63ffffffff828116828216039080821115615e4657615e46615b48565b5092915050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615e7557600080fd5b8151613bfc8161543a565b60008251615e92818460208701615c52565b9190910192915050565b602081526000613bfc6020830184615c7656fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212206ca351f9b00bfdb3fb041ad51a3c3db4ced9fcc90478294acf0a09fb4c20424164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondValidator()": {
        "details": "caller can be either validator owner or signer"
      },
      "completeUndelegate(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        }
      },
      "confirmUnbondedValidator(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        }
      },
      "constructor": {
        "params": {
          "_advanceNoticePeriod": "the wait time after the announcement and prior to the effective date of an update",
          "_maxBondedValidators": "the maximum number of bonded validators",
          "_maxSlashFactor": "maximal slashing factor (1e6 = 100%)",
          "_minSelfDelegation": "minimal amount of self-delegated tokens",
          "_minValidatorTokens": "the global minimum token amount requirement for bonded validator",
          "_proposalDeposit": "required deposit amount for a governance proposal",
          "_unbondingPeriod": "the locking time for funds locked before withdrawn",
          "_validatorBondInterval": "min interval between bondValidator",
          "_votingPeriod": "voting timeout for a governance proposal",
          "_xqsTokenAddress": "address of Celer Token Contract"
        }
      },
      "delegate(address,uint256)": {
        "details": "Minimal amount per delegate operation is 1 XQST",
        "params": {
          "_tokens": "the amount of delegated XQST tokens",
          "_valAddr": "validator to delegate"
        }
      },
      "drainToken(uint256)": {
        "details": "emergency use only",
        "params": {
          "_amount": "drained token amount"
        }
      },
      "getBondedValidatorNum()": {
        "returns": {
          "_0": "the number of bonded validators"
        }
      },
      "getBondedValidatorsTokens()": {
        "returns": {
          "_0": "addresses and token amounts of bonded validators"
        }
      },
      "getDelegatorInfo(address,address)": {
        "params": {
          "_delAddr": "the address of the delegator",
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "DelegatorInfo from the given validator"
        }
      },
      "getParamValue(uint8)": {
        "params": {
          "_name": "the key of this parameter"
        },
        "returns": {
          "_0": "the value of this parameter"
        }
      },
      "getQuorumTokens()": {
        "returns": {
          "_0": "the quorum amount"
        }
      },
      "getValidatorNum()": {
        "returns": {
          "_0": "the number of validators"
        }
      },
      "getValidatorStatus(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "Validator status"
        }
      },
      "getValidatorTokens(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "Validator token amount"
        }
      },
      "hasMinRequiredTokens(address,bool)": {
        "params": {
          "_checkSelfDelegation": "check self delegation",
          "_valAddr": "the address of the validator"
        }
      },
      "initializeValidator(address,uint256,uint64)": {
        "params": {
          "_commissionRate": "the self-declaimed commission rate",
          "_minSelfDelegation": "minimal amount of tokens staked by the validator itself",
          "_signer": "signer address"
        }
      },
      "isBondedValidator(address)": {
        "params": {
          "_addr": "the address to check"
        },
        "returns": {
          "_0": "the given address is a validator or not"
        }
      },
      "isWhitelisted(address)": {
        "returns": {
          "_0": "is account whitelisted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "slash(bytes,bytes[])": {
        "params": {
          "_sigs": "list of validator signatures",
          "_slashRequest": "slash request bytes coded in protobuf"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "undelegateShares(address,uint256)": {
        "details": "Tokens are delegated by the msgSender to the validator",
        "params": {
          "_shares": "undelegate shares",
          "_valAddr": "the address of the validator"
        }
      },
      "undelegateTokens(address,uint256)": {
        "details": "Tokens are delegated by the msgSender to the validator",
        "params": {
          "_tokens": "undelegate tokens",
          "_valAddr": "the address of the validator"
        }
      },
      "updateCommissionRate(uint64)": {
        "params": {
          "_newRate": "new commission rate"
        }
      },
      "updateMinSelfDelegation(uint256)": {
        "params": {
          "_minSelfDelegation": "minimal amount of tokens staked by the validator itself"
        }
      },
      "updateValidatorSigner(address)": {
        "params": {
          "_signer": "signer address"
        }
      },
      "verifySignatures(bytes,bytes[])": {
        "params": {
          "_msg": "signed message",
          "_sigs": "list of validator signatures"
        }
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_msg": "signed message",
          "_sigs": "the list of signatures"
        }
      }
    },
    "title": "A Staking contract shared by all external sidechains and apps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelisted(address)": {
        "notice": "Add an account to whitelist"
      },
      "bondValidator()": {
        "notice": "Candidate claims to become a bonded validator"
      },
      "completeUndelegate(address)": {
        "notice": "Complete pending undelegations from a validator"
      },
      "confirmUnbondedValidator(address)": {
        "notice": "Confirm validator status from Unbonding to Unbonded"
      },
      "constructor": {
        "notice": "Staking constructor"
      },
      "delegate(address,uint256)": {
        "notice": "Delegate XQST tokens to a validator"
      },
      "drainToken(uint256)": {
        "notice": "Owner drains tokens when the contract is paused"
      },
      "getBondedValidatorNum()": {
        "notice": "Get the number of bonded validators"
      },
      "getDelegatorInfo(address,address)": {
        "notice": "Get the delegator info of a specific validator"
      },
      "getParamValue(uint8)": {
        "notice": "Get the value of a specific uint parameter"
      },
      "getQuorumTokens()": {
        "notice": "Get quorum amount of tokens"
      },
      "getValidatorNum()": {
        "notice": "Get the number of validators"
      },
      "getValidatorStatus(address)": {
        "notice": "Get validator info"
      },
      "getValidatorTokens(address)": {
        "notice": "Get validator info"
      },
      "hasMinRequiredTokens(address,bool)": {
        "notice": "Check if min token requirements are met"
      },
      "initializeValidator(address,uint256,uint64)": {
        "notice": "Initialize a validator candidate"
      },
      "isBondedValidator(address)": {
        "notice": "Check the given address is a validator or not"
      },
      "removeWhitelisted(address)": {
        "notice": "Remove an account from whitelist"
      },
      "setMaxSlashFactor(uint256)": {
        "notice": "Set max slash factor"
      },
      "setWhitelistEnabled(bool)": {
        "notice": "Set whitelistEnabled"
      },
      "slash(bytes,bytes[])": {
        "notice": "Slash a validator and its delegators"
      },
      "undelegateShares(address,uint256)": {
        "notice": "Undelegate shares from a validator"
      },
      "undelegateTokens(address,uint256)": {
        "notice": "Undelegate shares from a validator"
      },
      "updateCommissionRate(uint64)": {
        "notice": "Update commission rate"
      },
      "updateMinSelfDelegation(uint256)": {
        "notice": "Update minimal self delegation value"
      },
      "updateValidatorSigner(address)": {
        "notice": "Update validator signer address"
      },
      "validatorNotice(address,string,bytes)": {
        "notice": "Validator notice event, could be triggered by anyone"
      },
      "verifySignatures(bytes,bytes[])": {
        "notice": "Validate if a message is signed by quorum tokens"
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "notice": "Verifies that a message is signed by a quorum among the validators."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35256,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1261,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 35370,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35699,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "whitelist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35701,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "whitelistEnabled",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 38766,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "bondedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 38768,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "nextBondBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 38771,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "valAddrs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 38774,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "bondedValAddrs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 38779,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "validators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Validator)37880_storage)"
      },
      {
        "astId": 38783,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "signerVals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 38787,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "slashNonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 38792,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "params",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_enum(ParamName)37832,t_uint256)"
      },
      {
        "astId": 38794,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "govContract",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 38796,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "rewardContract",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 38798,
        "contract": "contracts/staking/Staking.sol:Staking",
        "label": "forfeiture",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ParamName)37832": {
        "encoding": "inplace",
        "label": "enum DataTypes.ParamName",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorStatus)37822": {
        "encoding": "inplace",
        "label": "enum DataTypes.ValidatorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Delegator)37853_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Delegator)",
        "numberOfBytes": "32",
        "value": "t_struct(Delegator)37853_storage"
      },
      "t_mapping(t_address,t_struct(Validator)37880_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Validator)",
        "numberOfBytes": "32",
        "value": "t_struct(Validator)37880_storage"
      },
      "t_mapping(t_enum(ParamName)37832,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ParamName)37832",
        "label": "mapping(enum DataTypes.ParamName => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Undelegation)37837_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Undelegation)",
        "numberOfBytes": "32",
        "value": "t_struct(Undelegation)37837_storage"
      },
      "t_struct(Delegator)37853_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Delegator",
        "members": [
          {
            "astId": 37849,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 37852,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "undelegations",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Undelegations)37847_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Undelegation)37837_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Undelegation",
        "members": [
          {
            "astId": 37834,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 37836,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "creationBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Undelegations)37847_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Undelegations",
        "members": [
          {
            "astId": 37842,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "queue",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Undelegation)37837_storage)"
          },
          {
            "astId": 37844,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "head",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 37846,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "tail",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Validator)37880_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Validator",
        "members": [
          {
            "astId": 37856,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ValidatorStatus)37822"
          },
          {
            "astId": 37858,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "signer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 37860,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 37862,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 37864,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "undelegationTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 37866,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "undelegationShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 37871,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "delegators",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Delegator)37853_storage)"
          },
          {
            "astId": 37873,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "minSelfDelegation",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 37875,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "bondBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 37877,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "unbondBlock",
            "offset": 8,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 37879,
            "contract": "contracts/staking/Staking.sol:Staking",
            "label": "commissionRate",
            "offset": 16,
            "slot": "7",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}